{
  "0": {
    "meta": {
      "source": "Data Science Programming",
      "extraction_time": "2023-10-01T00:00:00Z",
      "notes_hash": "9d29c95b28d0bb85de79ebd3cb7e51caa37b30856c24f49f797889a749393062",
      "allowed_relations": [
        "isA",
        "partOf",
        "prerequisiteOf",
        "dependsOn",
        "relatedTo",
        "synonymOf",
        "antonymOf",
        "contrastsWith",
        "defines",
        "uses",
        "usedBy",
        "appliesTo",
        "exampleOf",
        "counterexampleOf",
        "illustratedBy",
        "causes",
        "resultsIn",
        "prevents",
        "assumes",
        "implies",
        "equivalentTo",
        "parameterOf",
        "hasParameter",
        "propertyOf",
        "hasProperty",
        "measuredBy",
        "unitOf",
        "representedBy",
        "notationFor",
        "formulaFor",
        "provedBy",
        "theoremOf",
        "algorithmFor",
        "stepOf",
        "produces",
        "consumes",
        "advantageOf",
        "limitationOf",
        "commonErrorIn",
        "misconceptionOf",
        "commonlyConfusedWith",
        "assessedBy"
      ]
    },
    "nodes": [
      {
        "id": "1",
        "label": "Time Series Data",
        "type": "Concept",
        "definition": "Time series data is a sequence of data points indexed in time order.",
        "aliases": [
          "Time Series"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Time Series"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "Time series data is an important form of structured data in many different fields..."
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition is directly stated and is fundamental to the topic of time series analysis."
      },
      {
        "id": "2",
        "label": "Pandas",
        "type": "Library",
        "definition": "Pandas is a Python library used for data manipulation and analysis.",
        "aliases": [
          "pandas"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 1.0,
        "rationale": "The code snippet clearly shows the importation of the Pandas library, indicating its use in time series operations."
      },
      {
        "id": "3",
        "label": "Datetime",
        "type": "Concept",
        "definition": "The datetime class in Python provides methods for manipulating dates and times.",
        "aliases": [
          "datetime"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 1.0,
        "rationale": "The description is directly sourced from the lecture notes and defines a key tool in time series analysis."
      },
      {
        "id": "4",
        "label": "Time Zone Handling",
        "type": "Concept",
        "definition": "Time zone handling is crucial for accurately analyzing time series data across different regions.",
        "aliases": [
          "Time Zone Management"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Working with time zones is generally considered one of the most unpleasant parts of time series manipulation."
          }
        ],
        "confidence": 1.0,
        "rationale": "The significance of time zone handling is highlighted as a key aspect of time series analysis."
      },
      {
        "id": "5",
        "label": "Timespan",
        "type": "Concept",
        "definition": "Periods in time series data represent timespans such as days, months, and years.",
        "aliases": [
          "Period"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Periods represent timespans, like days, months, quarters, or years."
          }
        ],
        "confidence": 1.0,
        "rationale": "The explanation of periods and their significance is crucial for understanding time series data."
      }
    ],
    "edges": [
      {
        "id": "edge1",
        "source": "1",
        "target": "2",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge2",
        "source": "2",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge3",
        "source": "1",
        "target": "4",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge4",
        "source": "1",
        "target": "5",
        "relation": "hasProperty",
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The Period class represents this data type, requiring a string or integer and a frequency."
          }
        ],
        "confidence": 0.9,
        "rationale": "Understanding periods is essential for effectively working with time series data.",
        "definition": "Time Series Data hasProperty Timespan"
      }
    ]
  },
  "1": {
    "meta": {
      "source": "Data Science Programming",
      "extraction_time": "2023-10-01T00:00:00Z",
      "notes_hash": "9d29c95b28d0bb85de79ebd3cb7e51caa37b30856c24f49f797889a749393062",
      "allowed_relations": [
        "isA",
        "partOf",
        "prerequisiteOf",
        "dependsOn",
        "relatedTo",
        "synonymOf",
        "antonymOf",
        "contrastsWith",
        "defines",
        "uses",
        "usedBy",
        "appliesTo",
        "exampleOf",
        "counterexampleOf",
        "illustratedBy",
        "causes",
        "resultsIn",
        "prevents",
        "assumes",
        "implies",
        "equivalentTo",
        "parameterOf",
        "hasParameter",
        "propertyOf",
        "hasProperty",
        "measuredBy",
        "unitOf",
        "representedBy",
        "notationFor",
        "formulaFor",
        "provedBy",
        "theoremOf",
        "algorithmFor",
        "stepOf",
        "produces",
        "consumes",
        "advantageOf",
        "limitationOf",
        "commonErrorIn",
        "misconceptionOf",
        "commonlyConfusedWith",
        "assessedBy"
      ]
    },
    "nodes": [
      {
        "id": "1",
        "label": "Time Series Data",
        "type": "Concept",
        "definition": "Time series data is a sequence of data points indexed in time order.",
        "aliases": [
          "Time Series"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Time Series"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "Time series data is an important form of structured data in many different fields..."
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition is directly stated and is fundamental to the topic of time series analysis."
      },
      {
        "id": "3",
        "label": "Datetime",
        "type": "Concept",
        "definition": "The datetime class in Python provides methods for manipulating dates and times.",
        "aliases": [
          "datetime"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 1.0,
        "rationale": "The description is directly sourced from the lecture notes and defines a key tool in time series analysis."
      },
      {
        "id": "4",
        "label": "Time Zone Handling",
        "type": "Concept",
        "definition": "Time zone handling is crucial for accurately analyzing time series data across different regions.",
        "aliases": [
          "Time Zone Management"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Working with time zones is generally considered one of the most unpleasant parts of time series manipulation."
          }
        ],
        "confidence": 1.0,
        "rationale": "The significance of time zone handling is highlighted as a key aspect of time series analysis."
      },
      {
        "id": "5",
        "label": "Timespan",
        "type": "Concept",
        "definition": "Periods in time series data represent timespans such as days, months, and years.",
        "aliases": [
          "Period"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Periods represent timespans, like days, months, quarters, or years."
          }
        ],
        "confidence": 1.0,
        "rationale": "The explanation of periods and their significance is crucial for understanding time series data."
      },
      {
        "id": "strftime_operation",
        "label": "strftime operation",
        "type": "Concept",
        "definition": "stamp.strftime('%y-%m-%d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Textual_Statement",
        "label": "Textual Statement",
        "type": "Concept",
        "definition": "ts",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Patient",
        "label": "Patient",
        "type": "Concept",
        "definition": "pts",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timestamp_creation",
        "label": "Timestamp creation",
        "type": "Concept",
        "definition": "stamp = pd.timestamp('2011-03-12 04:00')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_time_series_data_manipulation",
        "label": "Pandas time series data manipulation",
        "type": "Library",
        "definition": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nwith pip or conda), which exposes the olson database, a compilation of world\nimport pytz\npandas is generally oriented toward working with arrays of dates, whether used as an\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for\nfrom pandas.tseries.offsets import hour, minute\ndataframe have a shift method for doing naive shifts forward or backward, leaving\ncolumns=['colorado', 'texas', 'new york', 'ohio'])\ncolumns=['colorado', 'texas', 'new york', 'ohio'])",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Time_Series_Resampling",
        "label": "Pandas Time Series Resampling",
        "type": "Library",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Current_Date_and_Time_Information",
        "label": "Current Date and Time Information",
        "type": "Concept",
        "definition": "now.year, now.month, now.day\nnow.year\nnow.hour\nnow.tzinfo",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "TimePeriodConversion",
        "label": "TimePeriodConversion",
        "type": "Concept",
        "definition": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      }
    ],
    "edges": [
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge2",
        "source": "Pandas_time_series_data_manipulation",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge2",
        "source": "Pandas_Time_Series_Resampling",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge3",
        "source": "1",
        "target": "4",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge4",
        "source": "1",
        "target": "5",
        "relation": "hasProperty",
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The Period class represents this data type, requiring a string or integer and a frequency."
          }
        ],
        "confidence": 0.9,
        "rationale": "Understanding periods is essential for effectively working with time series data.",
        "definition": "Time Series Data hasProperty Timespan"
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "strftime_operation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "strftime_operation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_usedBy_3",
        "source": "strftime_operation",
        "target": "3",
        "relation": "usedBy",
        "definition": "strftime operation usedBy Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The \"strftime operation\" is a method used with Python's datetime objects to format them into strings."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "Textual_Statement",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "Textual_Statement",
        "target": "4",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Patient_synonymOf_Textual_Statement",
        "source": "Patient",
        "target": "Textual_Statement",
        "relation": "synonymOf",
        "definition": "Patient synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"pts\" is explicitly given as an abbreviation for \"Patient\"."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Current_Date_and_Time_Information",
        "target": "Textual_Statement",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "TimePeriodConversion",
        "target": "Textual_Statement",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      }
    ]
  },
  "2": {
    "meta": {
      "source": "Data Science Programming",
      "extraction_time": "2023-10-01T00:00:00Z",
      "notes_hash": "9d29c95b28d0bb85de79ebd3cb7e51caa37b30856c24f49f797889a749393062",
      "allowed_relations": [
        "isA",
        "partOf",
        "prerequisiteOf",
        "dependsOn",
        "relatedTo",
        "synonymOf",
        "antonymOf",
        "contrastsWith",
        "defines",
        "uses",
        "usedBy",
        "appliesTo",
        "exampleOf",
        "counterexampleOf",
        "illustratedBy",
        "causes",
        "resultsIn",
        "prevents",
        "assumes",
        "implies",
        "equivalentTo",
        "parameterOf",
        "hasParameter",
        "propertyOf",
        "hasProperty",
        "measuredBy",
        "unitOf",
        "representedBy",
        "notationFor",
        "formulaFor",
        "provedBy",
        "theoremOf",
        "algorithmFor",
        "stepOf",
        "produces",
        "consumes",
        "advantageOf",
        "limitationOf",
        "commonErrorIn",
        "misconceptionOf",
        "commonlyConfusedWith",
        "assessedBy"
      ]
    },
    "nodes": [
      {
        "id": "1",
        "label": "Time Series Data",
        "type": "Concept",
        "definition": "Time series data is a sequence of data points indexed in time order.",
        "aliases": [
          "Time Series"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Time Series"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "Time series data is an important form of structured data in many different fields..."
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition is directly stated and is fundamental to the topic of time series analysis."
      },
      {
        "id": "3",
        "label": "Datetime",
        "type": "Concept",
        "definition": "The datetime class in Python provides methods for manipulating dates and times.",
        "aliases": [
          "datetime"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 1.0,
        "rationale": "The description is directly sourced from the lecture notes and defines a key tool in time series analysis."
      },
      {
        "id": "4",
        "label": "Time Zone Handling",
        "type": "Concept",
        "definition": "Time zone handling is crucial for accurately analyzing time series data across different regions.",
        "aliases": [
          "Time Zone Management"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Working with time zones is generally considered one of the most unpleasant parts of time series manipulation."
          }
        ],
        "confidence": 1.0,
        "rationale": "The significance of time zone handling is highlighted as a key aspect of time series analysis."
      },
      {
        "id": "5",
        "label": "Timespan",
        "type": "Concept",
        "definition": "Periods in time series data represent timespans such as days, months, and years.",
        "aliases": [
          "Period"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Periods represent timespans, like days, months, quarters, or years."
          }
        ],
        "confidence": 1.0,
        "rationale": "The explanation of periods and their significance is crucial for understanding time series data."
      },
      {
        "id": "strftime_operation",
        "label": "strftime operation",
        "type": "Concept",
        "definition": "stamp.strftime('%y-%m-%d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Textual_Statement",
        "label": "Textual Statement",
        "type": "Concept",
        "definition": "ts",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Patient",
        "label": "Patient",
        "type": "Concept",
        "definition": "pts",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timestamp_creation",
        "label": "Timestamp creation",
        "type": "Concept",
        "definition": "stamp = pd.timestamp('2011-03-12 04:00')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_time_series_data_manipulation",
        "label": "Pandas time series data manipulation",
        "type": "Library",
        "definition": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nwith pip or conda), which exposes the olson database, a compilation of world\nimport pytz\npandas is generally oriented toward working with arrays of dates, whether used as an\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for\nfrom pandas.tseries.offsets import hour, minute\ndataframe have a shift method for doing naive shifts forward or backward, leaving\ncolumns=['colorado', 'texas', 'new york', 'ohio'])\ncolumns=['colorado', 'texas', 'new york', 'ohio'])",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Time_Series_Resampling",
        "label": "Pandas Time Series Resampling",
        "type": "Library",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "TimePeriodConversion",
        "label": "TimePeriodConversion",
        "type": "Concept",
        "definition": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "date_collection",
        "label": "date collection",
        "type": "Concept",
        "definition": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "UTC_timestamp_localization",
        "label": "UTC timestamp localization",
        "type": "Concept",
        "definition": "stamp_utc = stamp.tz_localize('utc')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_Range_Generation",
        "label": "Date Range Generation",
        "type": "Concept",
        "definition": "rng = pd.date_range('2000-01-01', periods=100, freq='d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Weekly_Wednesday_Frequency",
        "label": "Weekly Wednesday Frequency",
        "type": "Concept",
        "definition": "freq='w-wed'),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_and_Time_Operations",
        "label": "Date and Time Operations",
        "type": "Concept",
        "definition": "now = datetime.now()\nnow.year, now.month, now.day\ndatetime.now() - datetime(2024, 4, 20)\nnow = datetime.now()\nnow.year\nalign on the dates:",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.hour\nhour = hour()\nhour"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "current_hour",
        "label": "current hour",
        "type": "Concept",
        "definition": "now.hour\nhour = hour()\nhour",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.hour\nhour = hour()\nhour"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "date_representation",
        "label": "date representation",
        "type": "Concept",
        "definition": "datestrs = ['7/6/2021', '8/6/2021']\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "datetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Date_range",
        "label": "Date range",
        "type": "Concept",
        "definition": "datetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "datetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      }
    ],
    "edges": [
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge2",
        "source": "Pandas_time_series_data_manipulation",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge2",
        "source": "Pandas_Time_Series_Resampling",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge3",
        "source": "1",
        "target": "4",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge4",
        "source": "1",
        "target": "5",
        "relation": "hasProperty",
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The Period class represents this data type, requiring a string or integer and a frequency."
          }
        ],
        "confidence": 0.9,
        "rationale": "Understanding periods is essential for effectively working with time series data.",
        "definition": "Time Series Data hasProperty Timespan"
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "strftime_operation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "strftime_operation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_usedBy_3",
        "source": "strftime_operation",
        "target": "3",
        "relation": "usedBy",
        "definition": "strftime operation usedBy Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The \"strftime operation\" is a method used with Python's datetime objects to format them into strings."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "Textual_Statement",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "Textual_Statement",
        "target": "4",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Patient_synonymOf_Textual_Statement",
        "source": "Patient",
        "target": "Textual_Statement",
        "relation": "synonymOf",
        "definition": "Patient synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"pts\" is explicitly given as an abbreviation for \"Patient\"."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Date_and_Time_Operations",
        "target": "Textual_Statement",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "current_hour",
        "target": "Textual_Statement",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "TimePeriodConversion",
        "target": "Textual_Statement",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_date_collection_uses_Pandas_time_series_data_manipulation",
        "source": "date_collection",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "date collection uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example definition for \"date collection\" uses Python's `datetime` object, which is a core component of Pandas for time series manipulation."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "date_representation",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Date_range",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "date_representation",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Date_range",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "date_representation",
        "target": "4",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Date_range",
        "target": "4",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "date_representation",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_range",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "date_representation",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_range",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_UTC_timestamp_localization_uses_Pandas_time_series_data_manipulation",
        "source": "UTC_timestamp_localization",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "UTC timestamp localization uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"UTC timestamp localization\" contains \"stamp_utc = stamp.tz_localize('utc')\", which is a common operation within Pandas for time series data manipulation."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Date_Range_Generation",
        "target": "1",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a specific frequency parameter used within the Pandas library for time series data manipulation."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_Time_Series_Resampling",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" (freq='w-wed') is a frequency string that is directly used in Pandas' time series resampling operations, as shown in examples like `frame.resample('w-thu')`."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Date_Range_Generation",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      }
    ]
  },
  "3": {
    "meta": {
      "source": "Data Science Programming",
      "extraction_time": "2023-10-01T00:00:00Z",
      "notes_hash": "9d29c95b28d0bb85de79ebd3cb7e51caa37b30856c24f49f797889a749393062",
      "allowed_relations": [
        "isA",
        "partOf",
        "prerequisiteOf",
        "dependsOn",
        "relatedTo",
        "synonymOf",
        "antonymOf",
        "contrastsWith",
        "defines",
        "uses",
        "usedBy",
        "appliesTo",
        "exampleOf",
        "counterexampleOf",
        "illustratedBy",
        "causes",
        "resultsIn",
        "prevents",
        "assumes",
        "implies",
        "equivalentTo",
        "parameterOf",
        "hasParameter",
        "propertyOf",
        "hasProperty",
        "measuredBy",
        "unitOf",
        "representedBy",
        "notationFor",
        "formulaFor",
        "provedBy",
        "theoremOf",
        "algorithmFor",
        "stepOf",
        "produces",
        "consumes",
        "advantageOf",
        "limitationOf",
        "commonErrorIn",
        "misconceptionOf",
        "commonlyConfusedWith",
        "assessedBy"
      ]
    },
    "nodes": [
      {
        "id": "1",
        "label": "Time Series Data",
        "type": "Concept",
        "definition": "Time series data is a sequence of data points indexed in time order.",
        "aliases": [
          "Time Series"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Time Series"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "Time series data is an important form of structured data in many different fields..."
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition is directly stated and is fundamental to the topic of time series analysis."
      },
      {
        "id": "3",
        "label": "Datetime",
        "type": "Concept",
        "definition": "The datetime class in Python provides methods for manipulating dates and times.",
        "aliases": [
          "datetime"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 1.0,
        "rationale": "The description is directly sourced from the lecture notes and defines a key tool in time series analysis."
      },
      {
        "id": "4",
        "label": "Time Zone Handling",
        "type": "Concept",
        "definition": "Time zone handling is crucial for accurately analyzing time series data across different regions.",
        "aliases": [
          "Time Zone Management"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Working with time zones is generally considered one of the most unpleasant parts of time series manipulation."
          }
        ],
        "confidence": 1.0,
        "rationale": "The significance of time zone handling is highlighted as a key aspect of time series analysis."
      },
      {
        "id": "5",
        "label": "Timespan",
        "type": "Concept",
        "definition": "Periods in time series data represent timespans such as days, months, and years.",
        "aliases": [
          "Period"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Periods represent timespans, like days, months, quarters, or years."
          }
        ],
        "confidence": 1.0,
        "rationale": "The explanation of periods and their significance is crucial for understanding time series data."
      },
      {
        "id": "strftime_operation",
        "label": "strftime operation",
        "type": "Concept",
        "definition": "stamp.strftime('%y-%m-%d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Textual_Statement",
        "label": "Textual Statement",
        "type": "Concept",
        "definition": "ts",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Patient",
        "label": "Patient",
        "type": "Concept",
        "definition": "pts",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timestamp_creation",
        "label": "Timestamp creation",
        "type": "Concept",
        "definition": "stamp = pd.timestamp('2011-03-12 04:00')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_time_series_data_manipulation",
        "label": "Pandas time series data manipulation",
        "type": "Library",
        "definition": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nwith pip or conda), which exposes the olson database, a compilation of world\nimport pytz\npandas is generally oriented toward working with arrays of dates, whether used as an\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for\nfrom pandas.tseries.offsets import hour, minute\ndataframe have a shift method for doing naive shifts forward or backward, leaving\ncolumns=['colorado', 'texas', 'new york', 'ohio'])\ncolumns=['colorado', 'texas', 'new york', 'ohio'])",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Time_Series_Resampling",
        "label": "Pandas Time Series Resampling",
        "type": "Library",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "TimePeriodConversion",
        "label": "TimePeriodConversion",
        "type": "Concept",
        "definition": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "date_collection",
        "label": "date collection",
        "type": "Concept",
        "definition": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "UTC_timestamp_localization",
        "label": "UTC timestamp localization",
        "type": "Concept",
        "definition": "stamp_utc = stamp.tz_localize('utc')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Weekly_Wednesday_Frequency",
        "label": "Weekly Wednesday Frequency",
        "type": "Concept",
        "definition": "freq='w-wed'),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_and_Time_Operations",
        "label": "Date and Time Operations",
        "type": "Concept",
        "definition": "now = datetime.now()\nnow.year, now.month, now.day\ndatetime.now() - datetime(2024, 4, 20)\nnow = datetime.now()\nnow.year\nalign on the dates:",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.hour\nhour = hour()\nhour"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "current_hour",
        "label": "current hour",
        "type": "Concept",
        "definition": "now.hour\nhour = hour()\nhour",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.hour\nhour = hour()\nhour"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Date_range",
        "label": "Date range",
        "type": "Concept",
        "definition": "datetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "datetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "DatetimeIndexGenerationParameters",
        "label": "DatetimeIndexGenerationParameters",
        "type": "Concept",
        "definition": "generating a datetimeindex with an indicated length according to a particular",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Generating Date Ranges"
            ],
            "line_start": 163,
            "line_end": 163,
            "text_excerpt": "generating a datetimeindex with an indicated length according to a particular"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "label": "Pandas Series of Random Normal Data with Datetime Index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(len(rng)), index=rng)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Daily_Resampling_of_Time_Series_Data",
        "label": "Daily Resampling of Time Series Data",
        "type": "Concept",
        "definition": "ts.resample('d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "ts.resample('d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "label": "Pandas Series with Random Normal Data and Datetime Index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(6), index=dates)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_DataFrame_Creation",
        "label": "Pandas DataFrame Creation",
        "type": "Concept",
        "definition": "frame = pd.dataframe(np.random.randn(24, 4),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_Range_Generation_2",
        "label": "Date Range Generation",
        "type": "Concept",
        "definition": "pd.date_range('2000-01-01', '2000-12-01', freq='bm')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nrng = pd.date_range('2000-01-01', periods=12, freq='t')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Date_Range",
        "label": "Pandas Date Range",
        "type": "Concept",
        "definition": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Local_Timezone_Hour",
        "label": "Local Timezone Hour",
        "type": "Concept",
        "definition": "now = now.astimezone(local_tz)\nnow.hour\nnow.tzinfo\nanother:",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Hour",
        "label": "Hour",
        "type": "Concept",
        "definition": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      }
    ],
    "edges": [
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge2",
        "source": "Pandas_time_series_data_manipulation",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge2",
        "source": "Pandas_Time_Series_Resampling",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge3",
        "source": "1",
        "target": "4",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge4",
        "source": "1",
        "target": "5",
        "relation": "hasProperty",
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The Period class represents this data type, requiring a string or integer and a frequency."
          }
        ],
        "confidence": 0.9,
        "rationale": "Understanding periods is essential for effectively working with time series data.",
        "definition": "Time Series Data hasProperty Timespan"
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "strftime_operation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "strftime_operation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_usedBy_3",
        "source": "strftime_operation",
        "target": "3",
        "relation": "usedBy",
        "definition": "strftime operation usedBy Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The \"strftime operation\" is a method used with Python's datetime objects to format them into strings."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "Textual_Statement",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "Textual_Statement",
        "target": "4",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Patient_synonymOf_Textual_Statement",
        "source": "Patient",
        "target": "Textual_Statement",
        "relation": "synonymOf",
        "definition": "Patient synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"pts\" is explicitly given as an abbreviation for \"Patient\"."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Date_and_Time_Operations",
        "target": "Textual_Statement",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "current_hour",
        "target": "Textual_Statement",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "TimePeriodConversion",
        "target": "Textual_Statement",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_date_collection_uses_Pandas_time_series_data_manipulation",
        "source": "date_collection",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "date collection uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example definition for \"date collection\" uses Python's `datetime` object, which is a core component of Pandas for time series manipulation."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Local_Timezone_Hour",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Hour",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Date_range",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Local_Timezone_Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Date_range",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Local_Timezone_Hour",
        "target": "4",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Hour",
        "target": "4",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Date_range",
        "target": "4",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_range",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_range",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_UTC_timestamp_localization_uses_Pandas_time_series_data_manipulation",
        "source": "UTC_timestamp_localization",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "UTC timestamp localization uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"UTC timestamp localization\" contains \"stamp_utc = stamp.tz_localize('utc')\", which is a common operation within Pandas for time series data manipulation."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Date_Range_Generation_2",
        "target": "1",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Pandas_Date_Range",
        "target": "1",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a specific frequency parameter used within the Pandas library for time series data manipulation."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_Time_Series_Resampling",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" (freq='w-wed') is a frequency string that is directly used in Pandas' time series resampling operations, as shown in examples like `frame.resample('w-thu')`."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Date_Range_Generation_2",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Date_Range",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_DatetimeIndexGenerationParameters_uses_DatetimeIndexGenerationParameters",
        "source": "DatetimeIndexGenerationParameters",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "uses",
        "definition": "DatetimeIndexGenerationParameters uses DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Generating Date Ranges"
            ],
            "line_start": 163,
            "line_end": 163,
            "text_excerpt": "generating a datetimeindex with an indicated length according to a particular"
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition of \"DatetimeIndexGenerationParameters\" indicates it's for \"generating a datetimeindex\", and \"Pandas_time_series_data_manipulation\" is a broad category that encompasses such generation."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_1",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "1",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"Time Series Data\" as it consists of data points indexed by time (a `DatetimeIndex`)."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_Pandas_time_series_data_manipulation",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The creation of a Pandas Series with a DatetimeIndex is a core operation within \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Daily_Resampling_of_Time_Series_Data_relatedTo_TimePeriodConversion",
        "source": "Daily_Resampling_of_Time_Series_Data",
        "target": "TimePeriodConversion",
        "relation": "relatedTo",
        "definition": "Daily Resampling of Time Series Data relatedTo TimePeriodConversion",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "ts.resample('d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_isA_1",
        "source": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "target": "1",
        "relation": "isA",
        "definition": "Pandas Series with Random Normal Data and Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is a specific type of Time Series Data, characterized by its structure and data source."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_equivalentTo_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "equivalentTo",
        "definition": "Pandas Series with Random Normal Data and Datetime Index equivalentTo Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is essentially the same as this existing concept, differing only in the specific definition of the index generation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node describes the creation of a Pandas DataFrame, which is a core data structure used extensively in Pandas for time series data manipulation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_Time_Series_Resampling",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of the new node `frame = pd.dataframe(np.random.randn(24, 4),` is directly present within the definition of `Pandas_Time_Series_Resampling`, indicating a strong usage relationship."
      }
    ]
  },
  "4": {
    "meta": {
      "source": "Data Science Programming",
      "extraction_time": "2023-10-01T00:00:00Z",
      "notes_hash": "9d29c95b28d0bb85de79ebd3cb7e51caa37b30856c24f49f797889a749393062",
      "allowed_relations": [
        "isA",
        "partOf",
        "prerequisiteOf",
        "dependsOn",
        "relatedTo",
        "synonymOf",
        "antonymOf",
        "contrastsWith",
        "defines",
        "uses",
        "usedBy",
        "appliesTo",
        "exampleOf",
        "counterexampleOf",
        "illustratedBy",
        "causes",
        "resultsIn",
        "prevents",
        "assumes",
        "implies",
        "equivalentTo",
        "parameterOf",
        "hasParameter",
        "propertyOf",
        "hasProperty",
        "measuredBy",
        "unitOf",
        "representedBy",
        "notationFor",
        "formulaFor",
        "provedBy",
        "theoremOf",
        "algorithmFor",
        "stepOf",
        "produces",
        "consumes",
        "advantageOf",
        "limitationOf",
        "commonErrorIn",
        "misconceptionOf",
        "commonlyConfusedWith",
        "assessedBy"
      ]
    },
    "nodes": [
      {
        "id": "1",
        "label": "Time Series Data",
        "type": "Concept",
        "definition": "Time series data is a sequence of data points indexed in time order.",
        "aliases": [
          "Time Series"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Time Series"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "Time series data is an important form of structured data in many different fields..."
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition is directly stated and is fundamental to the topic of time series analysis."
      },
      {
        "id": "3",
        "label": "Datetime",
        "type": "Concept",
        "definition": "The datetime class in Python provides methods for manipulating dates and times.",
        "aliases": [
          "datetime"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 1.0,
        "rationale": "The description is directly sourced from the lecture notes and defines a key tool in time series analysis."
      },
      {
        "id": "4",
        "label": "Time Zone Handling",
        "type": "Concept",
        "definition": "Time zone handling is crucial for accurately analyzing time series data across different regions.",
        "aliases": [
          "Time Zone Management"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Working with time zones is generally considered one of the most unpleasant parts of time series manipulation."
          }
        ],
        "confidence": 1.0,
        "rationale": "The significance of time zone handling is highlighted as a key aspect of time series analysis."
      },
      {
        "id": "5",
        "label": "Timespan",
        "type": "Concept",
        "definition": "Periods in time series data represent timespans such as days, months, and years.",
        "aliases": [
          "Period"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Periods represent timespans, like days, months, quarters, or years."
          }
        ],
        "confidence": 1.0,
        "rationale": "The explanation of periods and their significance is crucial for understanding time series data."
      },
      {
        "id": "strftime_operation",
        "label": "strftime operation",
        "type": "Concept",
        "definition": "stamp.strftime('%y-%m-%d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Textual_Statement",
        "label": "Textual Statement",
        "type": "Concept",
        "definition": "ts",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Patient",
        "label": "Patient",
        "type": "Concept",
        "definition": "pts",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timestamp_creation",
        "label": "Timestamp creation",
        "type": "Concept",
        "definition": "stamp = pd.timestamp('2011-03-12 04:00')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_time_series_data_manipulation",
        "label": "Pandas time series data manipulation",
        "type": "Library",
        "definition": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nwith pip or conda), which exposes the olson database, a compilation of world\nimport pytz\npandas is generally oriented toward working with arrays of dates, whether used as an\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for\nfrom pandas.tseries.offsets import hour, minute\ndataframe have a shift method for doing naive shifts forward or backward, leaving\ncolumns=['colorado', 'texas', 'new york', 'ohio'])\ncolumns=['colorado', 'texas', 'new york', 'ohio'])",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Time_Series_Resampling",
        "label": "Pandas Time Series Resampling",
        "type": "Library",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "TimePeriodConversion",
        "label": "TimePeriodConversion",
        "type": "Concept",
        "definition": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "date_collection",
        "label": "date collection",
        "type": "Concept",
        "definition": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "UTC_timestamp_localization",
        "label": "UTC timestamp localization",
        "type": "Concept",
        "definition": "stamp_utc = stamp.tz_localize('utc')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Weekly_Wednesday_Frequency",
        "label": "Weekly Wednesday Frequency",
        "type": "Concept",
        "definition": "freq='w-wed'),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_and_Time_Operations",
        "label": "Date and Time Operations",
        "type": "Concept",
        "definition": "now = datetime.now()\nnow.year, now.month, now.day\ndatetime.now() - datetime(2024, 4, 20)\nnow = datetime.now()\nnow.year\nalign on the dates:",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.hour\nhour = hour()\nhour"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "current_hour",
        "label": "current hour",
        "type": "Concept",
        "definition": "now.hour\nhour = hour()\nhour",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.hour\nhour = hour()\nhour"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "DatetimeIndexGenerationParameters",
        "label": "DatetimeIndexGenerationParameters",
        "type": "Concept",
        "definition": "generating a datetimeindex with an indicated length according to a particular",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Generating Date Ranges"
            ],
            "line_start": 163,
            "line_end": 163,
            "text_excerpt": "generating a datetimeindex with an indicated length according to a particular"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "label": "Pandas Series of Random Normal Data with Datetime Index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(len(rng)), index=rng)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "label": "Pandas Series with Random Normal Data and Datetime Index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(6), index=dates)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_DataFrame_Creation",
        "label": "Pandas DataFrame Creation",
        "type": "Concept",
        "definition": "frame = pd.dataframe(np.random.randn(24, 4),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_Range_Generation_2",
        "label": "Date Range Generation",
        "type": "Concept",
        "definition": "pd.date_range('2000-01-01', '2000-12-01', freq='bm')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nrng = pd.date_range('2000-01-01', periods=12, freq='t')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Date_Range",
        "label": "Pandas Date Range",
        "type": "Concept",
        "definition": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Local_Timezone_Hour",
        "label": "Local Timezone Hour",
        "type": "Concept",
        "definition": "now = now.astimezone(local_tz)\nnow.hour\nnow.tzinfo\nanother:",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Hour",
        "label": "Hour",
        "type": "Concept",
        "definition": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Non_Unique_Timestamp_Data_Aggregation",
        "label": "Non-Unique Timestamp Data Aggregation",
        "type": "Concept",
        "definition": "suppose you wanted to aggregate the data having non-unique timestamps. one way",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Irregular_Time_Marking",
        "label": "Irregular Time Marking",
        "type": "Concept",
        "definition": "also be irregular without a fixed unit of time or offset between units. how you mark",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timedelta_Calculation",
        "label": "Timedelta Calculation",
        "type": "Concept",
        "definition": "datetime.now() - datetime(2024, 4, 20)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "DateRangeGeneration",
        "label": "DateRangeGeneration",
        "type": "Concept",
        "definition": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "pandas_Series_with_random_data_and_date_index",
        "label": "pandas Series with random data and date index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(6), index=dates)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "grouped_count",
        "label": "grouped count",
        "type": "Concept",
        "definition": "grouped.count()",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Date_and_Datetime_Manipulation",
        "label": "Date and Datetime Manipulation",
        "type": "Concept",
        "definition": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "label": "Pandas Series Creation with Random Data and Time Index",
        "type": "Concept",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nlist(rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(3), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.arange(12), index=rng)",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "longer_ts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Longer_Time_Series",
        "label": "Longer Time Series",
        "type": "Concept",
        "definition": "longer_ts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "longer_ts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      }
    ],
    "edges": [
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge2",
        "source": "Pandas_time_series_data_manipulation",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge2",
        "source": "Pandas_Time_Series_Resampling",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge3",
        "source": "1",
        "target": "4",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge4",
        "source": "1",
        "target": "5",
        "relation": "hasProperty",
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The Period class represents this data type, requiring a string or integer and a frequency."
          }
        ],
        "confidence": 0.9,
        "rationale": "Understanding periods is essential for effectively working with time series data.",
        "definition": "Time Series Data hasProperty Timespan"
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "strftime_operation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "strftime_operation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_usedBy_3",
        "source": "strftime_operation",
        "target": "3",
        "relation": "usedBy",
        "definition": "strftime operation usedBy Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The \"strftime operation\" is a method used with Python's datetime objects to format them into strings."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "Textual_Statement",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "Textual_Statement",
        "target": "4",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Patient_synonymOf_Textual_Statement",
        "source": "Patient",
        "target": "Textual_Statement",
        "relation": "synonymOf",
        "definition": "Patient synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"pts\" is explicitly given as an abbreviation for \"Patient\"."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Date_and_Time_Operations",
        "target": "Textual_Statement",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "current_hour",
        "target": "Textual_Statement",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "TimePeriodConversion",
        "target": "Textual_Statement",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_date_collection_uses_Pandas_time_series_data_manipulation",
        "source": "date_collection",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "date collection uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example definition for \"date collection\" uses Python's `datetime` object, which is a core component of Pandas for time series manipulation."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Local_Timezone_Hour",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Hour",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "grouped_count",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Date_and_Datetime_Manipulation",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Local_Timezone_Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "grouped_count",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Date_and_Datetime_Manipulation",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Local_Timezone_Hour",
        "target": "4",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Hour",
        "target": "4",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "grouped_count",
        "target": "4",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Date_and_Datetime_Manipulation",
        "target": "4",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "grouped_count",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "grouped_count",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_UTC_timestamp_localization_uses_Pandas_time_series_data_manipulation",
        "source": "UTC_timestamp_localization",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "UTC timestamp localization uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"UTC timestamp localization\" contains \"stamp_utc = stamp.tz_localize('utc')\", which is a common operation within Pandas for time series data manipulation."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Date_Range_Generation_2",
        "target": "1",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Pandas_Date_Range",
        "target": "1",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a specific frequency parameter used within the Pandas library for time series data manipulation."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_Time_Series_Resampling",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" (freq='w-wed') is a frequency string that is directly used in Pandas' time series resampling operations, as shown in examples like `frame.resample('w-thu')`."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Date_Range_Generation_2",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Date_Range",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_DatetimeIndexGenerationParameters_uses_DatetimeIndexGenerationParameters",
        "source": "DatetimeIndexGenerationParameters",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "uses",
        "definition": "DatetimeIndexGenerationParameters uses DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Generating Date Ranges"
            ],
            "line_start": 163,
            "line_end": 163,
            "text_excerpt": "generating a datetimeindex with an indicated length according to a particular"
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition of \"DatetimeIndexGenerationParameters\" indicates it's for \"generating a datetimeindex\", and \"Pandas_time_series_data_manipulation\" is a broad category that encompasses such generation."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_1",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "1",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"Time Series Data\" as it consists of data points indexed by time (a `DatetimeIndex`)."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_Pandas_time_series_data_manipulation",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The creation of a Pandas Series with a DatetimeIndex is a core operation within \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Daily_Resampling_of_Time_Series_Data_relatedTo_TimePeriodConversion",
        "source": "Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "target": "TimePeriodConversion",
        "relation": "relatedTo",
        "definition": "Daily Resampling of Time Series Data relatedTo TimePeriodConversion",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "ts.resample('d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Daily_Resampling_of_Time_Series_Data_relatedTo_TimePeriodConversion",
        "source": "Longer_Time_Series",
        "target": "TimePeriodConversion",
        "relation": "relatedTo",
        "definition": "Daily Resampling of Time Series Data relatedTo TimePeriodConversion",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "ts.resample('d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_isA_1",
        "source": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "target": "1",
        "relation": "isA",
        "definition": "Pandas Series with Random Normal Data and Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is a specific type of Time Series Data, characterized by its structure and data source."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_equivalentTo_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "equivalentTo",
        "definition": "Pandas Series with Random Normal Data and Datetime Index equivalentTo Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is essentially the same as this existing concept, differing only in the specific definition of the index generation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node describes the creation of a Pandas DataFrame, which is a core data structure used extensively in Pandas for time series data manipulation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_Time_Series_Resampling",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of the new node `frame = pd.dataframe(np.random.randn(24, 4),` is directly present within the definition of `Pandas_Time_Series_Resampling`, indicating a strong usage relationship."
      },
      {
        "id": "e_Non_Unique_Timestamp_Data_Aggregation_relatedTo_1",
        "source": "Non_Unique_Timestamp_Data_Aggregation",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Non-Unique Timestamp Data Aggregation relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_1",
        "source": "Irregular_Time_Marking",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" describes a characteristic of how time is represented or handled, which is relevant to \"Time Series Data\" as time is fundamental to its definition."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Irregular_Time_Marking",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" is a concept that would be encountered and potentially need to be handled during \"Pandas time series data manipulation.\""
      },
      {
        "id": "e_Timedelta_Calculation_relatedTo_Date_and_Time_Operations",
        "source": "Timedelta_Calculation",
        "target": "Date_and_Time_Operations",
        "relation": "relatedTo",
        "definition": "Timedelta Calculation relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "grouped_count",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_uses_Pandas_time_series_data_manipulation",
        "source": "DateRangeGeneration",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "DateRangeGeneration uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is defined using `pd.date_range`, which is a fundamental function within the pandas library for time series manipulation."
      },
      {
        "id": "e_DateRangeGeneration_relatedTo_Pandas_Date_Range",
        "source": "DateRangeGeneration",
        "target": "Pandas_Date_Range",
        "relation": "relatedTo",
        "definition": "DateRangeGeneration relatedTo Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is a specific instance or usage of the more general concept \"Pandas_Date_Range\", as both are related to creating date ranges using pandas."
      },
      {
        "id": "e_DateRangeGeneration_relatedTo_Date_Range_Generation_2",
        "source": "DateRangeGeneration",
        "target": "Date_Range_Generation_2",
        "relation": "relatedTo",
        "definition": "DateRangeGeneration relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is very similar to \"Date_Range_Generation_2\" in that both refer to the process of generating date ranges using pandas functions like `pd.date_range`."
      },
      {
        "id": "e_pandas_Series_with_random_data_and_date_index_synonymOf_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "pandas_Series_with_random_data_and_date_index",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "synonymOf",
        "definition": "pandas Series with random data and date index synonymOf Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new node is an exact synonym of this concept."
      },
      {
        "id": "e_pandas_Series_with_random_data_and_date_index_synonymOf_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "source": "pandas_Series_with_random_data_and_date_index",
        "target": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "relation": "synonymOf",
        "definition": "pandas Series with random data and date index synonymOf Pandas Series with Random Normal Data and Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new node is an exact synonym of this concept."
      }
    ]
  },
  "5": {
    "meta": {
      "source": "Data Science Programming",
      "extraction_time": "2023-10-01T00:00:00Z",
      "notes_hash": "9d29c95b28d0bb85de79ebd3cb7e51caa37b30856c24f49f797889a749393062",
      "allowed_relations": [
        "isA",
        "partOf",
        "prerequisiteOf",
        "dependsOn",
        "relatedTo",
        "synonymOf",
        "antonymOf",
        "contrastsWith",
        "defines",
        "uses",
        "usedBy",
        "appliesTo",
        "exampleOf",
        "counterexampleOf",
        "illustratedBy",
        "causes",
        "resultsIn",
        "prevents",
        "assumes",
        "implies",
        "equivalentTo",
        "parameterOf",
        "hasParameter",
        "propertyOf",
        "hasProperty",
        "measuredBy",
        "unitOf",
        "representedBy",
        "notationFor",
        "formulaFor",
        "provedBy",
        "theoremOf",
        "algorithmFor",
        "stepOf",
        "produces",
        "consumes",
        "advantageOf",
        "limitationOf",
        "commonErrorIn",
        "misconceptionOf",
        "commonlyConfusedWith",
        "assessedBy"
      ]
    },
    "nodes": [
      {
        "id": "1",
        "label": "Time Series Data",
        "type": "Concept",
        "definition": "Time series data is a sequence of data points indexed in time order.",
        "aliases": [
          "Time Series"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Time Series"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "Time series data is an important form of structured data in many different fields..."
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition is directly stated and is fundamental to the topic of time series analysis."
      },
      {
        "id": "3",
        "label": "Datetime",
        "type": "Concept",
        "definition": "The datetime class in Python provides methods for manipulating dates and times.",
        "aliases": [
          "datetime"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 1.0,
        "rationale": "The description is directly sourced from the lecture notes and defines a key tool in time series analysis."
      },
      {
        "id": "4",
        "label": "Time Zone Handling",
        "type": "Concept",
        "definition": "Time zone handling is crucial for accurately analyzing time series data across different regions.",
        "aliases": [
          "Time Zone Management"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Working with time zones is generally considered one of the most unpleasant parts of time series manipulation."
          }
        ],
        "confidence": 1.0,
        "rationale": "The significance of time zone handling is highlighted as a key aspect of time series analysis."
      },
      {
        "id": "5",
        "label": "Timespan",
        "type": "Concept",
        "definition": "Periods in time series data represent timespans such as days, months, and years.",
        "aliases": [
          "Period"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Periods represent timespans, like days, months, quarters, or years."
          }
        ],
        "confidence": 1.0,
        "rationale": "The explanation of periods and their significance is crucial for understanding time series data."
      },
      {
        "id": "strftime_operation",
        "label": "strftime operation",
        "type": "Concept",
        "definition": "stamp.strftime('%y-%m-%d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Patient",
        "label": "Patient",
        "type": "Concept",
        "definition": "pts",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timestamp_creation",
        "label": "Timestamp creation",
        "type": "Concept",
        "definition": "stamp = pd.timestamp('2011-03-12 04:00')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_time_series_data_manipulation",
        "label": "Pandas time series data manipulation",
        "type": "Library",
        "definition": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nwith pip or conda), which exposes the olson database, a compilation of world\nimport pytz\npandas is generally oriented toward working with arrays of dates, whether used as an\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for\nfrom pandas.tseries.offsets import hour, minute\ndataframe have a shift method for doing naive shifts forward or backward, leaving\ncolumns=['colorado', 'texas', 'new york', 'ohio'])\ncolumns=['colorado', 'texas', 'new york', 'ohio'])",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Time_Series_Resampling",
        "label": "Pandas Time Series Resampling",
        "type": "Library",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "TimePeriodConversion",
        "label": "TimePeriodConversion",
        "type": "Concept",
        "definition": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "date_collection",
        "label": "date collection",
        "type": "Concept",
        "definition": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "UTC_timestamp_localization",
        "label": "UTC timestamp localization",
        "type": "Concept",
        "definition": "stamp_utc = stamp.tz_localize('utc')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Weekly_Wednesday_Frequency",
        "label": "Weekly Wednesday Frequency",
        "type": "Concept",
        "definition": "freq='w-wed'),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_and_Time_Operations",
        "label": "Date and Time Operations",
        "type": "Concept",
        "definition": "now = datetime.now()\nnow.year, now.month, now.day\ndatetime.now() - datetime(2024, 4, 20)\nnow = datetime.now()\nnow.year\nalign on the dates:",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.hour\nhour = hour()\nhour"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "current_hour",
        "label": "current hour",
        "type": "Concept",
        "definition": "now.hour\nhour = hour()\nhour",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.hour\nhour = hour()\nhour"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "DatetimeIndexGenerationParameters",
        "label": "DatetimeIndexGenerationParameters",
        "type": "Concept",
        "definition": "generating a datetimeindex with an indicated length according to a particular",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Generating Date Ranges"
            ],
            "line_start": 163,
            "line_end": 163,
            "text_excerpt": "generating a datetimeindex with an indicated length according to a particular"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "label": "Pandas Series of Random Normal Data with Datetime Index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(len(rng)), index=rng)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "label": "Pandas Series with Random Normal Data and Datetime Index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(6), index=dates)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_DataFrame_Creation",
        "label": "Pandas DataFrame Creation",
        "type": "Concept",
        "definition": "frame = pd.dataframe(np.random.randn(24, 4),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_Range_Generation_2",
        "label": "Date Range Generation",
        "type": "Concept",
        "definition": "pd.date_range('2000-01-01', '2000-12-01', freq='bm')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nrng = pd.date_range('2000-01-01', periods=12, freq='t')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Date_Range",
        "label": "Pandas Date Range",
        "type": "Concept",
        "definition": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Local_Timezone_Hour",
        "label": "Local Timezone Hour",
        "type": "Concept",
        "definition": "now = now.astimezone(local_tz)\nnow.hour\nnow.tzinfo\nanother:",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Hour",
        "label": "Hour",
        "type": "Concept",
        "definition": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Non_Unique_Timestamp_Data_Aggregation",
        "label": "Non-Unique Timestamp Data Aggregation",
        "type": "Concept",
        "definition": "suppose you wanted to aggregate the data having non-unique timestamps. one way",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Irregular_Time_Marking",
        "label": "Irregular Time Marking",
        "type": "Concept",
        "definition": "also be irregular without a fixed unit of time or offset between units. how you mark",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timedelta_Calculation",
        "label": "Timedelta Calculation",
        "type": "Concept",
        "definition": "datetime.now() - datetime(2024, 4, 20)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "DateRangeGeneration",
        "label": "DateRangeGeneration",
        "type": "Concept",
        "definition": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "pandas_Series_with_random_data_and_date_index",
        "label": "pandas Series with random data and date index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(6), index=dates)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "grouped_count",
        "label": "grouped count",
        "type": "Concept",
        "definition": "grouped.count()",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Date_and_Datetime_Manipulation",
        "label": "Date and Datetime Manipulation",
        "type": "Concept",
        "definition": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "label": "Pandas Series Creation with Random Data and Time Index",
        "type": "Concept",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nlist(rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(3), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.arange(12), index=rng)",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "longer_ts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Longer_Time_Series",
        "label": "Longer Time Series",
        "type": "Concept",
        "definition": "longer_ts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "longer_ts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Fixed_frequency_date_range_generation",
        "label": "Fixed-frequency date range generation",
        "type": "Concept",
        "definition": "and generating fixed-frequency date ranges. for , you can convert",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "annual_frame_resampling",
        "label": "annual_frame_resampling",
        "type": "Concept",
        "definition": "annual_frame = frame.resample('a-dec').mean()",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 295,
            "line_end": 295,
            "text_excerpt": "annual_frame = frame.resample('a-dec').mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Regular_interval_data_occurrence",
        "label": "Regular interval data occurrence",
        "type": "Concept",
        "definition": "frequency, which is to say that data points occur at regular intervals according to some",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "datetime_arithmetic_operations",
        "label": "datetime arithmetic operations",
        "type": "Concept",
        "definition": "we can apply arithmatic operations on datetime objects:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Datetime_String_Parsing",
        "label": "Datetime String Parsing",
        "type": "Concept",
        "definition": "datetime.strptime(value, '%y-%m-%d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Exercise:"
            ],
            "line_start": 79,
            "line_end": 79,
            "text_excerpt": "datetime.strptime(value, '%y-%m-%d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "ts",
        "label": "ts",
        "type": "Concept",
        "definition": "ts\nts\nts\nts\nts\nts\nts\nts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts[stamp]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Stamp",
        "label": "Stamp",
        "type": "Concept",
        "definition": "ts[stamp]",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts[stamp]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      }
    ],
    "edges": [
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge2",
        "source": "Pandas_time_series_data_manipulation",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge2",
        "source": "Pandas_Time_Series_Resampling",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge3",
        "source": "1",
        "target": "4",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge4",
        "source": "1",
        "target": "5",
        "relation": "hasProperty",
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The Period class represents this data type, requiring a string or integer and a frequency."
          }
        ],
        "confidence": 0.9,
        "rationale": "Understanding periods is essential for effectively working with time series data.",
        "definition": "Time Series Data hasProperty Timespan"
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "strftime_operation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "strftime_operation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_usedBy_3",
        "source": "strftime_operation",
        "target": "3",
        "relation": "usedBy",
        "definition": "strftime operation usedBy Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The \"strftime operation\" is a method used with Python's datetime objects to format them into strings."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "ts",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "Stamp",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "ts",
        "target": "4",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "Stamp",
        "target": "4",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Patient_synonymOf_Textual_Statement",
        "source": "Patient",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "Patient synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"pts\" is explicitly given as an abbreviation for \"Patient\"."
      },
      {
        "id": "e_Patient_synonymOf_Textual_Statement",
        "source": "Patient",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "Patient synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"pts\" is explicitly given as an abbreviation for \"Patient\"."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Date_and_Time_Operations",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Date_and_Time_Operations",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "current_hour",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "current_hour",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "TimePeriodConversion",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "TimePeriodConversion",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_date_collection_uses_Pandas_time_series_data_manipulation",
        "source": "date_collection",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "date collection uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example definition for \"date collection\" uses Python's `datetime` object, which is a core component of Pandas for time series manipulation."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Local_Timezone_Hour",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Hour",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "grouped_count",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Date_and_Datetime_Manipulation",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Local_Timezone_Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "grouped_count",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Date_and_Datetime_Manipulation",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Local_Timezone_Hour",
        "target": "4",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Hour",
        "target": "4",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "grouped_count",
        "target": "4",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Date_and_Datetime_Manipulation",
        "target": "4",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "grouped_count",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "grouped_count",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_UTC_timestamp_localization_uses_Pandas_time_series_data_manipulation",
        "source": "UTC_timestamp_localization",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "UTC timestamp localization uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"UTC timestamp localization\" contains \"stamp_utc = stamp.tz_localize('utc')\", which is a common operation within Pandas for time series data manipulation."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Date_Range_Generation_2",
        "target": "1",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Pandas_Date_Range",
        "target": "1",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a specific frequency parameter used within the Pandas library for time series data manipulation."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_Time_Series_Resampling",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" (freq='w-wed') is a frequency string that is directly used in Pandas' time series resampling operations, as shown in examples like `frame.resample('w-thu')`."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Date_Range_Generation_2",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Date_Range",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_DatetimeIndexGenerationParameters_uses_DatetimeIndexGenerationParameters",
        "source": "DatetimeIndexGenerationParameters",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "uses",
        "definition": "DatetimeIndexGenerationParameters uses DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Generating Date Ranges"
            ],
            "line_start": 163,
            "line_end": 163,
            "text_excerpt": "generating a datetimeindex with an indicated length according to a particular"
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition of \"DatetimeIndexGenerationParameters\" indicates it's for \"generating a datetimeindex\", and \"Pandas_time_series_data_manipulation\" is a broad category that encompasses such generation."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_1",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "1",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"Time Series Data\" as it consists of data points indexed by time (a `DatetimeIndex`)."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_Pandas_time_series_data_manipulation",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The creation of a Pandas Series with a DatetimeIndex is a core operation within \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Daily_Resampling_of_Time_Series_Data_relatedTo_TimePeriodConversion",
        "source": "Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "target": "TimePeriodConversion",
        "relation": "relatedTo",
        "definition": "Daily Resampling of Time Series Data relatedTo TimePeriodConversion",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "ts.resample('d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Daily_Resampling_of_Time_Series_Data_relatedTo_TimePeriodConversion",
        "source": "Longer_Time_Series",
        "target": "TimePeriodConversion",
        "relation": "relatedTo",
        "definition": "Daily Resampling of Time Series Data relatedTo TimePeriodConversion",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "ts.resample('d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_isA_1",
        "source": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "target": "1",
        "relation": "isA",
        "definition": "Pandas Series with Random Normal Data and Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is a specific type of Time Series Data, characterized by its structure and data source."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_equivalentTo_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "equivalentTo",
        "definition": "Pandas Series with Random Normal Data and Datetime Index equivalentTo Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is essentially the same as this existing concept, differing only in the specific definition of the index generation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node describes the creation of a Pandas DataFrame, which is a core data structure used extensively in Pandas for time series data manipulation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_Time_Series_Resampling",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of the new node `frame = pd.dataframe(np.random.randn(24, 4),` is directly present within the definition of `Pandas_Time_Series_Resampling`, indicating a strong usage relationship."
      },
      {
        "id": "e_Non_Unique_Timestamp_Data_Aggregation_relatedTo_1",
        "source": "Non_Unique_Timestamp_Data_Aggregation",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Non-Unique Timestamp Data Aggregation relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_1",
        "source": "Irregular_Time_Marking",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" describes a characteristic of how time is represented or handled, which is relevant to \"Time Series Data\" as time is fundamental to its definition."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Irregular_Time_Marking",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" is a concept that would be encountered and potentially need to be handled during \"Pandas time series data manipulation.\""
      },
      {
        "id": "e_Timedelta_Calculation_relatedTo_Date_and_Time_Operations",
        "source": "Timedelta_Calculation",
        "target": "Date_and_Time_Operations",
        "relation": "relatedTo",
        "definition": "Timedelta Calculation relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "grouped_count",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_uses_Pandas_time_series_data_manipulation",
        "source": "DateRangeGeneration",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "DateRangeGeneration uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is defined using `pd.date_range`, which is a fundamental function within the pandas library for time series manipulation."
      },
      {
        "id": "e_DateRangeGeneration_relatedTo_Pandas_Date_Range",
        "source": "DateRangeGeneration",
        "target": "Pandas_Date_Range",
        "relation": "relatedTo",
        "definition": "DateRangeGeneration relatedTo Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is a specific instance or usage of the more general concept \"Pandas_Date_Range\", as both are related to creating date ranges using pandas."
      },
      {
        "id": "e_DateRangeGeneration_relatedTo_Date_Range_Generation_2",
        "source": "DateRangeGeneration",
        "target": "Date_Range_Generation_2",
        "relation": "relatedTo",
        "definition": "DateRangeGeneration relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is very similar to \"Date_Range_Generation_2\" in that both refer to the process of generating date ranges using pandas functions like `pd.date_range`."
      },
      {
        "id": "e_pandas_Series_with_random_data_and_date_index_synonymOf_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "pandas_Series_with_random_data_and_date_index",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "synonymOf",
        "definition": "pandas Series with random data and date index synonymOf Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new node is an exact synonym of this concept."
      },
      {
        "id": "e_pandas_Series_with_random_data_and_date_index_synonymOf_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "source": "pandas_Series_with_random_data_and_date_index",
        "target": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "relation": "synonymOf",
        "definition": "pandas Series with random data and date index synonymOf Pandas Series with Random Normal Data and Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new node is an exact synonym of this concept."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_uses_Pandas_time_series_data_manipulation",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Fixed-frequency date range generation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Fixed-frequency date range generation\" closely aligns with the functionalities described for Pandas time series data manipulation, specifically mentioning date range generation."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_parameterOf_DatetimeIndexGenerationParameters",
        "source": "Fixed_frequency_date_range_generation",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "parameterOf",
        "definition": "Fixed-frequency date range generation parameterOf DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" implies the use of parameters to define the frequency and extent of the generated dates."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_Date_Range_Generation_2",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Date_Range_Generation_2",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"Fixed-frequency date range generation\" is a specific type of date range generation."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_Pandas_Date_Range",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Pandas_Date_Range",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" is a specific way to generate date ranges, and `pd.date_range` is a primary tool for this in pandas."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_DateRangeGeneration",
        "source": "Fixed_frequency_date_range_generation",
        "target": "DateRangeGeneration",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA DateRangeGeneration",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" is a type of date range generation."
      },
      {
        "id": "e_annual_frame_resampling_uses_Pandas_Time_Series_Resampling",
        "source": "annual_frame_resampling",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "annual_frame_resampling uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 295,
            "line_end": 295,
            "text_excerpt": "annual_frame = frame.resample('a-dec').mean()"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"annual_frame_resampling\" directly shows the use of the `.resample('a-dec').mean()` method, which is a core operation of Pandas Time Series Resampling."
      },
      {
        "id": "e_Regular_interval_data_occurrence_isA_1",
        "source": "Regular_interval_data_occurrence",
        "target": "1",
        "relation": "isA",
        "definition": "Regular interval data occurrence isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Regular interval data occurrence\" is a specific type of \"Time Series Data\" where the data points appear at consistent time intervals."
      },
      {
        "id": "e_Regular_interval_data_occurrence_relatedTo_Fixed_frequency_date_range_generation",
        "source": "Regular_interval_data_occurrence",
        "target": "Fixed_frequency_date_range_generation",
        "relation": "relatedTo",
        "definition": "Regular interval data occurrence relatedTo Fixed-frequency date range generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Regular interval data occurrence\" is precisely what \"Fixed-frequency date range generation\" aims to produce."
      },
      {
        "id": "e_datetime_arithmetic_operations_partOf_3",
        "source": "datetime_arithmetic_operations",
        "target": "3",
        "relation": "partOf",
        "definition": "datetime arithmetic operations partOf Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" are operations that can be applied to \"Datetime\" objects."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Time_Operations",
        "source": "datetime_arithmetic_operations",
        "target": "Date_and_Time_Operations",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" is a more specific term or a component of general \"Date and Time Operations\"."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Datetime_Manipulation",
        "source": "datetime_arithmetic_operations",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" are a form of \"Date and Datetime Manipulation\"."
      },
      {
        "id": "e_Datetime_String_Parsing_relatedTo_strftime_operation",
        "source": "Datetime_String_Parsing",
        "target": "strftime_operation",
        "relation": "relatedTo",
        "definition": "Datetime String Parsing relatedTo strftime operation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Exercise:"
            ],
            "line_start": 79,
            "line_end": 79,
            "text_excerpt": "datetime.strptime(value, '%y-%m-%d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      }
    ]
  },
  "6": {
    "meta": {
      "source": "Data Science Programming",
      "extraction_time": "2023-10-01T00:00:00Z",
      "notes_hash": "9d29c95b28d0bb85de79ebd3cb7e51caa37b30856c24f49f797889a749393062",
      "allowed_relations": [
        "isA",
        "partOf",
        "prerequisiteOf",
        "dependsOn",
        "relatedTo",
        "synonymOf",
        "antonymOf",
        "contrastsWith",
        "defines",
        "uses",
        "usedBy",
        "appliesTo",
        "exampleOf",
        "counterexampleOf",
        "illustratedBy",
        "causes",
        "resultsIn",
        "prevents",
        "assumes",
        "implies",
        "equivalentTo",
        "parameterOf",
        "hasParameter",
        "propertyOf",
        "hasProperty",
        "measuredBy",
        "unitOf",
        "representedBy",
        "notationFor",
        "formulaFor",
        "provedBy",
        "theoremOf",
        "algorithmFor",
        "stepOf",
        "produces",
        "consumes",
        "advantageOf",
        "limitationOf",
        "commonErrorIn",
        "misconceptionOf",
        "commonlyConfusedWith",
        "assessedBy"
      ]
    },
    "nodes": [
      {
        "id": "1",
        "label": "Time Series Data",
        "type": "Concept",
        "definition": "Time series data is a sequence of data points indexed in time order.",
        "aliases": [
          "Time Series"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Time Series"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "Time series data is an important form of structured data in many different fields..."
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition is directly stated and is fundamental to the topic of time series analysis."
      },
      {
        "id": "3",
        "label": "Datetime",
        "type": "Concept",
        "definition": "The datetime class in Python provides methods for manipulating dates and times.",
        "aliases": [
          "datetime"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 1.0,
        "rationale": "The description is directly sourced from the lecture notes and defines a key tool in time series analysis."
      },
      {
        "id": "5",
        "label": "Timespan",
        "type": "Concept",
        "definition": "Periods in time series data represent timespans such as days, months, and years.",
        "aliases": [
          "Period"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Periods represent timespans, like days, months, quarters, or years."
          }
        ],
        "confidence": 1.0,
        "rationale": "The explanation of periods and their significance is crucial for understanding time series data."
      },
      {
        "id": "strftime_operation",
        "label": "strftime operation",
        "type": "Concept",
        "definition": "stamp.strftime('%y-%m-%d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Patient",
        "label": "Patient",
        "type": "Concept",
        "definition": "pts",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timestamp_creation",
        "label": "Timestamp creation",
        "type": "Concept",
        "definition": "stamp = pd.timestamp('2011-03-12 04:00')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_time_series_data_manipulation",
        "label": "Pandas time series data manipulation",
        "type": "Library",
        "definition": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nwith pip or conda), which exposes the olson database, a compilation of world\nimport pytz\npandas is generally oriented toward working with arrays of dates, whether used as an\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for\nfrom pandas.tseries.offsets import hour, minute\ndataframe have a shift method for doing naive shifts forward or backward, leaving\ncolumns=['colorado', 'texas', 'new york', 'ohio'])\ncolumns=['colorado', 'texas', 'new york', 'ohio'])",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Time_Series_Resampling",
        "label": "Pandas Time Series Resampling",
        "type": "Library",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "TimePeriodConversion",
        "label": "TimePeriodConversion",
        "type": "Concept",
        "definition": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "date_collection",
        "label": "date collection",
        "type": "Concept",
        "definition": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "UTC_timestamp_localization",
        "label": "UTC timestamp localization",
        "type": "Concept",
        "definition": "stamp_utc = stamp.tz_localize('utc')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Weekly_Wednesday_Frequency",
        "label": "Weekly Wednesday Frequency",
        "type": "Concept",
        "definition": "freq='w-wed'),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_and_Time_Operations",
        "label": "Date and Time Operations",
        "type": "Concept",
        "definition": "now = datetime.now()\nnow.year, now.month, now.day\ndatetime.now() - datetime(2024, 4, 20)\nnow = datetime.now()\nnow.year\nalign on the dates:",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.hour\nhour = hour()\nhour"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "current_hour",
        "label": "current hour",
        "type": "Concept",
        "definition": "now.hour\nhour = hour()\nhour",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.hour\nhour = hour()\nhour"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "DatetimeIndexGenerationParameters",
        "label": "DatetimeIndexGenerationParameters",
        "type": "Concept",
        "definition": "generating a datetimeindex with an indicated length according to a particular",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Generating Date Ranges"
            ],
            "line_start": 163,
            "line_end": 163,
            "text_excerpt": "generating a datetimeindex with an indicated length according to a particular"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "label": "Pandas Series of Random Normal Data with Datetime Index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(len(rng)), index=rng)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "label": "Pandas Series with Random Normal Data and Datetime Index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(6), index=dates)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_DataFrame_Creation",
        "label": "Pandas DataFrame Creation",
        "type": "Concept",
        "definition": "frame = pd.dataframe(np.random.randn(24, 4),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_Range_Generation_2",
        "label": "Date Range Generation",
        "type": "Concept",
        "definition": "pd.date_range('2000-01-01', '2000-12-01', freq='bm')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nrng = pd.date_range('2000-01-01', periods=12, freq='t')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Date_Range",
        "label": "Pandas Date Range",
        "type": "Concept",
        "definition": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Local_Timezone_Hour",
        "label": "Local Timezone Hour",
        "type": "Concept",
        "definition": "now = now.astimezone(local_tz)\nnow.hour\nnow.tzinfo\nanother:",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Hour",
        "label": "Hour",
        "type": "Concept",
        "definition": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Non_Unique_Timestamp_Data_Aggregation",
        "label": "Non-Unique Timestamp Data Aggregation",
        "type": "Concept",
        "definition": "suppose you wanted to aggregate the data having non-unique timestamps. one way",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Irregular_Time_Marking",
        "label": "Irregular Time Marking",
        "type": "Concept",
        "definition": "also be irregular without a fixed unit of time or offset between units. how you mark",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timedelta_Calculation",
        "label": "Timedelta Calculation",
        "type": "Concept",
        "definition": "datetime.now() - datetime(2024, 4, 20)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "DateRangeGeneration",
        "label": "DateRangeGeneration",
        "type": "Concept",
        "definition": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "pandas_Series_with_random_data_and_date_index",
        "label": "pandas Series with random data and date index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(6), index=dates)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_and_Datetime_Manipulation",
        "label": "Date and Datetime Manipulation",
        "type": "Concept",
        "definition": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "label": "Pandas Series Creation with Random Data and Time Index",
        "type": "Concept",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nlist(rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(3), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.arange(12), index=rng)",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "longer_ts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Longer_Time_Series",
        "label": "Longer Time Series",
        "type": "Concept",
        "definition": "longer_ts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "longer_ts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Fixed_frequency_date_range_generation",
        "label": "Fixed-frequency date range generation",
        "type": "Concept",
        "definition": "and generating fixed-frequency date ranges. for , you can convert",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "annual_frame_resampling",
        "label": "annual_frame_resampling",
        "type": "Concept",
        "definition": "annual_frame = frame.resample('a-dec').mean()",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 295,
            "line_end": 295,
            "text_excerpt": "annual_frame = frame.resample('a-dec').mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Regular_interval_data_occurrence",
        "label": "Regular interval data occurrence",
        "type": "Concept",
        "definition": "frequency, which is to say that data points occur at regular intervals according to some",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "datetime_arithmetic_operations",
        "label": "datetime arithmetic operations",
        "type": "Concept",
        "definition": "we can apply arithmatic operations on datetime objects:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Datetime_String_Parsing",
        "label": "Datetime String Parsing",
        "type": "Concept",
        "definition": "datetime.strptime(value, '%y-%m-%d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Exercise:"
            ],
            "line_start": 79,
            "line_end": 79,
            "text_excerpt": "datetime.strptime(value, '%y-%m-%d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "ts",
        "label": "ts",
        "type": "Concept",
        "definition": "ts\nts\nts\nts\nts\nts\nts\nts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts[stamp]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Stamp",
        "label": "Stamp",
        "type": "Concept",
        "definition": "ts[stamp]",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts[stamp]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Timestamp_object",
        "label": "Timestamp object",
        "type": "Concept",
        "definition": "similar to time series and date ranges, individual timestamp objects similarly can be",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_HourMinuteOffset",
        "label": "Pandas HourMinuteOffset",
        "type": "Concept",
        "definition": "from pandas.tseries.offsets import hour, minute",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Frequencies and Date Offsets"
            ],
            "line_start": 183,
            "line_end": 183,
            "text_excerpt": "from pandas.tseries.offsets import hour, minute"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "grouped_mean",
        "label": "grouped mean",
        "type": "Concept",
        "definition": "grouped.mean()",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Arithmetic_operations_on_time_series",
        "label": "Arithmetic operations on time series",
        "type": "Concept",
        "definition": "like other series, arithmetic operations between differently indexed time series automatically",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "LabelBasedData",
        "label": "LabelBasedData",
        "type": "Concept",
        "definition": "data based on label:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Indexing, Selection, Subsetting"
            ],
            "line_start": 110,
            "line_end": 110,
            "text_excerpt": "data based on label:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Oven_placement",
        "label": "Oven placement",
        "type": "Concept",
        "definition": "being placed in the oven)\nimports\np.asfreq('m', how='start')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "to do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\ngrouped.count()\nts.resample('5min', closed='right').sum()\nlabel='right', loffset='-1s').sum()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "resampling_and_grouping_time_series_data",
        "label": "resampling and grouping time series data",
        "type": "Concept",
        "definition": "to do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\ngrouped.count()\nts.resample('5min', closed='right').sum()\nlabel='right', loffset='-1s').sum()",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "to do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\ngrouped.count()\nts.resample('5min', closed='right').sum()\nlabel='right', loffset='-1s').sum()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Time_Zone_Handling",
        "label": "Time Zone Handling",
        "type": "Concept",
        "definition": "working with time zones is generally considered one of the most unpleasant parts of\nmean time and is the current international standard. time zones are expressed as\nin python, time zone information comes from the third-party pytz library (installable\ntime zone information. this is especially important for historical data because the\nlocalized from naive to time zone\u2013aware and converted from one time zone to",
        "aliases": [
          "Time Zone Management"
        ],
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "time series in coordinated universal time or utc, which is the successor to greenwich\noffsets from utc; for , new york is four hours behind utc during daylight\nif two time series with different time zones are combined, the result will be utc."
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "UTC_Time_Series_Combination",
        "label": "UTC Time Series Combination",
        "type": "Concept",
        "definition": "time series in coordinated universal time or utc, which is the successor to greenwich\noffsets from utc; for , new york is four hours behind utc during daylight\nif two time series with different time zones are combined, the result will be utc.",
        "aliases": [
          "Time Zone Management"
        ],
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "time series in coordinated universal time or utc, which is the successor to greenwich\noffsets from utc; for , new york is four hours behind utc during daylight\nif two time series with different time zones are combined, the result will be utc."
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      }
    ],
    "edges": [
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge2",
        "source": "Pandas_time_series_data_manipulation",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge2",
        "source": "Pandas_Time_Series_Resampling",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge3",
        "source": "1",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge3",
        "source": "1",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge4",
        "source": "1",
        "target": "5",
        "relation": "hasProperty",
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The Period class represents this data type, requiring a string or integer and a frequency."
          }
        ],
        "confidence": 0.9,
        "rationale": "Understanding periods is essential for effectively working with time series data.",
        "definition": "Time Series Data hasProperty Timespan"
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "strftime_operation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "strftime_operation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_usedBy_3",
        "source": "strftime_operation",
        "target": "3",
        "relation": "usedBy",
        "definition": "strftime operation usedBy Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The \"strftime operation\" is a method used with Python's datetime objects to format them into strings."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "ts",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "Stamp",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "ts",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "ts",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "Stamp",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "Stamp",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Patient_synonymOf_Textual_Statement",
        "source": "Patient",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "Patient synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"pts\" is explicitly given as an abbreviation for \"Patient\"."
      },
      {
        "id": "e_Patient_synonymOf_Textual_Statement",
        "source": "Patient",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "Patient synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"pts\" is explicitly given as an abbreviation for \"Patient\"."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Date_and_Time_Operations",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Date_and_Time_Operations",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "current_hour",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "current_hour",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "TimePeriodConversion",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "TimePeriodConversion",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_date_collection_uses_Pandas_time_series_data_manipulation",
        "source": "date_collection",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "date collection uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example definition for \"date collection\" uses Python's `datetime` object, which is a core component of Pandas for time series manipulation."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Local_Timezone_Hour",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Hour",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Oven_placement",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "resampling_and_grouping_time_series_data",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Date_and_Datetime_Manipulation",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Local_Timezone_Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Oven_placement",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "resampling_and_grouping_time_series_data",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Date_and_Datetime_Manipulation",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Local_Timezone_Hour",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Local_Timezone_Hour",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Hour",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Hour",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Oven_placement",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Oven_placement",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "resampling_and_grouping_time_series_data",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Date_and_Datetime_Manipulation",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Oven_placement",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Date_and_Time_Operations",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Oven_placement",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "resampling_and_grouping_time_series_data",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_UTC_timestamp_localization_uses_Pandas_time_series_data_manipulation",
        "source": "UTC_timestamp_localization",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "UTC timestamp localization uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"UTC timestamp localization\" contains \"stamp_utc = stamp.tz_localize('utc')\", which is a common operation within Pandas for time series data manipulation."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Date_Range_Generation_2",
        "target": "1",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Pandas_Date_Range",
        "target": "1",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a specific frequency parameter used within the Pandas library for time series data manipulation."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_Time_Series_Resampling",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" (freq='w-wed') is a frequency string that is directly used in Pandas' time series resampling operations, as shown in examples like `frame.resample('w-thu')`."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Date_Range_Generation_2",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Date_Range",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_DatetimeIndexGenerationParameters_uses_DatetimeIndexGenerationParameters",
        "source": "DatetimeIndexGenerationParameters",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "uses",
        "definition": "DatetimeIndexGenerationParameters uses DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Generating Date Ranges"
            ],
            "line_start": 163,
            "line_end": 163,
            "text_excerpt": "generating a datetimeindex with an indicated length according to a particular"
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition of \"DatetimeIndexGenerationParameters\" indicates it's for \"generating a datetimeindex\", and \"Pandas_time_series_data_manipulation\" is a broad category that encompasses such generation."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_1",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "1",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"Time Series Data\" as it consists of data points indexed by time (a `DatetimeIndex`)."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_Pandas_time_series_data_manipulation",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The creation of a Pandas Series with a DatetimeIndex is a core operation within \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_isA_1",
        "source": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "target": "1",
        "relation": "isA",
        "definition": "Pandas Series with Random Normal Data and Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is a specific type of Time Series Data, characterized by its structure and data source."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_equivalentTo_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "equivalentTo",
        "definition": "Pandas Series with Random Normal Data and Datetime Index equivalentTo Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is essentially the same as this existing concept, differing only in the specific definition of the index generation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node describes the creation of a Pandas DataFrame, which is a core data structure used extensively in Pandas for time series data manipulation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_Time_Series_Resampling",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of the new node `frame = pd.dataframe(np.random.randn(24, 4),` is directly present within the definition of `Pandas_Time_Series_Resampling`, indicating a strong usage relationship."
      },
      {
        "id": "e_Non_Unique_Timestamp_Data_Aggregation_relatedTo_1",
        "source": "Non_Unique_Timestamp_Data_Aggregation",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Non-Unique Timestamp Data Aggregation relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_1",
        "source": "Irregular_Time_Marking",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" describes a characteristic of how time is represented or handled, which is relevant to \"Time Series Data\" as time is fundamental to its definition."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Irregular_Time_Marking",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" is a concept that would be encountered and potentially need to be handled during \"Pandas time series data manipulation.\""
      },
      {
        "id": "e_Timedelta_Calculation_relatedTo_Date_and_Time_Operations",
        "source": "Timedelta_Calculation",
        "target": "Date_and_Time_Operations",
        "relation": "relatedTo",
        "definition": "Timedelta Calculation relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Oven_placement",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_uses_Pandas_time_series_data_manipulation",
        "source": "DateRangeGeneration",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "DateRangeGeneration uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is defined using `pd.date_range`, which is a fundamental function within the pandas library for time series manipulation."
      },
      {
        "id": "e_DateRangeGeneration_relatedTo_Pandas_Date_Range",
        "source": "DateRangeGeneration",
        "target": "Pandas_Date_Range",
        "relation": "relatedTo",
        "definition": "DateRangeGeneration relatedTo Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is a specific instance or usage of the more general concept \"Pandas_Date_Range\", as both are related to creating date ranges using pandas."
      },
      {
        "id": "e_DateRangeGeneration_relatedTo_Date_Range_Generation_2",
        "source": "DateRangeGeneration",
        "target": "Date_Range_Generation_2",
        "relation": "relatedTo",
        "definition": "DateRangeGeneration relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is very similar to \"Date_Range_Generation_2\" in that both refer to the process of generating date ranges using pandas functions like `pd.date_range`."
      },
      {
        "id": "e_pandas_Series_with_random_data_and_date_index_synonymOf_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "pandas_Series_with_random_data_and_date_index",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "synonymOf",
        "definition": "pandas Series with random data and date index synonymOf Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new node is an exact synonym of this concept."
      },
      {
        "id": "e_pandas_Series_with_random_data_and_date_index_synonymOf_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "source": "pandas_Series_with_random_data_and_date_index",
        "target": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "relation": "synonymOf",
        "definition": "pandas Series with random data and date index synonymOf Pandas Series with Random Normal Data and Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new node is an exact synonym of this concept."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_uses_Pandas_time_series_data_manipulation",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Fixed-frequency date range generation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Fixed-frequency date range generation\" closely aligns with the functionalities described for Pandas time series data manipulation, specifically mentioning date range generation."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_parameterOf_DatetimeIndexGenerationParameters",
        "source": "Fixed_frequency_date_range_generation",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "parameterOf",
        "definition": "Fixed-frequency date range generation parameterOf DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" implies the use of parameters to define the frequency and extent of the generated dates."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_Date_Range_Generation_2",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Date_Range_Generation_2",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"Fixed-frequency date range generation\" is a specific type of date range generation."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_Pandas_Date_Range",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Pandas_Date_Range",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" is a specific way to generate date ranges, and `pd.date_range` is a primary tool for this in pandas."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_DateRangeGeneration",
        "source": "Fixed_frequency_date_range_generation",
        "target": "DateRangeGeneration",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA DateRangeGeneration",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" is a type of date range generation."
      },
      {
        "id": "e_annual_frame_resampling_uses_Pandas_Time_Series_Resampling",
        "source": "annual_frame_resampling",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "annual_frame_resampling uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 295,
            "line_end": 295,
            "text_excerpt": "annual_frame = frame.resample('a-dec').mean()"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"annual_frame_resampling\" directly shows the use of the `.resample('a-dec').mean()` method, which is a core operation of Pandas Time Series Resampling."
      },
      {
        "id": "e_Regular_interval_data_occurrence_isA_1",
        "source": "Regular_interval_data_occurrence",
        "target": "1",
        "relation": "isA",
        "definition": "Regular interval data occurrence isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Regular interval data occurrence\" is a specific type of \"Time Series Data\" where the data points appear at consistent time intervals."
      },
      {
        "id": "e_Regular_interval_data_occurrence_relatedTo_Fixed_frequency_date_range_generation",
        "source": "Regular_interval_data_occurrence",
        "target": "Fixed_frequency_date_range_generation",
        "relation": "relatedTo",
        "definition": "Regular interval data occurrence relatedTo Fixed-frequency date range generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Regular interval data occurrence\" is precisely what \"Fixed-frequency date range generation\" aims to produce."
      },
      {
        "id": "e_datetime_arithmetic_operations_partOf_3",
        "source": "datetime_arithmetic_operations",
        "target": "3",
        "relation": "partOf",
        "definition": "datetime arithmetic operations partOf Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" are operations that can be applied to \"Datetime\" objects."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Time_Operations",
        "source": "datetime_arithmetic_operations",
        "target": "Date_and_Time_Operations",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" is a more specific term or a component of general \"Date and Time Operations\"."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Datetime_Manipulation",
        "source": "datetime_arithmetic_operations",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" are a form of \"Date and Datetime Manipulation\"."
      },
      {
        "id": "e_Timestamp_object_isA_1",
        "source": "Timestamp_object",
        "target": "1",
        "relation": "isA",
        "definition": "Timestamp object isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Time Series Data\"."
      },
      {
        "id": "e_Timestamp_object_isA_3",
        "source": "Timestamp_object",
        "target": "3",
        "relation": "isA",
        "definition": "Timestamp object isA Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Datetime\" object."
      },
      {
        "id": "e_Timestamp_object_isA_5",
        "source": "Timestamp_object",
        "target": "5",
        "relation": "isA",
        "definition": "Timestamp object isA Timespan",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Timespan\" in the context of time series."
      },
      {
        "id": "e_Timestamp_object_usedBy_Timestamp_creation",
        "source": "Timestamp_object",
        "target": "Timestamp_creation",
        "relation": "usedBy",
        "definition": "Timestamp object usedBy Timestamp creation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is the result of a \"Timestamp creation\" process."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Time_Operations",
        "source": "Timestamp_object",
        "target": "Date_and_Time_Operations",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is central to performing \"Date and Time Operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Non_Unique_Timestamp_Data_Aggregation",
        "source": "Timestamp_object",
        "target": "Non_Unique_Timestamp_Data_Aggregation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Non-Unique Timestamp Data Aggregation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is the core concept that can be non-unique and aggregated."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Datetime_Manipulation",
        "source": "Timestamp_object",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is a fundamental type for \"Date and Datetime Manipulation\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_datetime_arithmetic_operations",
        "source": "Timestamp_object",
        "target": "datetime_arithmetic_operations",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo datetime arithmetic operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\"s are the operands for \"datetime arithmetic operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_ts",
        "source": "Timestamp_object",
        "target": "ts",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo ts",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"ts\" is a common abbreviation for a time series, which is composed of \"Timestamp object\"s."
      },
      {
        "id": "e_Timestamp_object_isA_Stamp",
        "source": "Timestamp_object",
        "target": "Stamp",
        "relation": "isA",
        "definition": "Timestamp object isA Stamp",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Stamp\" is a synonym for \"Timestamp object\"."
      },
      {
        "id": "e_Pandas_HourMinuteOffset_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_HourMinuteOffset",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas HourMinuteOffset uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Frequencies and Date Offsets"
            ],
            "line_start": 183,
            "line_end": 183,
            "text_excerpt": "from pandas.tseries.offsets import hour, minute"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node \"Pandas HourMinuteOffset\" is imported from \"pandas.tseries.offsets\", which is a sub-module of pandas for time series manipulation."
      },
      {
        "id": "e_grouped_mean_relatedTo_grouped_count",
        "source": "grouped_mean",
        "target": "Oven_placement",
        "relation": "relatedTo",
        "definition": "grouped mean relatedTo grouped count",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_grouped_mean_relatedTo_grouped_count",
        "source": "grouped_mean",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "relatedTo",
        "definition": "grouped mean relatedTo grouped count",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_1",
        "source": "Arithmetic_operations_on_time_series",
        "target": "1",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"Arithmetic operations on time series\" directly describes operations on time series, which are fundamentally \"Time Series Data\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Pandas_time_series_data_manipulation",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of data manipulation on time series, which is a core functionality covered by \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Date_and_Time_Operations",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Date_and_Time_Operations",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Arithmetic operations on time series\" is a specific application of general \"Date and Time Operations\" to time series data."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Timedelta_Calculation",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Timedelta_Calculation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Timedelta Calculation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "Arithmetic operations on time series often result in or involve \"Timedelta Calculation\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Date_and_Datetime_Manipulation",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Arithmetic operations on time series\" is a specialized form of \"Date and Datetime Manipulation\" applied to time series data."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_datetime_arithmetic_operations",
        "source": "Arithmetic_operations_on_time_series",
        "target": "datetime_arithmetic_operations",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses datetime arithmetic operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"datetime arithmetic operations\" applied to time series."
      }
    ]
  },
  "7": {
    "meta": {
      "source": "Data Science Programming",
      "extraction_time": "2023-10-01T00:00:00Z",
      "notes_hash": "9d29c95b28d0bb85de79ebd3cb7e51caa37b30856c24f49f797889a749393062",
      "allowed_relations": [
        "isA",
        "partOf",
        "prerequisiteOf",
        "dependsOn",
        "relatedTo",
        "synonymOf",
        "antonymOf",
        "contrastsWith",
        "defines",
        "uses",
        "usedBy",
        "appliesTo",
        "exampleOf",
        "counterexampleOf",
        "illustratedBy",
        "causes",
        "resultsIn",
        "prevents",
        "assumes",
        "implies",
        "equivalentTo",
        "parameterOf",
        "hasParameter",
        "propertyOf",
        "hasProperty",
        "measuredBy",
        "unitOf",
        "representedBy",
        "notationFor",
        "formulaFor",
        "provedBy",
        "theoremOf",
        "algorithmFor",
        "stepOf",
        "produces",
        "consumes",
        "advantageOf",
        "limitationOf",
        "commonErrorIn",
        "misconceptionOf",
        "commonlyConfusedWith",
        "assessedBy"
      ]
    },
    "nodes": [
      {
        "id": "1",
        "label": "Time Series Data",
        "type": "Concept",
        "definition": "Time series data is a sequence of data points indexed in time order.",
        "aliases": [
          "Time Series"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Time Series"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "Time series data is an important form of structured data in many different fields..."
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition is directly stated and is fundamental to the topic of time series analysis."
      },
      {
        "id": "3",
        "label": "Datetime",
        "type": "Concept",
        "definition": "The datetime class in Python provides methods for manipulating dates and times.",
        "aliases": [
          "datetime"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 1.0,
        "rationale": "The description is directly sourced from the lecture notes and defines a key tool in time series analysis."
      },
      {
        "id": "5",
        "label": "Timespan",
        "type": "Concept",
        "definition": "Periods in time series data represent timespans such as days, months, and years.",
        "aliases": [
          "Period"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Periods represent timespans, like days, months, quarters, or years."
          }
        ],
        "confidence": 1.0,
        "rationale": "The explanation of periods and their significance is crucial for understanding time series data."
      },
      {
        "id": "strftime_operation",
        "label": "strftime operation",
        "type": "Concept",
        "definition": "stamp.strftime('%y-%m-%d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Patient",
        "label": "Patient",
        "type": "Concept",
        "definition": "pts",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timestamp_creation",
        "label": "Timestamp creation",
        "type": "Concept",
        "definition": "stamp = pd.timestamp('2011-03-12 04:00')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_time_series_data_manipulation",
        "label": "Pandas time series data manipulation",
        "type": "Library",
        "definition": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nwith pip or conda), which exposes the olson database, a compilation of world\nimport pytz\npandas is generally oriented toward working with arrays of dates, whether used as an\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for\nfrom pandas.tseries.offsets import hour, minute\ndataframe have a shift method for doing naive shifts forward or backward, leaving\ncolumns=['colorado', 'texas', 'new york', 'ohio'])\ncolumns=['colorado', 'texas', 'new york', 'ohio'])",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Time_Series_Resampling",
        "label": "Pandas Time Series Resampling",
        "type": "Library",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "TimePeriodConversion",
        "label": "TimePeriodConversion",
        "type": "Concept",
        "definition": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "date_collection",
        "label": "date collection",
        "type": "Concept",
        "definition": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "UTC_timestamp_localization",
        "label": "UTC timestamp localization",
        "type": "Concept",
        "definition": "stamp_utc = stamp.tz_localize('utc')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Weekly_Wednesday_Frequency",
        "label": "Weekly Wednesday Frequency",
        "type": "Concept",
        "definition": "freq='w-wed'),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "current_hour",
        "label": "current hour",
        "type": "Concept",
        "definition": "now.hour\nhour = hour()\nhour",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.hour\nhour = hour()\nhour"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "DatetimeIndexGenerationParameters",
        "label": "DatetimeIndexGenerationParameters",
        "type": "Concept",
        "definition": "generating a datetimeindex with an indicated length according to a particular",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Generating Date Ranges"
            ],
            "line_start": 163,
            "line_end": 163,
            "text_excerpt": "generating a datetimeindex with an indicated length according to a particular"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "label": "Pandas Series of Random Normal Data with Datetime Index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(len(rng)), index=rng)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "label": "Pandas Series with Random Normal Data and Datetime Index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(6), index=dates)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_DataFrame_Creation",
        "label": "Pandas DataFrame Creation",
        "type": "Concept",
        "definition": "frame = pd.dataframe(np.random.randn(24, 4),",
        "aliases": [
          "Pandas DataFrame Creation"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_Range_Generation_2",
        "label": "Date Range Generation",
        "type": "Concept",
        "definition": "pd.date_range('2000-01-01', '2000-12-01', freq='bm')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nrng = pd.date_range('2000-01-01', periods=12, freq='t')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Date_Range",
        "label": "Pandas Date Range",
        "type": "Concept",
        "definition": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Local_Timezone_Hour",
        "label": "Local Timezone Hour",
        "type": "Concept",
        "definition": "now = now.astimezone(local_tz)\nnow.hour\nnow.tzinfo\nanother:",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Hour",
        "label": "Hour",
        "type": "Concept",
        "definition": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Non_Unique_Timestamp_Data_Aggregation",
        "label": "Non-Unique Timestamp Data Aggregation",
        "type": "Concept",
        "definition": "suppose you wanted to aggregate the data having non-unique timestamps. one way",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Irregular_Time_Marking",
        "label": "Irregular Time Marking",
        "type": "Concept",
        "definition": "also be irregular without a fixed unit of time or offset between units. how you mark",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timedelta_Calculation",
        "label": "Timedelta Calculation",
        "type": "Concept",
        "definition": "datetime.now() - datetime(2024, 4, 20)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "DateRangeGeneration",
        "label": "DateRangeGeneration",
        "type": "Concept",
        "definition": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "pandas_Series_with_random_data_and_date_index",
        "label": "pandas Series with random data and date index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(6), index=dates)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_and_Datetime_Manipulation",
        "label": "Date and Datetime Manipulation",
        "type": "Concept",
        "definition": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "label": "Pandas Series Creation with Random Data and Time Index",
        "type": "Concept",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nlist(rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(3), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.arange(12), index=rng)",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "longer_ts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Longer_Time_Series",
        "label": "Longer Time Series",
        "type": "Concept",
        "definition": "longer_ts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "longer_ts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Fixed_frequency_date_range_generation",
        "label": "Fixed-frequency date range generation",
        "type": "Concept",
        "definition": "and generating fixed-frequency date ranges. for , you can convert",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "annual_frame_resampling",
        "label": "annual_frame_resampling",
        "type": "Concept",
        "definition": "annual_frame = frame.resample('a-dec').mean()",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 295,
            "line_end": 295,
            "text_excerpt": "annual_frame = frame.resample('a-dec').mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Regular_interval_data_occurrence",
        "label": "Regular interval data occurrence",
        "type": "Concept",
        "definition": "frequency, which is to say that data points occur at regular intervals according to some",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "datetime_arithmetic_operations",
        "label": "datetime arithmetic operations",
        "type": "Concept",
        "definition": "we can apply arithmatic operations on datetime objects:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Datetime_String_Parsing",
        "label": "Datetime String Parsing",
        "type": "Concept",
        "definition": "datetime.strptime(value, '%y-%m-%d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Exercise:"
            ],
            "line_start": 79,
            "line_end": 79,
            "text_excerpt": "datetime.strptime(value, '%y-%m-%d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "ts",
        "label": "ts",
        "type": "Concept",
        "definition": "ts\nts\nts\nts\nts\nts\nts\nts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts[stamp]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Stamp",
        "label": "Stamp",
        "type": "Concept",
        "definition": "ts[stamp]",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts[stamp]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Timestamp_object",
        "label": "Timestamp object",
        "type": "Concept",
        "definition": "similar to time series and date ranges, individual timestamp objects similarly can be",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_HourMinuteOffset",
        "label": "Pandas HourMinuteOffset",
        "type": "Concept",
        "definition": "from pandas.tseries.offsets import hour, minute",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Frequencies and Date Offsets"
            ],
            "line_start": 183,
            "line_end": 183,
            "text_excerpt": "from pandas.tseries.offsets import hour, minute"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "grouped_mean",
        "label": "grouped mean",
        "type": "Concept",
        "definition": "grouped.mean()",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Arithmetic_operations_on_time_series",
        "label": "Arithmetic operations on time series",
        "type": "Concept",
        "definition": "like other series, arithmetic operations between differently indexed time series automatically",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "LabelBasedData",
        "label": "LabelBasedData",
        "type": "Concept",
        "definition": "data based on label:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Indexing, Selection, Subsetting"
            ],
            "line_start": 110,
            "line_end": 110,
            "text_excerpt": "data based on label:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "resampling_and_grouping_time_series_data",
        "label": "resampling and grouping time series data",
        "type": "Concept",
        "definition": "to do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\ngrouped.count()\nts.resample('5min', closed='right').sum()\nlabel='right', loffset='-1s').sum()",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "to do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\ngrouped.count()\nts.resample('5min', closed='right').sum()\nlabel='right', loffset='-1s').sum()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Time_Zone_Handling",
        "label": "Time Zone Handling",
        "type": "Concept",
        "definition": "working with time zones is generally considered one of the most unpleasant parts of\nmean time and is the current international standard. time zones are expressed as\nin python, time zone information comes from the third-party pytz library (installable\ntime zone information. this is especially important for historical data because the\nlocalized from naive to time zone\u2013aware and converted from one time zone to",
        "aliases": [
          "Time Zone Management"
        ],
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "time series in coordinated universal time or utc, which is the successor to greenwich\noffsets from utc; for , new york is four hours behind utc during daylight\nif two time series with different time zones are combined, the result will be utc."
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "UTC_Time_Series_Combination",
        "label": "UTC Time Series Combination",
        "type": "Concept",
        "definition": "time series in coordinated universal time or utc, which is the successor to greenwich\noffsets from utc; for , new york is four hours behind utc during daylight\nif two time series with different time zones are combined, the result will be utc.",
        "aliases": [
          "Time Zone Management"
        ],
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "time series in coordinated universal time or utc, which is the successor to greenwich\noffsets from utc; for , new york is four hours behind utc during daylight\nif two time series with different time zones are combined, the result will be utc."
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Quarterly_Resampling_with_Forward_Fill",
        "label": "Quarterly Resampling with Forward Fill",
        "type": "Concept",
        "definition": "annual_frame.resample('q-mar').ffill()",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 304,
            "line_end": 304,
            "text_excerpt": "annual_frame.resample('q-mar').ffill()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Time_Series_Interval",
        "label": "Time Series Interval",
        "type": "Concept",
        "definition": "rule, such as every 15 seconds, every 5 minutes, or once per month. time series can",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 7,
            "line_end": 7,
            "text_excerpt": "rule, such as every 15 seconds, every 5 minutes, or once per month. time series can"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "DeltaSeconds",
        "label": "DeltaSeconds",
        "type": "Concept",
        "definition": "delta.seconds",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 38,
            "line_end": 38,
            "text_excerpt": "delta.seconds"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "CommonTimeZoneList",
        "label": "CommonTimeZoneList",
        "type": "Concept",
        "definition": "for tz in pytz.common_timezones:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Oven_Placement",
        "label": "Oven Placement",
        "type": "Concept",
        "definition": "following:\nbeing placed in the oven)\nimports\np\np\np",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "p.asfreq('m', how='start')\np.asfreq('m', how='end')"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Frequency_Conversion_of_Time_Series_Data",
        "label": "Frequency Conversion of Time Series Data",
        "type": "Concept",
        "definition": "p.asfreq('m', how='start')\np.asfreq('m', how='end')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "p.asfreq('m', how='start')\np.asfreq('m', how='end')"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Date_Alignment_and_Period_Calculation",
        "label": "Date Alignment and Period Calculation",
        "type": "Concept",
        "definition": "value = '2021-01-03'\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\nalign on the dates:\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\np = pd.period(2007, freq='a-dec')\nlabel='right', loffset='-1s').sum()\nannual_frame\nq-dec: quarterly, year ending in december",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.year, now.month, now.day\nsaving time and five hours behind the rest of the year.\nnow.year"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Current_Date_and_Time_Offset",
        "label": "Current Date and Time Offset",
        "type": "Concept",
        "definition": "now.year, now.month, now.day\nsaving time and five hours behind the rest of the year.\nnow.year",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.year, now.month, now.day\nsaving time and five hours behind the rest of the year.\nnow.year"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      }
    ],
    "edges": [
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge2",
        "source": "Pandas_time_series_data_manipulation",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge2",
        "source": "Pandas_Time_Series_Resampling",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge3",
        "source": "1",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge3",
        "source": "1",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge4",
        "source": "1",
        "target": "5",
        "relation": "hasProperty",
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The Period class represents this data type, requiring a string or integer and a frequency."
          }
        ],
        "confidence": 0.9,
        "rationale": "Understanding periods is essential for effectively working with time series data.",
        "definition": "Time Series Data hasProperty Timespan"
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "strftime_operation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "strftime_operation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_usedBy_3",
        "source": "strftime_operation",
        "target": "3",
        "relation": "usedBy",
        "definition": "strftime operation usedBy Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The \"strftime operation\" is a method used with Python's datetime objects to format them into strings."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "ts",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "Stamp",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "ts",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "ts",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "Stamp",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "Stamp",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Patient_synonymOf_Textual_Statement",
        "source": "Patient",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "Patient synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"pts\" is explicitly given as an abbreviation for \"Patient\"."
      },
      {
        "id": "e_Patient_synonymOf_Textual_Statement",
        "source": "Patient",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "Patient synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"pts\" is explicitly given as an abbreviation for \"Patient\"."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Date_Alignment_and_Period_Calculation",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Current_Date_and_Time_Offset",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Date_Alignment_and_Period_Calculation",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Current_Date_and_Time_Offset",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "current_hour",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "current_hour",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "TimePeriodConversion",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "TimePeriodConversion",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_date_collection_uses_Pandas_time_series_data_manipulation",
        "source": "date_collection",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "date collection uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example definition for \"date collection\" uses Python's `datetime` object, which is a core component of Pandas for time series manipulation."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Local_Timezone_Hour",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Hour",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Oven_Placement",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "resampling_and_grouping_time_series_data",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Date_and_Datetime_Manipulation",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Local_Timezone_Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Oven_Placement",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "resampling_and_grouping_time_series_data",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Date_and_Datetime_Manipulation",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Local_Timezone_Hour",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Local_Timezone_Hour",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Hour",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Hour",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Oven_Placement",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Oven_Placement",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "resampling_and_grouping_time_series_data",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Date_and_Datetime_Manipulation",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Oven_Placement",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Oven_Placement",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Oven_Placement",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "resampling_and_grouping_time_series_data",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_UTC_timestamp_localization_uses_Pandas_time_series_data_manipulation",
        "source": "UTC_timestamp_localization",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "UTC timestamp localization uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"UTC timestamp localization\" contains \"stamp_utc = stamp.tz_localize('utc')\", which is a common operation within Pandas for time series data manipulation."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Date_Range_Generation_2",
        "target": "1",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Pandas_Date_Range",
        "target": "1",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a specific frequency parameter used within the Pandas library for time series data manipulation."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_Time_Series_Resampling",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" (freq='w-wed') is a frequency string that is directly used in Pandas' time series resampling operations, as shown in examples like `frame.resample('w-thu')`."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Date_Range_Generation_2",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Date_Range",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_DatetimeIndexGenerationParameters_uses_DatetimeIndexGenerationParameters",
        "source": "DatetimeIndexGenerationParameters",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "uses",
        "definition": "DatetimeIndexGenerationParameters uses DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Generating Date Ranges"
            ],
            "line_start": 163,
            "line_end": 163,
            "text_excerpt": "generating a datetimeindex with an indicated length according to a particular"
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition of \"DatetimeIndexGenerationParameters\" indicates it's for \"generating a datetimeindex\", and \"Pandas_time_series_data_manipulation\" is a broad category that encompasses such generation."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_1",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "1",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"Time Series Data\" as it consists of data points indexed by time (a `DatetimeIndex`)."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_Pandas_time_series_data_manipulation",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The creation of a Pandas Series with a DatetimeIndex is a core operation within \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_isA_1",
        "source": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "target": "1",
        "relation": "isA",
        "definition": "Pandas Series with Random Normal Data and Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is a specific type of Time Series Data, characterized by its structure and data source."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_equivalentTo_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "equivalentTo",
        "definition": "Pandas Series with Random Normal Data and Datetime Index equivalentTo Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is essentially the same as this existing concept, differing only in the specific definition of the index generation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node describes the creation of a Pandas DataFrame, which is a core data structure used extensively in Pandas for time series data manipulation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_Time_Series_Resampling",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of the new node `frame = pd.dataframe(np.random.randn(24, 4),` is directly present within the definition of `Pandas_Time_Series_Resampling`, indicating a strong usage relationship."
      },
      {
        "id": "e_Non_Unique_Timestamp_Data_Aggregation_relatedTo_1",
        "source": "Non_Unique_Timestamp_Data_Aggregation",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Non-Unique Timestamp Data Aggregation relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_1",
        "source": "Irregular_Time_Marking",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" describes a characteristic of how time is represented or handled, which is relevant to \"Time Series Data\" as time is fundamental to its definition."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Irregular_Time_Marking",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" is a concept that would be encountered and potentially need to be handled during \"Pandas time series data manipulation.\""
      },
      {
        "id": "e_Timedelta_Calculation_relatedTo_Date_and_Time_Operations",
        "source": "Timedelta_Calculation",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "relatedTo",
        "definition": "Timedelta Calculation relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Timedelta_Calculation_relatedTo_Date_and_Time_Operations",
        "source": "Timedelta_Calculation",
        "target": "Current_Date_and_Time_Offset",
        "relation": "relatedTo",
        "definition": "Timedelta Calculation relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Oven_Placement",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Frequency_Conversion_of_Time_Series_Data",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_uses_Pandas_time_series_data_manipulation",
        "source": "DateRangeGeneration",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "DateRangeGeneration uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is defined using `pd.date_range`, which is a fundamental function within the pandas library for time series manipulation."
      },
      {
        "id": "e_DateRangeGeneration_relatedTo_Pandas_Date_Range",
        "source": "DateRangeGeneration",
        "target": "Pandas_Date_Range",
        "relation": "relatedTo",
        "definition": "DateRangeGeneration relatedTo Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is a specific instance or usage of the more general concept \"Pandas_Date_Range\", as both are related to creating date ranges using pandas."
      },
      {
        "id": "e_DateRangeGeneration_relatedTo_Date_Range_Generation_2",
        "source": "DateRangeGeneration",
        "target": "Date_Range_Generation_2",
        "relation": "relatedTo",
        "definition": "DateRangeGeneration relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is very similar to \"Date_Range_Generation_2\" in that both refer to the process of generating date ranges using pandas functions like `pd.date_range`."
      },
      {
        "id": "e_pandas_Series_with_random_data_and_date_index_synonymOf_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "pandas_Series_with_random_data_and_date_index",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "synonymOf",
        "definition": "pandas Series with random data and date index synonymOf Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new node is an exact synonym of this concept."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_uses_Pandas_time_series_data_manipulation",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Fixed-frequency date range generation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Fixed-frequency date range generation\" closely aligns with the functionalities described for Pandas time series data manipulation, specifically mentioning date range generation."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_parameterOf_DatetimeIndexGenerationParameters",
        "source": "Fixed_frequency_date_range_generation",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "parameterOf",
        "definition": "Fixed-frequency date range generation parameterOf DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" implies the use of parameters to define the frequency and extent of the generated dates."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_Date_Range_Generation_2",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Date_Range_Generation_2",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"Fixed-frequency date range generation\" is a specific type of date range generation."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_Pandas_Date_Range",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Pandas_Date_Range",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" is a specific way to generate date ranges, and `pd.date_range` is a primary tool for this in pandas."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_DateRangeGeneration",
        "source": "Fixed_frequency_date_range_generation",
        "target": "DateRangeGeneration",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA DateRangeGeneration",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" is a type of date range generation."
      },
      {
        "id": "e_annual_frame_resampling_uses_Pandas_Time_Series_Resampling",
        "source": "annual_frame_resampling",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "annual_frame_resampling uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 295,
            "line_end": 295,
            "text_excerpt": "annual_frame = frame.resample('a-dec').mean()"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"annual_frame_resampling\" directly shows the use of the `.resample('a-dec').mean()` method, which is a core operation of Pandas Time Series Resampling."
      },
      {
        "id": "e_Regular_interval_data_occurrence_isA_1",
        "source": "Regular_interval_data_occurrence",
        "target": "1",
        "relation": "isA",
        "definition": "Regular interval data occurrence isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Regular interval data occurrence\" is a specific type of \"Time Series Data\" where the data points appear at consistent time intervals."
      },
      {
        "id": "e_Regular_interval_data_occurrence_relatedTo_Fixed_frequency_date_range_generation",
        "source": "Regular_interval_data_occurrence",
        "target": "Fixed_frequency_date_range_generation",
        "relation": "relatedTo",
        "definition": "Regular interval data occurrence relatedTo Fixed-frequency date range generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Regular interval data occurrence\" is precisely what \"Fixed-frequency date range generation\" aims to produce."
      },
      {
        "id": "e_datetime_arithmetic_operations_partOf_3",
        "source": "datetime_arithmetic_operations",
        "target": "3",
        "relation": "partOf",
        "definition": "datetime arithmetic operations partOf Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" are operations that can be applied to \"Datetime\" objects."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Time_Operations",
        "source": "datetime_arithmetic_operations",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" is a more specific term or a component of general \"Date and Time Operations\"."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Time_Operations",
        "source": "datetime_arithmetic_operations",
        "target": "Current_Date_and_Time_Offset",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" is a more specific term or a component of general \"Date and Time Operations\"."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Datetime_Manipulation",
        "source": "datetime_arithmetic_operations",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" are a form of \"Date and Datetime Manipulation\"."
      },
      {
        "id": "e_Timestamp_object_isA_1",
        "source": "Timestamp_object",
        "target": "1",
        "relation": "isA",
        "definition": "Timestamp object isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Time Series Data\"."
      },
      {
        "id": "e_Timestamp_object_isA_3",
        "source": "Timestamp_object",
        "target": "3",
        "relation": "isA",
        "definition": "Timestamp object isA Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Datetime\" object."
      },
      {
        "id": "e_Timestamp_object_isA_5",
        "source": "Timestamp_object",
        "target": "5",
        "relation": "isA",
        "definition": "Timestamp object isA Timespan",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Timespan\" in the context of time series."
      },
      {
        "id": "e_Timestamp_object_usedBy_Timestamp_creation",
        "source": "Timestamp_object",
        "target": "Timestamp_creation",
        "relation": "usedBy",
        "definition": "Timestamp object usedBy Timestamp creation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is the result of a \"Timestamp creation\" process."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Time_Operations",
        "source": "Timestamp_object",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is central to performing \"Date and Time Operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Time_Operations",
        "source": "Timestamp_object",
        "target": "Current_Date_and_Time_Offset",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is central to performing \"Date and Time Operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Non_Unique_Timestamp_Data_Aggregation",
        "source": "Timestamp_object",
        "target": "Non_Unique_Timestamp_Data_Aggregation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Non-Unique Timestamp Data Aggregation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is the core concept that can be non-unique and aggregated."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Datetime_Manipulation",
        "source": "Timestamp_object",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is a fundamental type for \"Date and Datetime Manipulation\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_datetime_arithmetic_operations",
        "source": "Timestamp_object",
        "target": "datetime_arithmetic_operations",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo datetime arithmetic operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\"s are the operands for \"datetime arithmetic operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_ts",
        "source": "Timestamp_object",
        "target": "ts",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo ts",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"ts\" is a common abbreviation for a time series, which is composed of \"Timestamp object\"s."
      },
      {
        "id": "e_Timestamp_object_isA_Stamp",
        "source": "Timestamp_object",
        "target": "Stamp",
        "relation": "isA",
        "definition": "Timestamp object isA Stamp",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Stamp\" is a synonym for \"Timestamp object\"."
      },
      {
        "id": "e_Pandas_HourMinuteOffset_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_HourMinuteOffset",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas HourMinuteOffset uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Frequencies and Date Offsets"
            ],
            "line_start": 183,
            "line_end": 183,
            "text_excerpt": "from pandas.tseries.offsets import hour, minute"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node \"Pandas HourMinuteOffset\" is imported from \"pandas.tseries.offsets\", which is a sub-module of pandas for time series manipulation."
      },
      {
        "id": "e_grouped_mean_relatedTo_grouped_count",
        "source": "grouped_mean",
        "target": "Oven_Placement",
        "relation": "relatedTo",
        "definition": "grouped mean relatedTo grouped count",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_grouped_mean_relatedTo_grouped_count",
        "source": "grouped_mean",
        "target": "Frequency_Conversion_of_Time_Series_Data",
        "relation": "relatedTo",
        "definition": "grouped mean relatedTo grouped count",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_grouped_mean_relatedTo_grouped_count",
        "source": "grouped_mean",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "relatedTo",
        "definition": "grouped mean relatedTo grouped count",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_1",
        "source": "Arithmetic_operations_on_time_series",
        "target": "1",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"Arithmetic operations on time series\" directly describes operations on time series, which are fundamentally \"Time Series Data\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Pandas_time_series_data_manipulation",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of data manipulation on time series, which is a core functionality covered by \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Date_and_Time_Operations",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Arithmetic operations on time series\" is a specific application of general \"Date and Time Operations\" to time series data."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Date_and_Time_Operations",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Current_Date_and_Time_Offset",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Arithmetic operations on time series\" is a specific application of general \"Date and Time Operations\" to time series data."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Timedelta_Calculation",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Timedelta_Calculation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Timedelta Calculation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "Arithmetic operations on time series often result in or involve \"Timedelta Calculation\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Date_and_Datetime_Manipulation",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Arithmetic operations on time series\" is a specialized form of \"Date and Datetime Manipulation\" applied to time series data."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_datetime_arithmetic_operations",
        "source": "Arithmetic_operations_on_time_series",
        "target": "datetime_arithmetic_operations",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses datetime arithmetic operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"datetime arithmetic operations\" applied to time series."
      },
      {
        "id": "e_Quarterly_Resampling_with_Forward_Fill_uses_Pandas_Time_Series_Resampling",
        "source": "Quarterly_Resampling_with_Forward_Fill",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Quarterly Resampling with Forward Fill uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 304,
            "line_end": 304,
            "text_excerpt": "annual_frame.resample('q-mar').ffill()"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific instance of resampling and ffilling, which are core operations described in the Pandas_Time_Series_Resampling node."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_2_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition explicitly mentions `pd.dataframe`, which is a core component of Pandas for data manipulation, and the context of random data creation points towards data preparation for time series."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_2_exampleOf_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "exampleOf",
        "definition": "Pandas DataFrame Creation exampleOf Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The specific example `frame = pd.dataframe(np.random.randn(24, 4),` directly demonstrates a core operation within \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Time_Series_Interval_parameterOf_Pandas_Time_Series_Resampling",
        "source": "Time_Series_Interval",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "parameterOf",
        "definition": "Time Series Interval parameterOf Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 7,
            "line_end": 7,
            "text_excerpt": "rule, such as every 15 seconds, every 5 minutes, or once per month. time series can"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Time Series Interval\" directly corresponds to the frequency parameter used in Pandas' time series resampling operations."
      },
      {
        "id": "e_Time_Series_Interval_synonymOf_Regular_interval_data_occurrence",
        "source": "Time_Series_Interval",
        "target": "Regular_interval_data_occurrence",
        "relation": "synonymOf",
        "definition": "Time Series Interval synonymOf Regular interval data occurrence",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 7,
            "line_end": 7,
            "text_excerpt": "rule, such as every 15 seconds, every 5 minutes, or once per month. time series can"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Time Series Interval\" is very close to, and can be considered a synonym for, \"Regular interval data occurrence\" as both describe data points occurring at fixed frequencies."
      },
      {
        "id": "e_Time_Series_Interval_relatedTo_DatetimeIndexGenerationParameters",
        "source": "Time_Series_Interval",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "relatedTo",
        "definition": "Time Series Interval relatedTo DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 7,
            "line_end": 7,
            "text_excerpt": "rule, such as every 15 seconds, every 5 minutes, or once per month. time series can"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Time Series Interval\" is a crucial parameter for generating datetime indexes with a specific frequency or length."
      },
      {
        "id": "e_CommonTimeZoneList_partOf_Time_Zone_Handling",
        "source": "CommonTimeZoneList",
        "target": "Time_Zone_Handling",
        "relation": "partOf",
        "definition": "CommonTimeZoneList partOf Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"CommonTimeZoneList\" is a direct component or a crucial element in handling time zones, as indicated by the use of `pytz.common_timezones` which provides a list of recognized time zones."
      }
    ]
  },
  "8": {
    "meta": {
      "source": "Data Science Programming",
      "extraction_time": "2023-10-01T00:00:00Z",
      "notes_hash": "9d29c95b28d0bb85de79ebd3cb7e51caa37b30856c24f49f797889a749393062",
      "allowed_relations": [
        "isA",
        "partOf",
        "prerequisiteOf",
        "dependsOn",
        "relatedTo",
        "synonymOf",
        "antonymOf",
        "contrastsWith",
        "defines",
        "uses",
        "usedBy",
        "appliesTo",
        "exampleOf",
        "counterexampleOf",
        "illustratedBy",
        "causes",
        "resultsIn",
        "prevents",
        "assumes",
        "implies",
        "equivalentTo",
        "parameterOf",
        "hasParameter",
        "propertyOf",
        "hasProperty",
        "measuredBy",
        "unitOf",
        "representedBy",
        "notationFor",
        "formulaFor",
        "provedBy",
        "theoremOf",
        "algorithmFor",
        "stepOf",
        "produces",
        "consumes",
        "advantageOf",
        "limitationOf",
        "commonErrorIn",
        "misconceptionOf",
        "commonlyConfusedWith",
        "assessedBy"
      ]
    },
    "nodes": [
      {
        "id": "1",
        "label": "Time Series Data",
        "type": "Concept",
        "definition": "Time series data is a sequence of data points indexed in time order.",
        "aliases": [
          "Time Series"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Time Series"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "Time series data is an important form of structured data in many different fields..."
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition is directly stated and is fundamental to the topic of time series analysis."
      },
      {
        "id": "3",
        "label": "Datetime",
        "type": "Concept",
        "definition": "The datetime class in Python provides methods for manipulating dates and times.",
        "aliases": [
          "datetime"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 1.0,
        "rationale": "The description is directly sourced from the lecture notes and defines a key tool in time series analysis."
      },
      {
        "id": "5",
        "label": "Timespan",
        "type": "Concept",
        "definition": "Periods in time series data represent timespans such as days, months, and years.",
        "aliases": [
          "Period"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Periods represent timespans, like days, months, quarters, or years."
          }
        ],
        "confidence": 1.0,
        "rationale": "The explanation of periods and their significance is crucial for understanding time series data."
      },
      {
        "id": "Patient",
        "label": "Patient",
        "type": "Concept",
        "definition": "pts",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timestamp_creation",
        "label": "Timestamp creation",
        "type": "Concept",
        "definition": "stamp = pd.timestamp('2011-03-12 04:00')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_time_series_data_manipulation",
        "label": "Pandas time series data manipulation",
        "type": "Library",
        "definition": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nwith pip or conda), which exposes the olson database, a compilation of world\nimport pytz\npandas is generally oriented toward working with arrays of dates, whether used as an\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for\nfrom pandas.tseries.offsets import hour, minute\ndataframe have a shift method for doing naive shifts forward or backward, leaving\ncolumns=['colorado', 'texas', 'new york', 'ohio'])\ncolumns=['colorado', 'texas', 'new york', 'ohio'])",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Time_Series_Resampling",
        "label": "Pandas Time Series Resampling",
        "type": "Library",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "TimePeriodConversion",
        "label": "TimePeriodConversion",
        "type": "Concept",
        "definition": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "date_collection",
        "label": "date collection",
        "type": "Concept",
        "definition": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "UTC_timestamp_localization",
        "label": "UTC timestamp localization",
        "type": "Concept",
        "definition": "stamp_utc = stamp.tz_localize('utc')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Weekly_Wednesday_Frequency",
        "label": "Weekly Wednesday Frequency",
        "type": "Concept",
        "definition": "freq='w-wed'),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "current_hour",
        "label": "current hour",
        "type": "Concept",
        "definition": "now.hour\nhour = hour()\nhour",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.hour\nhour = hour()\nhour"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "DatetimeIndexGenerationParameters",
        "label": "DatetimeIndexGenerationParameters",
        "type": "Concept",
        "definition": "generating a datetimeindex with an indicated length according to a particular",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Generating Date Ranges"
            ],
            "line_start": 163,
            "line_end": 163,
            "text_excerpt": "generating a datetimeindex with an indicated length according to a particular"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "label": "Pandas Series of Random Normal Data with Datetime Index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(len(rng)), index=rng)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "label": "Pandas Series with Random Normal Data and Datetime Index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(6), index=dates)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_DataFrame_Creation",
        "label": "Pandas DataFrame Creation",
        "type": "Concept",
        "definition": "frame = pd.dataframe(np.random.randn(24, 4),",
        "aliases": [
          "Pandas DataFrame Creation"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_Range_Generation_2",
        "label": "Date Range Generation",
        "type": "Concept",
        "definition": "pd.date_range('2000-01-01', '2000-12-01', freq='bm')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nrng = pd.date_range('2000-01-01', periods=12, freq='t')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Date_Range",
        "label": "Pandas Date Range",
        "type": "Concept",
        "definition": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Local_Timezone_Hour",
        "label": "Local Timezone Hour",
        "type": "Concept",
        "definition": "now = now.astimezone(local_tz)\nnow.hour\nnow.tzinfo\nanother:",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Hour",
        "label": "Hour",
        "type": "Concept",
        "definition": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Non_Unique_Timestamp_Data_Aggregation",
        "label": "Non-Unique Timestamp Data Aggregation",
        "type": "Concept",
        "definition": "suppose you wanted to aggregate the data having non-unique timestamps. one way",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Irregular_Time_Marking",
        "label": "Irregular Time Marking",
        "type": "Concept",
        "definition": "also be irregular without a fixed unit of time or offset between units. how you mark",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timedelta_Calculation",
        "label": "Timedelta Calculation",
        "type": "Concept",
        "definition": "datetime.now() - datetime(2024, 4, 20)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "DateRangeGeneration",
        "label": "DateRangeGeneration",
        "type": "Concept",
        "definition": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "pandas_Series_with_random_data_and_date_index",
        "label": "pandas Series with random data and date index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(6), index=dates)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_and_Datetime_Manipulation",
        "label": "Date and Datetime Manipulation",
        "type": "Concept",
        "definition": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "label": "Pandas Series Creation with Random Data and Time Index",
        "type": "Concept",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nlist(rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(3), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.arange(12), index=rng)",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "longer_ts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Longer_Time_Series",
        "label": "Longer Time Series",
        "type": "Concept",
        "definition": "longer_ts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "longer_ts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Fixed_frequency_date_range_generation",
        "label": "Fixed-frequency date range generation",
        "type": "Concept",
        "definition": "and generating fixed-frequency date ranges. for , you can convert",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "annual_frame_resampling",
        "label": "annual_frame_resampling",
        "type": "Concept",
        "definition": "annual_frame = frame.resample('a-dec').mean()",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 295,
            "line_end": 295,
            "text_excerpt": "annual_frame = frame.resample('a-dec').mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Regular_interval_data_occurrence",
        "label": "Regular interval data occurrence",
        "type": "Concept",
        "definition": "frequency, which is to say that data points occur at regular intervals according to some",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "datetime_arithmetic_operations",
        "label": "datetime arithmetic operations",
        "type": "Concept",
        "definition": "we can apply arithmatic operations on datetime objects:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Datetime_String_Parsing",
        "label": "Datetime String Parsing",
        "type": "Concept",
        "definition": "datetime.strptime(value, '%y-%m-%d')",
        "aliases": [
          "Datetime String Parsing"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Exercise:"
            ],
            "line_start": 79,
            "line_end": 79,
            "text_excerpt": "datetime.strptime(value, '%y-%m-%d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "ts",
        "label": "ts",
        "type": "Concept",
        "definition": "ts\nts\nts\nts\nts\nts\nts\nts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts[stamp]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Stamp",
        "label": "Stamp",
        "type": "Concept",
        "definition": "ts[stamp]",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts[stamp]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Timestamp_object",
        "label": "Timestamp object",
        "type": "Concept",
        "definition": "similar to time series and date ranges, individual timestamp objects similarly can be",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_HourMinuteOffset",
        "label": "Pandas HourMinuteOffset",
        "type": "Concept",
        "definition": "from pandas.tseries.offsets import hour, minute",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Frequencies and Date Offsets"
            ],
            "line_start": 183,
            "line_end": 183,
            "text_excerpt": "from pandas.tseries.offsets import hour, minute"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "grouped_mean",
        "label": "grouped mean",
        "type": "Concept",
        "definition": "grouped.mean()",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Arithmetic_operations_on_time_series",
        "label": "Arithmetic operations on time series",
        "type": "Concept",
        "definition": "like other series, arithmetic operations between differently indexed time series automatically",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "LabelBasedData",
        "label": "LabelBasedData",
        "type": "Concept",
        "definition": "data based on label:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Indexing, Selection, Subsetting"
            ],
            "line_start": 110,
            "line_end": 110,
            "text_excerpt": "data based on label:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "resampling_and_grouping_time_series_data",
        "label": "resampling and grouping time series data",
        "type": "Concept",
        "definition": "to do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\ngrouped.count()\nts.resample('5min', closed='right').sum()\nlabel='right', loffset='-1s').sum()",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "to do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\ngrouped.count()\nts.resample('5min', closed='right').sum()\nlabel='right', loffset='-1s').sum()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Time_Zone_Handling",
        "label": "Time Zone Handling",
        "type": "Concept",
        "definition": "working with time zones is generally considered one of the most unpleasant parts of\nmean time and is the current international standard. time zones are expressed as\nin python, time zone information comes from the third-party pytz library (installable\ntime zone information. this is especially important for historical data because the\nlocalized from naive to time zone\u2013aware and converted from one time zone to",
        "aliases": [
          "Time Zone Management"
        ],
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "time series in coordinated universal time or utc, which is the successor to greenwich\noffsets from utc; for , new york is four hours behind utc during daylight\nif two time series with different time zones are combined, the result will be utc."
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "UTC_Time_Series_Combination",
        "label": "UTC Time Series Combination",
        "type": "Concept",
        "definition": "time series in coordinated universal time or utc, which is the successor to greenwich\noffsets from utc; for , new york is four hours behind utc during daylight\nif two time series with different time zones are combined, the result will be utc.",
        "aliases": [
          "Time Zone Management"
        ],
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "time series in coordinated universal time or utc, which is the successor to greenwich\noffsets from utc; for , new york is four hours behind utc during daylight\nif two time series with different time zones are combined, the result will be utc."
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Quarterly_Resampling_with_Forward_Fill",
        "label": "Quarterly Resampling with Forward Fill",
        "type": "Concept",
        "definition": "annual_frame.resample('q-mar').ffill()",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 304,
            "line_end": 304,
            "text_excerpt": "annual_frame.resample('q-mar').ffill()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Time_Series_Interval",
        "label": "Time Series Interval",
        "type": "Concept",
        "definition": "rule, such as every 15 seconds, every 5 minutes, or once per month. time series can",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 7,
            "line_end": 7,
            "text_excerpt": "rule, such as every 15 seconds, every 5 minutes, or once per month. time series can"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "DeltaSeconds",
        "label": "DeltaSeconds",
        "type": "Concept",
        "definition": "delta.seconds",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 38,
            "line_end": 38,
            "text_excerpt": "delta.seconds"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "CommonTimeZoneList",
        "label": "CommonTimeZoneList",
        "type": "Concept",
        "definition": "for tz in pytz.common_timezones:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Oven_Placement",
        "label": "Oven Placement",
        "type": "Concept",
        "definition": "following:\nbeing placed in the oven)\nimports\np\np\np",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "p.asfreq('m', how='start')\np.asfreq('m', how='end')"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Frequency_Conversion_of_Time_Series_Data",
        "label": "Frequency Conversion of Time Series Data",
        "type": "Concept",
        "definition": "p.asfreq('m', how='start')\np.asfreq('m', how='end')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "p.asfreq('m', how='start')\np.asfreq('m', how='end')"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Date_Alignment_and_Period_Calculation",
        "label": "Date Alignment and Period Calculation",
        "type": "Concept",
        "definition": "value = '2021-01-03'\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\nalign on the dates:\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\np = pd.period(2007, freq='a-dec')\nlabel='right', loffset='-1s').sum()\nannual_frame\nq-dec: quarterly, year ending in december",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.year, now.month, now.day\nsaving time and five hours behind the rest of the year.\nnow.year"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Current_Date_and_Time_Offset",
        "label": "Current Date and Time Offset",
        "type": "Concept",
        "definition": "now.year, now.month, now.day\nsaving time and five hours behind the rest of the year.\nnow.year",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.year, now.month, now.day\nsaving time and five hours behind the rest of the year.\nnow.year"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Date_String_Representation",
        "label": "Date String Representation",
        "type": "Concept",
        "definition": "datestrs = ['2021-07-06 12:00:00', '2021-08-06 00:00:00']",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Exercise:"
            ],
            "line_start": 88,
            "line_end": 88,
            "text_excerpt": "datestrs = ['2021-07-06 12:00:00', '2021-08-06 00:00:00']"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Current_Hour",
        "label": "Current Hour",
        "type": "Concept",
        "definition": "now.hour",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 58,
            "line_end": 58,
            "text_excerpt": "now.hour"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "datetime_string_formatting",
        "label": "datetime string formatting",
        "type": "Concept",
        "definition": "format datetime objects and pandas timestamp objects as strings using str or the strftime method, passing a format specification.",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 66,
            "line_end": 66,
            "text_excerpt": "format datetime objects and pandas timestamp objects as strings using str or the strftime method, passing a format specification."
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "q_dec",
        "label": "q-dec",
        "type": "Concept",
        "definition": "q-dec: quarterly, year ending in december",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 299,
            "line_end": 299,
            "text_excerpt": "q-dec: quarterly, year ending in december"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "time_series_data_manipulation",
        "label": "time series data manipulation",
        "type": "Concept",
        "definition": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pytz\nlonger_ts = pd.series(np.random.randn(1000),\ndup_ts\nts = pd.series(np.random.randn(4),",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nwith pip or conda), which exposes the olson database, a compilation of world\npd.to_datetime(datestrs)\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Datetime_Object_Handling",
        "label": "Pandas Datetime Object Handling",
        "type": "Concept",
        "definition": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nwith pip or conda), which exposes the olson database, a compilation of world\npd.to_datetime(datestrs)\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nwith pip or conda), which exposes the olson database, a compilation of world\npd.to_datetime(datestrs)\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Date_Formatting",
        "label": "Date Formatting",
        "type": "Concept",
        "definition": "stamp.strftime('%y-%m-%d')\ns = stamp.strftime('%m/%d/%y')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "d = datetime.strptime(s, '%m/%d/%y')\ndatetime.strptime(value, '%y-%m-%d')"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      }
    ],
    "edges": [
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "1",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge2",
        "source": "Pandas_time_series_data_manipulation",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge2",
        "source": "Pandas_Time_Series_Resampling",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge3",
        "source": "1",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge3",
        "source": "1",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge4",
        "source": "1",
        "target": "5",
        "relation": "hasProperty",
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The Period class represents this data type, requiring a string or integer and a frequency."
          }
        ],
        "confidence": 0.9,
        "rationale": "Understanding periods is essential for effectively working with time series data.",
        "definition": "Time Series Data hasProperty Timespan"
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "Date_Formatting",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "Datetime_String_Parsing",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "Date_Formatting",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "Datetime_String_Parsing",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_usedBy_3",
        "source": "Date_Formatting",
        "target": "3",
        "relation": "usedBy",
        "definition": "strftime operation usedBy Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The \"strftime operation\" is a method used with Python's datetime objects to format them into strings."
      },
      {
        "id": "e_strftime_operation_usedBy_3",
        "source": "Datetime_String_Parsing",
        "target": "3",
        "relation": "usedBy",
        "definition": "strftime operation usedBy Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The \"strftime operation\" is a method used with Python's datetime objects to format them into strings."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "ts",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "Stamp",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "ts",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "ts",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "Stamp",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "Stamp",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Patient_synonymOf_Textual_Statement",
        "source": "Patient",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "Patient synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"pts\" is explicitly given as an abbreviation for \"Patient\"."
      },
      {
        "id": "e_Patient_synonymOf_Textual_Statement",
        "source": "Patient",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "Patient synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"pts\" is explicitly given as an abbreviation for \"Patient\"."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Date_Alignment_and_Period_Calculation",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Current_Date_and_Time_Offset",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Date_Alignment_and_Period_Calculation",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Current_Date_and_Time_Offset",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "current_hour",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "current_hour",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "TimePeriodConversion",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "TimePeriodConversion",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_date_collection_uses_Pandas_time_series_data_manipulation",
        "source": "date_collection",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "date collection uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example definition for \"date collection\" uses Python's `datetime` object, which is a core component of Pandas for time series manipulation."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Local_Timezone_Hour",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Hour",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Oven_Placement",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "resampling_and_grouping_time_series_data",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Date_and_Datetime_Manipulation",
        "target": "1",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Local_Timezone_Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Oven_Placement",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "resampling_and_grouping_time_series_data",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Date_and_Datetime_Manipulation",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Local_Timezone_Hour",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Local_Timezone_Hour",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Hour",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Hour",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Oven_Placement",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Oven_Placement",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "resampling_and_grouping_time_series_data",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Date_and_Datetime_Manipulation",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Oven_Placement",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Oven_Placement",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Oven_Placement",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "resampling_and_grouping_time_series_data",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_UTC_timestamp_localization_uses_Pandas_time_series_data_manipulation",
        "source": "UTC_timestamp_localization",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "UTC timestamp localization uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"UTC timestamp localization\" contains \"stamp_utc = stamp.tz_localize('utc')\", which is a common operation within Pandas for time series data manipulation."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Date_Range_Generation_2",
        "target": "1",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Pandas_Date_Range",
        "target": "1",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a specific frequency parameter used within the Pandas library for time series data manipulation."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_Time_Series_Resampling",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" (freq='w-wed') is a frequency string that is directly used in Pandas' time series resampling operations, as shown in examples like `frame.resample('w-thu')`."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Date_Range_Generation_2",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Date_Range",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_DatetimeIndexGenerationParameters_uses_DatetimeIndexGenerationParameters",
        "source": "DatetimeIndexGenerationParameters",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "uses",
        "definition": "DatetimeIndexGenerationParameters uses DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Generating Date Ranges"
            ],
            "line_start": 163,
            "line_end": 163,
            "text_excerpt": "generating a datetimeindex with an indicated length according to a particular"
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition of \"DatetimeIndexGenerationParameters\" indicates it's for \"generating a datetimeindex\", and \"Pandas_time_series_data_manipulation\" is a broad category that encompasses such generation."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_1",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "1",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"Time Series Data\" as it consists of data points indexed by time (a `DatetimeIndex`)."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_Pandas_time_series_data_manipulation",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The creation of a Pandas Series with a DatetimeIndex is a core operation within \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_isA_1",
        "source": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "target": "1",
        "relation": "isA",
        "definition": "Pandas Series with Random Normal Data and Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is a specific type of Time Series Data, characterized by its structure and data source."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_equivalentTo_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "equivalentTo",
        "definition": "Pandas Series with Random Normal Data and Datetime Index equivalentTo Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is essentially the same as this existing concept, differing only in the specific definition of the index generation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node describes the creation of a Pandas DataFrame, which is a core data structure used extensively in Pandas for time series data manipulation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_Time_Series_Resampling",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of the new node `frame = pd.dataframe(np.random.randn(24, 4),` is directly present within the definition of `Pandas_Time_Series_Resampling`, indicating a strong usage relationship."
      },
      {
        "id": "e_Non_Unique_Timestamp_Data_Aggregation_relatedTo_1",
        "source": "Non_Unique_Timestamp_Data_Aggregation",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Non-Unique Timestamp Data Aggregation relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_1",
        "source": "Irregular_Time_Marking",
        "target": "1",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" describes a characteristic of how time is represented or handled, which is relevant to \"Time Series Data\" as time is fundamental to its definition."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Irregular_Time_Marking",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" is a concept that would be encountered and potentially need to be handled during \"Pandas time series data manipulation.\""
      },
      {
        "id": "e_Timedelta_Calculation_relatedTo_Date_and_Time_Operations",
        "source": "Timedelta_Calculation",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "relatedTo",
        "definition": "Timedelta Calculation relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Timedelta_Calculation_relatedTo_Date_and_Time_Operations",
        "source": "Timedelta_Calculation",
        "target": "Current_Date_and_Time_Offset",
        "relation": "relatedTo",
        "definition": "Timedelta Calculation relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Oven_Placement",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Frequency_Conversion_of_Time_Series_Data",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_uses_Pandas_time_series_data_manipulation",
        "source": "DateRangeGeneration",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "DateRangeGeneration uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is defined using `pd.date_range`, which is a fundamental function within the pandas library for time series manipulation."
      },
      {
        "id": "e_DateRangeGeneration_relatedTo_Pandas_Date_Range",
        "source": "DateRangeGeneration",
        "target": "Pandas_Date_Range",
        "relation": "relatedTo",
        "definition": "DateRangeGeneration relatedTo Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is a specific instance or usage of the more general concept \"Pandas_Date_Range\", as both are related to creating date ranges using pandas."
      },
      {
        "id": "e_DateRangeGeneration_relatedTo_Date_Range_Generation_2",
        "source": "DateRangeGeneration",
        "target": "Date_Range_Generation_2",
        "relation": "relatedTo",
        "definition": "DateRangeGeneration relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is very similar to \"Date_Range_Generation_2\" in that both refer to the process of generating date ranges using pandas functions like `pd.date_range`."
      },
      {
        "id": "e_pandas_Series_with_random_data_and_date_index_synonymOf_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "pandas_Series_with_random_data_and_date_index",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "synonymOf",
        "definition": "pandas Series with random data and date index synonymOf Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new node is an exact synonym of this concept."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_uses_Pandas_time_series_data_manipulation",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Fixed-frequency date range generation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Fixed-frequency date range generation\" closely aligns with the functionalities described for Pandas time series data manipulation, specifically mentioning date range generation."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_parameterOf_DatetimeIndexGenerationParameters",
        "source": "Fixed_frequency_date_range_generation",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "parameterOf",
        "definition": "Fixed-frequency date range generation parameterOf DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" implies the use of parameters to define the frequency and extent of the generated dates."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_Date_Range_Generation_2",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Date_Range_Generation_2",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"Fixed-frequency date range generation\" is a specific type of date range generation."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_Pandas_Date_Range",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Pandas_Date_Range",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" is a specific way to generate date ranges, and `pd.date_range` is a primary tool for this in pandas."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_DateRangeGeneration",
        "source": "Fixed_frequency_date_range_generation",
        "target": "DateRangeGeneration",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA DateRangeGeneration",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" is a type of date range generation."
      },
      {
        "id": "e_annual_frame_resampling_uses_Pandas_Time_Series_Resampling",
        "source": "annual_frame_resampling",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "annual_frame_resampling uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 295,
            "line_end": 295,
            "text_excerpt": "annual_frame = frame.resample('a-dec').mean()"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"annual_frame_resampling\" directly shows the use of the `.resample('a-dec').mean()` method, which is a core operation of Pandas Time Series Resampling."
      },
      {
        "id": "e_Regular_interval_data_occurrence_isA_1",
        "source": "Regular_interval_data_occurrence",
        "target": "1",
        "relation": "isA",
        "definition": "Regular interval data occurrence isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Regular interval data occurrence\" is a specific type of \"Time Series Data\" where the data points appear at consistent time intervals."
      },
      {
        "id": "e_Regular_interval_data_occurrence_relatedTo_Fixed_frequency_date_range_generation",
        "source": "Regular_interval_data_occurrence",
        "target": "Fixed_frequency_date_range_generation",
        "relation": "relatedTo",
        "definition": "Regular interval data occurrence relatedTo Fixed-frequency date range generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Regular interval data occurrence\" is precisely what \"Fixed-frequency date range generation\" aims to produce."
      },
      {
        "id": "e_datetime_arithmetic_operations_partOf_3",
        "source": "datetime_arithmetic_operations",
        "target": "3",
        "relation": "partOf",
        "definition": "datetime arithmetic operations partOf Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" are operations that can be applied to \"Datetime\" objects."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Time_Operations",
        "source": "datetime_arithmetic_operations",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" is a more specific term or a component of general \"Date and Time Operations\"."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Time_Operations",
        "source": "datetime_arithmetic_operations",
        "target": "Current_Date_and_Time_Offset",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" is a more specific term or a component of general \"Date and Time Operations\"."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Datetime_Manipulation",
        "source": "datetime_arithmetic_operations",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" are a form of \"Date and Datetime Manipulation\"."
      },
      {
        "id": "e_Timestamp_object_isA_1",
        "source": "Timestamp_object",
        "target": "1",
        "relation": "isA",
        "definition": "Timestamp object isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Time Series Data\"."
      },
      {
        "id": "e_Timestamp_object_isA_3",
        "source": "Timestamp_object",
        "target": "3",
        "relation": "isA",
        "definition": "Timestamp object isA Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Datetime\" object."
      },
      {
        "id": "e_Timestamp_object_isA_5",
        "source": "Timestamp_object",
        "target": "5",
        "relation": "isA",
        "definition": "Timestamp object isA Timespan",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Timespan\" in the context of time series."
      },
      {
        "id": "e_Timestamp_object_usedBy_Timestamp_creation",
        "source": "Timestamp_object",
        "target": "Timestamp_creation",
        "relation": "usedBy",
        "definition": "Timestamp object usedBy Timestamp creation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is the result of a \"Timestamp creation\" process."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Time_Operations",
        "source": "Timestamp_object",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is central to performing \"Date and Time Operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Time_Operations",
        "source": "Timestamp_object",
        "target": "Current_Date_and_Time_Offset",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is central to performing \"Date and Time Operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Non_Unique_Timestamp_Data_Aggregation",
        "source": "Timestamp_object",
        "target": "Non_Unique_Timestamp_Data_Aggregation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Non-Unique Timestamp Data Aggregation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is the core concept that can be non-unique and aggregated."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Datetime_Manipulation",
        "source": "Timestamp_object",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is a fundamental type for \"Date and Datetime Manipulation\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_datetime_arithmetic_operations",
        "source": "Timestamp_object",
        "target": "datetime_arithmetic_operations",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo datetime arithmetic operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\"s are the operands for \"datetime arithmetic operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_ts",
        "source": "Timestamp_object",
        "target": "ts",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo ts",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"ts\" is a common abbreviation for a time series, which is composed of \"Timestamp object\"s."
      },
      {
        "id": "e_Timestamp_object_isA_Stamp",
        "source": "Timestamp_object",
        "target": "Stamp",
        "relation": "isA",
        "definition": "Timestamp object isA Stamp",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Stamp\" is a synonym for \"Timestamp object\"."
      },
      {
        "id": "e_Pandas_HourMinuteOffset_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_HourMinuteOffset",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas HourMinuteOffset uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Frequencies and Date Offsets"
            ],
            "line_start": 183,
            "line_end": 183,
            "text_excerpt": "from pandas.tseries.offsets import hour, minute"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node \"Pandas HourMinuteOffset\" is imported from \"pandas.tseries.offsets\", which is a sub-module of pandas for time series manipulation."
      },
      {
        "id": "e_grouped_mean_relatedTo_grouped_count",
        "source": "grouped_mean",
        "target": "Oven_Placement",
        "relation": "relatedTo",
        "definition": "grouped mean relatedTo grouped count",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_grouped_mean_relatedTo_grouped_count",
        "source": "grouped_mean",
        "target": "Frequency_Conversion_of_Time_Series_Data",
        "relation": "relatedTo",
        "definition": "grouped mean relatedTo grouped count",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_grouped_mean_relatedTo_grouped_count",
        "source": "grouped_mean",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "relatedTo",
        "definition": "grouped mean relatedTo grouped count",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_1",
        "source": "Arithmetic_operations_on_time_series",
        "target": "1",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"Arithmetic operations on time series\" directly describes operations on time series, which are fundamentally \"Time Series Data\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Pandas_time_series_data_manipulation",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of data manipulation on time series, which is a core functionality covered by \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Date_and_Time_Operations",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Arithmetic operations on time series\" is a specific application of general \"Date and Time Operations\" to time series data."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Date_and_Time_Operations",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Current_Date_and_Time_Offset",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Arithmetic operations on time series\" is a specific application of general \"Date and Time Operations\" to time series data."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Timedelta_Calculation",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Timedelta_Calculation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Timedelta Calculation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "Arithmetic operations on time series often result in or involve \"Timedelta Calculation\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Date_and_Datetime_Manipulation",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Arithmetic operations on time series\" is a specialized form of \"Date and Datetime Manipulation\" applied to time series data."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_datetime_arithmetic_operations",
        "source": "Arithmetic_operations_on_time_series",
        "target": "datetime_arithmetic_operations",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses datetime arithmetic operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"datetime arithmetic operations\" applied to time series."
      },
      {
        "id": "e_Quarterly_Resampling_with_Forward_Fill_uses_Pandas_Time_Series_Resampling",
        "source": "Quarterly_Resampling_with_Forward_Fill",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Quarterly Resampling with Forward Fill uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 304,
            "line_end": 304,
            "text_excerpt": "annual_frame.resample('q-mar').ffill()"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific instance of resampling and ffilling, which are core operations described in the Pandas_Time_Series_Resampling node."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_2_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition explicitly mentions `pd.dataframe`, which is a core component of Pandas for data manipulation, and the context of random data creation points towards data preparation for time series."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_2_exampleOf_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "exampleOf",
        "definition": "Pandas DataFrame Creation exampleOf Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The specific example `frame = pd.dataframe(np.random.randn(24, 4),` directly demonstrates a core operation within \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Time_Series_Interval_parameterOf_Pandas_Time_Series_Resampling",
        "source": "Time_Series_Interval",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "parameterOf",
        "definition": "Time Series Interval parameterOf Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 7,
            "line_end": 7,
            "text_excerpt": "rule, such as every 15 seconds, every 5 minutes, or once per month. time series can"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Time Series Interval\" directly corresponds to the frequency parameter used in Pandas' time series resampling operations."
      },
      {
        "id": "e_Time_Series_Interval_relatedTo_DatetimeIndexGenerationParameters",
        "source": "Time_Series_Interval",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "relatedTo",
        "definition": "Time Series Interval relatedTo DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 7,
            "line_end": 7,
            "text_excerpt": "rule, such as every 15 seconds, every 5 minutes, or once per month. time series can"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Time Series Interval\" is a crucial parameter for generating datetime indexes with a specific frequency or length."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_time_series_data_manipulation",
        "source": "time_series_data_manipulation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node \"Pandas Library Import\" is the standard way to start using the Pandas library, which is explicitly mentioned in the definition of \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node \"Pandas Library Import\" is the standard way to start using the Pandas library, which is explicitly mentioned in the definition of \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_Time_Series_Resampling",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Pandas Time Series Resampling\" includes multiple uses of `pd.` (e.g., `pd.series`, `pd.date_range`, `pd.period`), which indicates it relies on the Pandas library. Importing Pandas is necessary to use these."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_Time_Series_Resampling",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Pandas Time Series Resampling\" includes multiple uses of `pd.` (e.g., `pd.series`, `pd.date_range`, `pd.period`), which indicates it relies on the Pandas library. Importing Pandas is necessary to use these."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_DatetimeIndexGenerationParameters",
        "source": "time_series_data_manipulation",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition refers to \"generating a datetimeindex\", which is a core feature of Pandas. Importing Pandas is a prerequisite for this."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_DatetimeIndexGenerationParameters",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition refers to \"generating a datetimeindex\", which is a core feature of Pandas. Importing Pandas is a prerequisite for this."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(len(rng)), index=rng)` clearly uses Pandas functions (`pd.series`). Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(len(rng)), index=rng)` clearly uses Pandas functions (`pd.series`). Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series with Random Normal Data and Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(6), index=dates)` uses `pd.series`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series with Random Normal Data and Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(6), index=dates)` uses `pd.series`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_DataFrame_Creation",
        "source": "time_series_data_manipulation",
        "target": "Pandas_DataFrame_Creation",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas DataFrame Creation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `frame = pd.dataframe(np.random.randn(24, 4),` explicitly uses `pd.dataframe`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_DataFrame_Creation",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_DataFrame_Creation",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas DataFrame Creation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `frame = pd.dataframe(np.random.randn(24, 4),` explicitly uses `pd.dataframe`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Date_Range_Generation_2",
        "source": "time_series_data_manipulation",
        "target": "Date_Range_Generation_2",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes multiple uses of `pd.date_range`, a core Pandas function for generating date ranges. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Date_Range_Generation_2",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Date_Range_Generation_2",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes multiple uses of `pd.date_range`, a core Pandas function for generating date ranges. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Date_Range",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Date_Range",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `pd.date_range(...)` directly uses a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Date_Range",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Date_Range",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `pd.date_range(...)` directly uses a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_DateRangeGeneration",
        "source": "time_series_data_manipulation",
        "target": "DateRangeGeneration",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy DateRangeGeneration",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `pd.date_range(...)` directly uses a Pandas function for date range generation. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_DateRangeGeneration",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "DateRangeGeneration",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy DateRangeGeneration",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `pd.date_range(...)` directly uses a Pandas function for date range generation. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_pandas_Series_with_random_data_and_date_index",
        "source": "time_series_data_manipulation",
        "target": "pandas_Series_with_random_data_and_date_index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy pandas Series with random data and date index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(6), index=dates)` uses `pd.series`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_pandas_Series_with_random_data_and_date_index",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "pandas_Series_with_random_data_and_date_index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy pandas Series with random data and date index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(6), index=dates)` uses `pd.series`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series Creation with Random Data and Time Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes multiple uses of `pd.series` and `pd.date_range`, which are Pandas functions. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series Creation with Random Data and Time Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes multiple uses of `pd.series` and `pd.date_range`, which are Pandas functions. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Fixed_frequency_date_range_generation",
        "source": "time_series_data_manipulation",
        "target": "Fixed_frequency_date_range_generation",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Fixed-frequency date range generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition mentions \"generating fixed-frequency date ranges\", a primary functionality of `pd.date_range` from Pandas. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Fixed_frequency_date_range_generation",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Fixed_frequency_date_range_generation",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Fixed-frequency date range generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition mentions \"generating fixed-frequency date ranges\", a primary functionality of `pd.date_range` from Pandas. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_annual_frame_resampling",
        "source": "time_series_data_manipulation",
        "target": "annual_frame_resampling",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy annual_frame_resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `annual_frame = frame.resample('a-dec').mean()` uses `resample`, a method common in Pandas for time series data. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_annual_frame_resampling",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "annual_frame_resampling",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy annual_frame_resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `annual_frame = frame.resample('a-dec').mean()` uses `resample`, a method common in Pandas for time series data. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_HourMinuteOffset",
        "source": "time_series_data_manipulation",
        "target": "Pandas_HourMinuteOffset",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas HourMinuteOffset",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `from pandas.tseries.offsets import hour, minute` directly imports components from Pandas. Thus, `import pandas as pd` is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_HourMinuteOffset",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_HourMinuteOffset",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas HourMinuteOffset",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `from pandas.tseries.offsets import hour, minute` directly imports components from Pandas. Thus, `import pandas as pd` is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_uses_resampling_and_grouping_time_series_data",
        "source": "time_series_data_manipulation",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "uses",
        "definition": "Pandas Library Import uses resampling and grouping time series data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes `dup_ts.groupby(level=0)` and `ts.resample('5min', closed='right').sum()`, which are Pandas operations. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_uses_resampling_and_grouping_time_series_data",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "uses",
        "definition": "Pandas Library Import uses resampling and grouping time series data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes `dup_ts.groupby(level=0)` and `ts.resample('5min', closed='right').sum()`, which are Pandas operations. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Quarterly_Resampling_with_Forward_Fill",
        "source": "time_series_data_manipulation",
        "target": "Quarterly_Resampling_with_Forward_Fill",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Quarterly Resampling with Forward Fill",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `annual_frame.resample('q-mar').ffill()` uses Pandas' `resample` and `ffill` methods. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Quarterly_Resampling_with_Forward_Fill",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Quarterly_Resampling_with_Forward_Fill",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Quarterly Resampling with Forward Fill",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `annual_frame.resample('q-mar').ffill()` uses Pandas' `resample` and `ffill` methods. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Frequency_Conversion_of_Time_Series_Data",
        "source": "time_series_data_manipulation",
        "target": "Frequency_Conversion_of_Time_Series_Data",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Frequency Conversion of Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes `p.asfreq('m', how='start')` and `p.asfreq('m', how='end')`, which are Pandas methods for frequency conversion. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Frequency_Conversion_of_Time_Series_Data",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Frequency_Conversion_of_Time_Series_Data",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Frequency Conversion of Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes `p.asfreq('m', how='start')` and `p.asfreq('m', how='end')`, which are Pandas methods for frequency conversion. Importing Pandas is necessary."
      },
      {
        "id": "e_q_dec_uses_Date_Alignment_and_Period_Calculation",
        "source": "q_dec",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "uses",
        "definition": "q-dec uses Date Alignment and Period Calculation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 299,
            "line_end": 299,
            "text_excerpt": "q-dec: quarterly, year ending in december"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"q-dec\" is a specific frequency used in pandas for quarterly resampling with a year-end in December, aligning with the concept of date alignment and period calculation."
      },
      {
        "id": "e_q_dec_uses_Pandas_Time_Series_Resampling",
        "source": "q_dec",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "q-dec uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 299,
            "line_end": 299,
            "text_excerpt": "q-dec: quarterly, year ending in december"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"q-dec\" is a resampling frequency used in pandas for time series data."
      }
    ]
  },
  "9": {
    "meta": {
      "source": "Data Science Programming",
      "extraction_time": "2023-10-01T00:00:00Z",
      "notes_hash": "9d29c95b28d0bb85de79ebd3cb7e51caa37b30856c24f49f797889a749393062",
      "allowed_relations": [
        "isA",
        "partOf",
        "prerequisiteOf",
        "dependsOn",
        "relatedTo",
        "synonymOf",
        "antonymOf",
        "contrastsWith",
        "defines",
        "uses",
        "usedBy",
        "appliesTo",
        "exampleOf",
        "counterexampleOf",
        "illustratedBy",
        "causes",
        "resultsIn",
        "prevents",
        "assumes",
        "implies",
        "equivalentTo",
        "parameterOf",
        "hasParameter",
        "propertyOf",
        "hasProperty",
        "measuredBy",
        "unitOf",
        "representedBy",
        "notationFor",
        "formulaFor",
        "provedBy",
        "theoremOf",
        "algorithmFor",
        "stepOf",
        "produces",
        "consumes",
        "advantageOf",
        "limitationOf",
        "commonErrorIn",
        "misconceptionOf",
        "commonlyConfusedWith",
        "assessedBy"
      ]
    },
    "nodes": [
      {
        "id": "3",
        "label": "Datetime",
        "type": "Concept",
        "definition": "The datetime class in Python provides methods for manipulating dates and times.",
        "aliases": [
          "datetime"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 1.0,
        "rationale": "The description is directly sourced from the lecture notes and defines a key tool in time series analysis."
      },
      {
        "id": "5",
        "label": "Timespan",
        "type": "Concept",
        "definition": "Periods in time series data represent timespans such as days, months, and years.",
        "aliases": [
          "Period"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Periods represent timespans, like days, months, quarters, or years."
          }
        ],
        "confidence": 1.0,
        "rationale": "The explanation of periods and their significance is crucial for understanding time series data."
      },
      {
        "id": "Patient",
        "label": "Patient",
        "type": "Concept",
        "definition": "pts",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timestamp_creation",
        "label": "Timestamp creation",
        "type": "Concept",
        "definition": "stamp = pd.timestamp('2011-03-12 04:00')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_time_series_data_manipulation",
        "label": "Pandas time series data manipulation",
        "type": "Library",
        "definition": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nwith pip or conda), which exposes the olson database, a compilation of world\nimport pytz\npandas is generally oriented toward working with arrays of dates, whether used as an\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for\nfrom pandas.tseries.offsets import hour, minute\ndataframe have a shift method for doing naive shifts forward or backward, leaving\ncolumns=['colorado', 'texas', 'new york', 'ohio'])\ncolumns=['colorado', 'texas', 'new york', 'ohio'])",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Time_Series_Resampling",
        "label": "Pandas Time Series Resampling",
        "type": "Library",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "TimePeriodConversion",
        "label": "TimePeriodConversion",
        "type": "Concept",
        "definition": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "date_collection",
        "label": "date collection",
        "type": "Concept",
        "definition": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "UTC_timestamp_localization",
        "label": "UTC timestamp localization",
        "type": "Concept",
        "definition": "stamp_utc = stamp.tz_localize('utc')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Weekly_Wednesday_Frequency",
        "label": "Weekly Wednesday Frequency",
        "type": "Concept",
        "definition": "freq='w-wed'),",
        "aliases": [
          "Wednesday Frequency"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "current_hour",
        "label": "current hour",
        "type": "Concept",
        "definition": "now.hour\nhour = hour()\nhour",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.hour\nhour = hour()\nhour"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "DatetimeIndexGenerationParameters",
        "label": "DatetimeIndexGenerationParameters",
        "type": "Concept",
        "definition": "generating a datetimeindex with an indicated length according to a particular",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Generating Date Ranges"
            ],
            "line_start": 163,
            "line_end": 163,
            "text_excerpt": "generating a datetimeindex with an indicated length according to a particular"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "label": "Pandas Series of Random Normal Data with Datetime Index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(len(rng)), index=rng)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "label": "Pandas Series with Random Normal Data and Datetime Index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(6), index=dates)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_DataFrame_Creation",
        "label": "Pandas DataFrame Creation",
        "type": "Concept",
        "definition": "frame = pd.dataframe(np.random.randn(24, 4),",
        "aliases": [
          "Pandas DataFrame Creation"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_Range_Generation_2",
        "label": "Date Range Generation",
        "type": "Concept",
        "definition": "pd.date_range('2000-01-01', '2000-12-01', freq='bm')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nrng = pd.date_range('2000-01-01', periods=12, freq='t')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Date_Range",
        "label": "Pandas Date Range",
        "type": "Concept",
        "definition": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Local_Timezone_Hour",
        "label": "Local Timezone Hour",
        "type": "Concept",
        "definition": "now = now.astimezone(local_tz)\nnow.hour\nnow.tzinfo\nanother:",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Hour",
        "label": "Hour",
        "type": "Concept",
        "definition": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Non_Unique_Timestamp_Data_Aggregation",
        "label": "Non-Unique Timestamp Data Aggregation",
        "type": "Concept",
        "definition": "suppose you wanted to aggregate the data having non-unique timestamps. one way",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Irregular_Time_Marking",
        "label": "Irregular Time Marking",
        "type": "Concept",
        "definition": "also be irregular without a fixed unit of time or offset between units. how you mark",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timedelta_Calculation",
        "label": "Timedelta Calculation",
        "type": "Concept",
        "definition": "datetime.now() - datetime(2024, 4, 20)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "DateRangeGeneration",
        "label": "DateRangeGeneration",
        "type": "Concept",
        "definition": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "pandas_Series_with_random_data_and_date_index",
        "label": "pandas Series with random data and date index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(6), index=dates)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_and_Datetime_Manipulation",
        "label": "Date and Datetime Manipulation",
        "type": "Concept",
        "definition": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "label": "Pandas Series Creation with Random Data and Time Index",
        "type": "Concept",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nlist(rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(3), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.arange(12), index=rng)",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "longer_ts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Longer_Time_Series",
        "label": "Longer Time Series",
        "type": "Concept",
        "definition": "longer_ts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "longer_ts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Fixed_frequency_date_range_generation",
        "label": "Fixed-frequency date range generation",
        "type": "Concept",
        "definition": "and generating fixed-frequency date ranges. for , you can convert",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "annual_frame_resampling",
        "label": "annual_frame_resampling",
        "type": "Concept",
        "definition": "annual_frame = frame.resample('a-dec').mean()",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 295,
            "line_end": 295,
            "text_excerpt": "annual_frame = frame.resample('a-dec').mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Regular_interval_data_occurrence",
        "label": "Regular interval data occurrence",
        "type": "Concept",
        "definition": "frequency, which is to say that data points occur at regular intervals according to some",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "datetime_arithmetic_operations",
        "label": "datetime arithmetic operations",
        "type": "Concept",
        "definition": "we can apply arithmatic operations on datetime objects:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Datetime_String_Parsing",
        "label": "Datetime String Parsing",
        "type": "Concept",
        "definition": "datetime.strptime(value, '%y-%m-%d')",
        "aliases": [
          "Datetime String Parsing"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Exercise:"
            ],
            "line_start": 79,
            "line_end": 79,
            "text_excerpt": "datetime.strptime(value, '%y-%m-%d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "ts",
        "label": "ts",
        "type": "Concept",
        "definition": "ts\nts\nts\nts\nts\nts\nts\nts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts[stamp]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Stamp",
        "label": "Stamp",
        "type": "Concept",
        "definition": "ts[stamp]",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts[stamp]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_HourMinuteOffset",
        "label": "Pandas HourMinuteOffset",
        "type": "Concept",
        "definition": "from pandas.tseries.offsets import hour, minute",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Frequencies and Date Offsets"
            ],
            "line_start": 183,
            "line_end": 183,
            "text_excerpt": "from pandas.tseries.offsets import hour, minute"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "grouped_mean",
        "label": "grouped mean",
        "type": "Concept",
        "definition": "grouped.mean()",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Arithmetic_operations_on_time_series",
        "label": "Arithmetic operations on time series",
        "type": "Concept",
        "definition": "like other series, arithmetic operations between differently indexed time series automatically",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "LabelBasedData",
        "label": "LabelBasedData",
        "type": "Concept",
        "definition": "data based on label:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Indexing, Selection, Subsetting"
            ],
            "line_start": 110,
            "line_end": 110,
            "text_excerpt": "data based on label:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "resampling_and_grouping_time_series_data",
        "label": "resampling and grouping time series data",
        "type": "Concept",
        "definition": "to do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\ngrouped.count()\nts.resample('5min', closed='right').sum()\nlabel='right', loffset='-1s').sum()",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "to do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\ngrouped.count()\nts.resample('5min', closed='right').sum()\nlabel='right', loffset='-1s').sum()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Time_Zone_Handling",
        "label": "Time Zone Handling",
        "type": "Concept",
        "definition": "working with time zones is generally considered one of the most unpleasant parts of\nmean time and is the current international standard. time zones are expressed as\nin python, time zone information comes from the third-party pytz library (installable\ntime zone information. this is especially important for historical data because the\nlocalized from naive to time zone\u2013aware and converted from one time zone to",
        "aliases": [
          "Time Zone Management"
        ],
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "time series in coordinated universal time or utc, which is the successor to greenwich\noffsets from utc; for , new york is four hours behind utc during daylight\nif two time series with different time zones are combined, the result will be utc."
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "UTC_Time_Series_Combination",
        "label": "UTC Time Series Combination",
        "type": "Concept",
        "definition": "time series in coordinated universal time or utc, which is the successor to greenwich\noffsets from utc; for , new york is four hours behind utc during daylight\nif two time series with different time zones are combined, the result will be utc.",
        "aliases": [
          "Time Zone Management"
        ],
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "time series in coordinated universal time or utc, which is the successor to greenwich\noffsets from utc; for , new york is four hours behind utc during daylight\nif two time series with different time zones are combined, the result will be utc."
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Quarterly_Resampling_with_Forward_Fill",
        "label": "Quarterly Resampling with Forward Fill",
        "type": "Concept",
        "definition": "annual_frame.resample('q-mar').ffill()",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 304,
            "line_end": 304,
            "text_excerpt": "annual_frame.resample('q-mar').ffill()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Time_Series_Interval",
        "label": "Time Series Interval",
        "type": "Concept",
        "definition": "rule, such as every 15 seconds, every 5 minutes, or once per month. time series can",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 7,
            "line_end": 7,
            "text_excerpt": "rule, such as every 15 seconds, every 5 minutes, or once per month. time series can"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "DeltaSeconds",
        "label": "DeltaSeconds",
        "type": "Concept",
        "definition": "delta.seconds",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 38,
            "line_end": 38,
            "text_excerpt": "delta.seconds"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "CommonTimeZoneList",
        "label": "CommonTimeZoneList",
        "type": "Concept",
        "definition": "for tz in pytz.common_timezones:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Oven_Placement",
        "label": "Oven Placement",
        "type": "Concept",
        "definition": "following:\nbeing placed in the oven)\nimports\np\np\np",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "p.asfreq('m', how='start')\np.asfreq('m', how='end')"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Frequency_Conversion_of_Time_Series_Data",
        "label": "Frequency Conversion of Time Series Data",
        "type": "Concept",
        "definition": "p.asfreq('m', how='start')\np.asfreq('m', how='end')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "p.asfreq('m', how='start')\np.asfreq('m', how='end')"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Date_Alignment_and_Period_Calculation",
        "label": "Date Alignment and Period Calculation",
        "type": "Concept",
        "definition": "value = '2021-01-03'\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\nalign on the dates:\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\np = pd.period(2007, freq='a-dec')\nlabel='right', loffset='-1s').sum()\nannual_frame\nq-dec: quarterly, year ending in december",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.year, now.month, now.day\nsaving time and five hours behind the rest of the year.\nnow.year"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Current_Date_and_Time_Offset",
        "label": "Current Date and Time Offset",
        "type": "Concept",
        "definition": "now.year, now.month, now.day\nsaving time and five hours behind the rest of the year.\nnow.year",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.year, now.month, now.day\nsaving time and five hours behind the rest of the year.\nnow.year"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Date_String_Representation",
        "label": "Date String Representation",
        "type": "Concept",
        "definition": "datestrs = ['2021-07-06 12:00:00', '2021-08-06 00:00:00']",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Exercise:"
            ],
            "line_start": 88,
            "line_end": 88,
            "text_excerpt": "datestrs = ['2021-07-06 12:00:00', '2021-08-06 00:00:00']"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Current_Hour",
        "label": "Current Hour",
        "type": "Concept",
        "definition": "now.hour",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 58,
            "line_end": 58,
            "text_excerpt": "now.hour"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "datetime_string_formatting",
        "label": "datetime string formatting",
        "type": "Concept",
        "definition": "format datetime objects and pandas timestamp objects as strings using str or the strftime method, passing a format specification.",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 66,
            "line_end": 66,
            "text_excerpt": "format datetime objects and pandas timestamp objects as strings using str or the strftime method, passing a format specification."
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "q_dec",
        "label": "q-dec",
        "type": "Concept",
        "definition": "q-dec: quarterly, year ending in december",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 299,
            "line_end": 299,
            "text_excerpt": "q-dec: quarterly, year ending in december"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "time_series_data_manipulation",
        "label": "time series data manipulation",
        "type": "Concept",
        "definition": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pytz\nlonger_ts = pd.series(np.random.randn(1000),\ndup_ts\nts = pd.series(np.random.randn(4),",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nwith pip or conda), which exposes the olson database, a compilation of world\npd.to_datetime(datestrs)\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Datetime_Object_Handling",
        "label": "Pandas Datetime Object Handling",
        "type": "Concept",
        "definition": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nwith pip or conda), which exposes the olson database, a compilation of world\npd.to_datetime(datestrs)\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nwith pip or conda), which exposes the olson database, a compilation of world\npd.to_datetime(datestrs)\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Date_Formatting",
        "label": "Date Formatting",
        "type": "Concept",
        "definition": "stamp.strftime('%y-%m-%d')\ns = stamp.strftime('%m/%d/%y')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "d = datetime.strptime(s, '%m/%d/%y')\ndatetime.strptime(value, '%y-%m-%d')"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Daily_Resampling_of_Time_Series",
        "label": "Daily Resampling of Time Series",
        "type": "Concept",
        "definition": "the sample time series to be fixed daily frequency by calling resample:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 146,
            "line_end": 146,
            "text_excerpt": "the sample time series to be fixed daily frequency by calling resample:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "datetime_module",
        "label": "datetime module",
        "type": "Concept",
        "definition": "from datetime import datetime",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 26,
            "line_end": 26,
            "text_excerpt": "from datetime import datetime"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timestamp_relative_to_experiment_or_elapsed_time",
        "label": "Timestamp relative to experiment or elapsed time",
        "type": "Concept",
        "definition": "experiment or elapsed time; each timestamp is a measure of time relative to a",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 14,
            "line_end": 14,
            "text_excerpt": "experiment or elapsed time; each timestamp is a measure of time relative to a"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Period_Range",
        "label": "Pandas Period Range",
        "type": "Concept",
        "definition": "index=pd.period_range('1-2000', '12-2001',",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 291,
            "line_end": 291,
            "text_excerpt": "index=pd.period_range('1-2000', '12-2001',"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timestamped_Interval",
        "label": "Timestamped Interval",
        "type": "Concept",
        "definition": "intervals of time, indicated by a start and end timestamp. periods can be thought\nexperiment or elapsed time; each timestamp is a measure of time relative to a\nparticular start time (e.g., the diameter of a cookie baking each second since\nsimilar to time series and date ranges, individual timestamp objects similarly can be",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "timestamps, specific instants in time fixed periods, such as the month january 2007 or the full year 2010\nfor longer time series, a year or only a year and month can be passed to easily select\ntimestamp. here is an :\nsince the timestamps are stored under the hood in utc, this is a straightforward"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Timestamp_selection",
        "label": "Timestamp selection",
        "type": "Concept",
        "definition": "timestamps, specific instants in time fixed periods, such as the month january 2007 or the full year 2010\nfor longer time series, a year or only a year and month can be passed to easily select\ntimestamp. here is an :\nsince the timestamps are stored under the hood in utc, this is a straightforward",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "timestamps, specific instants in time fixed periods, such as the month january 2007 or the full year 2010\nfor longer time series, a year or only a year and month can be passed to easily select\ntimestamp. here is an :\nsince the timestamps are stored under the hood in utc, this is a straightforward"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Index_Expression",
        "label": "Index Expression",
        "type": "Concept",
        "definition": "ts.index\nts + ts[::2]\nindex\nlist(rng)",
        "aliases": [
          "Time Series"
        ],
        "provenance": [
          {
            "section_path": [
              "Time Series"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "apply techiques to time series data\ntime series data is an important form of structured data in many different fields, such\nor measured at many points in time forms a time series. many time series are fixed\nand refer to time series data depends on the application, and you may have one of the\ntime zone information. this is especially important for historical data because the\ndata based on label:\nslices of data:\nin some applications, there may be multiple data observations falling on a particular\n\u201cshifting\u201d refers to moving data backward and forward through time. both series and\ntime series:"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Time_Series_Data_Application",
        "label": "Time Series Data Application",
        "type": "Concept",
        "definition": "apply techiques to time series data\ntime series data is an important form of structured data in many different fields, such\nor measured at many points in time forms a time series. many time series are fixed\nand refer to time series data depends on the application, and you may have one of the\ntime zone information. this is especially important for historical data because the\ndata based on label:\nslices of data:\nin some applications, there may be multiple data observations falling on a particular\n\u201cshifting\u201d refers to moving data backward and forward through time. both series and\ntime series:",
        "aliases": [
          "Time Series"
        ],
        "provenance": [
          {
            "section_path": [
              "Time Series"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "apply techiques to time series data\ntime series data is an important form of structured data in many different fields, such\nor measured at many points in time forms a time series. many time series are fixed\nand refer to time series data depends on the application, and you may have one of the\ntime zone information. this is especially important for historical data because the\ndata based on label:\nslices of data:\nin some applications, there may be multiple data observations falling on a particular\n\u201cshifting\u201d refers to moving data backward and forward through time. both series and\ntime series:"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      }
    ],
    "edges": [
      {
        "id": "edge1",
        "source": "Index_Expression",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "Time_Series_Data_Application",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "Index_Expression",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "Time_Series_Data_Application",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge2",
        "source": "Pandas_time_series_data_manipulation",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge2",
        "source": "Pandas_Time_Series_Resampling",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge3",
        "source": "Index_Expression",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge3",
        "source": "Time_Series_Data_Application",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge3",
        "source": "Index_Expression",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge3",
        "source": "Time_Series_Data_Application",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge4",
        "source": "Index_Expression",
        "target": "5",
        "relation": "hasProperty",
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The Period class represents this data type, requiring a string or integer and a frequency."
          }
        ],
        "confidence": 0.9,
        "rationale": "Understanding periods is essential for effectively working with time series data.",
        "definition": "Time Series Data hasProperty Timespan"
      },
      {
        "id": "edge4",
        "source": "Time_Series_Data_Application",
        "target": "5",
        "relation": "hasProperty",
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The Period class represents this data type, requiring a string or integer and a frequency."
          }
        ],
        "confidence": 0.9,
        "rationale": "Understanding periods is essential for effectively working with time series data.",
        "definition": "Time Series Data hasProperty Timespan"
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "Date_Formatting",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "Datetime_String_Parsing",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "Date_Formatting",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "Datetime_String_Parsing",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_usedBy_3",
        "source": "Date_Formatting",
        "target": "3",
        "relation": "usedBy",
        "definition": "strftime operation usedBy Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The \"strftime operation\" is a method used with Python's datetime objects to format them into strings."
      },
      {
        "id": "e_strftime_operation_usedBy_3",
        "source": "Datetime_String_Parsing",
        "target": "3",
        "relation": "usedBy",
        "definition": "strftime operation usedBy Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The \"strftime operation\" is a method used with Python's datetime objects to format them into strings."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "ts",
        "target": "Index_Expression",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "ts",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "Stamp",
        "target": "Index_Expression",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "Stamp",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "ts",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "ts",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "Stamp",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "Stamp",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Patient_synonymOf_Textual_Statement",
        "source": "Patient",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "Patient synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"pts\" is explicitly given as an abbreviation for \"Patient\"."
      },
      {
        "id": "e_Patient_synonymOf_Textual_Statement",
        "source": "Patient",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "Patient synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"pts\" is explicitly given as an abbreviation for \"Patient\"."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Date_Alignment_and_Period_Calculation",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Current_Date_and_Time_Offset",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Date_Alignment_and_Period_Calculation",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Current_Date_and_Time_Offset",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "current_hour",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "current_hour",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "TimePeriodConversion",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "TimePeriodConversion",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Local_Timezone_Hour",
        "target": "Index_Expression",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Local_Timezone_Hour",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Hour",
        "target": "Index_Expression",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Hour",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Oven_Placement",
        "target": "Index_Expression",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Oven_Placement",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Index_Expression",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Index_Expression",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Index_Expression",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Local_Timezone_Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Oven_Placement",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "resampling_and_grouping_time_series_data",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Date_and_Datetime_Manipulation",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Local_Timezone_Hour",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Local_Timezone_Hour",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Hour",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Hour",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Oven_Placement",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Oven_Placement",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "resampling_and_grouping_time_series_data",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Date_and_Datetime_Manipulation",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Oven_Placement",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Oven_Placement",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Oven_Placement",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "resampling_and_grouping_time_series_data",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Date_Range_Generation_2",
        "target": "Index_Expression",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Date_Range_Generation_2",
        "target": "Time_Series_Data_Application",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Pandas_Date_Range",
        "target": "Index_Expression",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Pandas_Date_Range",
        "target": "Time_Series_Data_Application",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a specific frequency parameter used within the Pandas library for time series data manipulation."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_Time_Series_Resampling",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" (freq='w-wed') is a frequency string that is directly used in Pandas' time series resampling operations, as shown in examples like `frame.resample('w-thu')`."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Date_Range_Generation_2",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Date_Range",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_DatetimeIndexGenerationParameters_uses_DatetimeIndexGenerationParameters",
        "source": "DatetimeIndexGenerationParameters",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "uses",
        "definition": "DatetimeIndexGenerationParameters uses DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Generating Date Ranges"
            ],
            "line_start": 163,
            "line_end": 163,
            "text_excerpt": "generating a datetimeindex with an indicated length according to a particular"
          }
        ],
        "confidence": 1.0,
        "rationale": "The definition of \"DatetimeIndexGenerationParameters\" indicates it's for \"generating a datetimeindex\", and \"Pandas_time_series_data_manipulation\" is a broad category that encompasses such generation."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_1",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "Index_Expression",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"Time Series Data\" as it consists of data points indexed by time (a `DatetimeIndex`)."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_1",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "Time_Series_Data_Application",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"Time Series Data\" as it consists of data points indexed by time (a `DatetimeIndex`)."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_Pandas_time_series_data_manipulation",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The creation of a Pandas Series with a DatetimeIndex is a core operation within \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_isA_1",
        "source": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "target": "Index_Expression",
        "relation": "isA",
        "definition": "Pandas Series with Random Normal Data and Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is a specific type of Time Series Data, characterized by its structure and data source."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_isA_1",
        "source": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "target": "Time_Series_Data_Application",
        "relation": "isA",
        "definition": "Pandas Series with Random Normal Data and Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is a specific type of Time Series Data, characterized by its structure and data source."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_equivalentTo_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "equivalentTo",
        "definition": "Pandas Series with Random Normal Data and Datetime Index equivalentTo Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is essentially the same as this existing concept, differing only in the specific definition of the index generation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node describes the creation of a Pandas DataFrame, which is a core data structure used extensively in Pandas for time series data manipulation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_Time_Series_Resampling",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of the new node `frame = pd.dataframe(np.random.randn(24, 4),` is directly present within the definition of `Pandas_Time_Series_Resampling`, indicating a strong usage relationship."
      },
      {
        "id": "e_Non_Unique_Timestamp_Data_Aggregation_relatedTo_1",
        "source": "Non_Unique_Timestamp_Data_Aggregation",
        "target": "Index_Expression",
        "relation": "relatedTo",
        "definition": "Non-Unique Timestamp Data Aggregation relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Non_Unique_Timestamp_Data_Aggregation_relatedTo_1",
        "source": "Non_Unique_Timestamp_Data_Aggregation",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "Non-Unique Timestamp Data Aggregation relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_1",
        "source": "Irregular_Time_Marking",
        "target": "Index_Expression",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" describes a characteristic of how time is represented or handled, which is relevant to \"Time Series Data\" as time is fundamental to its definition."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_1",
        "source": "Irregular_Time_Marking",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" describes a characteristic of how time is represented or handled, which is relevant to \"Time Series Data\" as time is fundamental to its definition."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Irregular_Time_Marking",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" is a concept that would be encountered and potentially need to be handled during \"Pandas time series data manipulation.\""
      },
      {
        "id": "e_Timedelta_Calculation_relatedTo_Date_and_Time_Operations",
        "source": "Timedelta_Calculation",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "relatedTo",
        "definition": "Timedelta Calculation relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Timedelta_Calculation_relatedTo_Date_and_Time_Operations",
        "source": "Timedelta_Calculation",
        "target": "Current_Date_and_Time_Offset",
        "relation": "relatedTo",
        "definition": "Timedelta Calculation relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Oven_Placement",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Frequency_Conversion_of_Time_Series_Data",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_uses_Pandas_time_series_data_manipulation",
        "source": "DateRangeGeneration",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "DateRangeGeneration uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is defined using `pd.date_range`, which is a fundamental function within the pandas library for time series manipulation."
      },
      {
        "id": "e_DateRangeGeneration_relatedTo_Pandas_Date_Range",
        "source": "DateRangeGeneration",
        "target": "Pandas_Date_Range",
        "relation": "relatedTo",
        "definition": "DateRangeGeneration relatedTo Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is a specific instance or usage of the more general concept \"Pandas_Date_Range\", as both are related to creating date ranges using pandas."
      },
      {
        "id": "e_DateRangeGeneration_relatedTo_Date_Range_Generation_2",
        "source": "DateRangeGeneration",
        "target": "Date_Range_Generation_2",
        "relation": "relatedTo",
        "definition": "DateRangeGeneration relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is very similar to \"Date_Range_Generation_2\" in that both refer to the process of generating date ranges using pandas functions like `pd.date_range`."
      },
      {
        "id": "e_pandas_Series_with_random_data_and_date_index_synonymOf_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "pandas_Series_with_random_data_and_date_index",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "synonymOf",
        "definition": "pandas Series with random data and date index synonymOf Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new node is an exact synonym of this concept."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_uses_Pandas_time_series_data_manipulation",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Fixed-frequency date range generation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Fixed-frequency date range generation\" closely aligns with the functionalities described for Pandas time series data manipulation, specifically mentioning date range generation."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_parameterOf_DatetimeIndexGenerationParameters",
        "source": "Fixed_frequency_date_range_generation",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "parameterOf",
        "definition": "Fixed-frequency date range generation parameterOf DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" implies the use of parameters to define the frequency and extent of the generated dates."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_Date_Range_Generation_2",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Date_Range_Generation_2",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"Fixed-frequency date range generation\" is a specific type of date range generation."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_Pandas_Date_Range",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Pandas_Date_Range",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" is a specific way to generate date ranges, and `pd.date_range` is a primary tool for this in pandas."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_DateRangeGeneration",
        "source": "Fixed_frequency_date_range_generation",
        "target": "DateRangeGeneration",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA DateRangeGeneration",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" is a type of date range generation."
      },
      {
        "id": "e_annual_frame_resampling_uses_Pandas_Time_Series_Resampling",
        "source": "annual_frame_resampling",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "annual_frame_resampling uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 295,
            "line_end": 295,
            "text_excerpt": "annual_frame = frame.resample('a-dec').mean()"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"annual_frame_resampling\" directly shows the use of the `.resample('a-dec').mean()` method, which is a core operation of Pandas Time Series Resampling."
      },
      {
        "id": "e_Regular_interval_data_occurrence_isA_1",
        "source": "Regular_interval_data_occurrence",
        "target": "Index_Expression",
        "relation": "isA",
        "definition": "Regular interval data occurrence isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Regular interval data occurrence\" is a specific type of \"Time Series Data\" where the data points appear at consistent time intervals."
      },
      {
        "id": "e_Regular_interval_data_occurrence_isA_1",
        "source": "Regular_interval_data_occurrence",
        "target": "Time_Series_Data_Application",
        "relation": "isA",
        "definition": "Regular interval data occurrence isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Regular interval data occurrence\" is a specific type of \"Time Series Data\" where the data points appear at consistent time intervals."
      },
      {
        "id": "e_Regular_interval_data_occurrence_relatedTo_Fixed_frequency_date_range_generation",
        "source": "Regular_interval_data_occurrence",
        "target": "Fixed_frequency_date_range_generation",
        "relation": "relatedTo",
        "definition": "Regular interval data occurrence relatedTo Fixed-frequency date range generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Regular interval data occurrence\" is precisely what \"Fixed-frequency date range generation\" aims to produce."
      },
      {
        "id": "e_datetime_arithmetic_operations_partOf_3",
        "source": "datetime_arithmetic_operations",
        "target": "3",
        "relation": "partOf",
        "definition": "datetime arithmetic operations partOf Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" are operations that can be applied to \"Datetime\" objects."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Time_Operations",
        "source": "datetime_arithmetic_operations",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" is a more specific term or a component of general \"Date and Time Operations\"."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Time_Operations",
        "source": "datetime_arithmetic_operations",
        "target": "Current_Date_and_Time_Offset",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" is a more specific term or a component of general \"Date and Time Operations\"."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Datetime_Manipulation",
        "source": "datetime_arithmetic_operations",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" are a form of \"Date and Datetime Manipulation\"."
      },
      {
        "id": "e_Timestamp_object_isA_1",
        "source": "Timestamped_Interval",
        "target": "Index_Expression",
        "relation": "isA",
        "definition": "Timestamp object isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Time Series Data\"."
      },
      {
        "id": "e_Timestamp_object_isA_1",
        "source": "Timestamped_Interval",
        "target": "Time_Series_Data_Application",
        "relation": "isA",
        "definition": "Timestamp object isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Time Series Data\"."
      },
      {
        "id": "e_Timestamp_object_isA_1",
        "source": "Timestamp_selection",
        "target": "Index_Expression",
        "relation": "isA",
        "definition": "Timestamp object isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Time Series Data\"."
      },
      {
        "id": "e_Timestamp_object_isA_1",
        "source": "Timestamp_selection",
        "target": "Time_Series_Data_Application",
        "relation": "isA",
        "definition": "Timestamp object isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Time Series Data\"."
      },
      {
        "id": "e_Timestamp_object_isA_3",
        "source": "Timestamped_Interval",
        "target": "3",
        "relation": "isA",
        "definition": "Timestamp object isA Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Datetime\" object."
      },
      {
        "id": "e_Timestamp_object_isA_3",
        "source": "Timestamp_selection",
        "target": "3",
        "relation": "isA",
        "definition": "Timestamp object isA Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Datetime\" object."
      },
      {
        "id": "e_Timestamp_object_isA_5",
        "source": "Timestamped_Interval",
        "target": "5",
        "relation": "isA",
        "definition": "Timestamp object isA Timespan",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Timespan\" in the context of time series."
      },
      {
        "id": "e_Timestamp_object_isA_5",
        "source": "Timestamp_selection",
        "target": "5",
        "relation": "isA",
        "definition": "Timestamp object isA Timespan",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Timespan\" in the context of time series."
      },
      {
        "id": "e_Timestamp_object_usedBy_Timestamp_creation",
        "source": "Timestamped_Interval",
        "target": "Timestamp_creation",
        "relation": "usedBy",
        "definition": "Timestamp object usedBy Timestamp creation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is the result of a \"Timestamp creation\" process."
      },
      {
        "id": "e_Timestamp_object_usedBy_Timestamp_creation",
        "source": "Timestamp_selection",
        "target": "Timestamp_creation",
        "relation": "usedBy",
        "definition": "Timestamp object usedBy Timestamp creation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is the result of a \"Timestamp creation\" process."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Time_Operations",
        "source": "Timestamped_Interval",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is central to performing \"Date and Time Operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Time_Operations",
        "source": "Timestamp_selection",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is central to performing \"Date and Time Operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Time_Operations",
        "source": "Timestamped_Interval",
        "target": "Current_Date_and_Time_Offset",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is central to performing \"Date and Time Operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Time_Operations",
        "source": "Timestamp_selection",
        "target": "Current_Date_and_Time_Offset",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is central to performing \"Date and Time Operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Non_Unique_Timestamp_Data_Aggregation",
        "source": "Timestamped_Interval",
        "target": "Non_Unique_Timestamp_Data_Aggregation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Non-Unique Timestamp Data Aggregation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is the core concept that can be non-unique and aggregated."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Non_Unique_Timestamp_Data_Aggregation",
        "source": "Timestamp_selection",
        "target": "Non_Unique_Timestamp_Data_Aggregation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Non-Unique Timestamp Data Aggregation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is the core concept that can be non-unique and aggregated."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Datetime_Manipulation",
        "source": "Timestamped_Interval",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is a fundamental type for \"Date and Datetime Manipulation\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Datetime_Manipulation",
        "source": "Timestamp_selection",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is a fundamental type for \"Date and Datetime Manipulation\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_datetime_arithmetic_operations",
        "source": "Timestamped_Interval",
        "target": "datetime_arithmetic_operations",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo datetime arithmetic operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\"s are the operands for \"datetime arithmetic operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_datetime_arithmetic_operations",
        "source": "Timestamp_selection",
        "target": "datetime_arithmetic_operations",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo datetime arithmetic operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\"s are the operands for \"datetime arithmetic operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_ts",
        "source": "Timestamped_Interval",
        "target": "ts",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo ts",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"ts\" is a common abbreviation for a time series, which is composed of \"Timestamp object\"s."
      },
      {
        "id": "e_Timestamp_object_relatedTo_ts",
        "source": "Timestamp_selection",
        "target": "ts",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo ts",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"ts\" is a common abbreviation for a time series, which is composed of \"Timestamp object\"s."
      },
      {
        "id": "e_Timestamp_object_isA_Stamp",
        "source": "Timestamped_Interval",
        "target": "Stamp",
        "relation": "isA",
        "definition": "Timestamp object isA Stamp",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Stamp\" is a synonym for \"Timestamp object\"."
      },
      {
        "id": "e_Timestamp_object_isA_Stamp",
        "source": "Timestamp_selection",
        "target": "Stamp",
        "relation": "isA",
        "definition": "Timestamp object isA Stamp",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Stamp\" is a synonym for \"Timestamp object\"."
      },
      {
        "id": "e_Pandas_HourMinuteOffset_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_HourMinuteOffset",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas HourMinuteOffset uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Frequencies and Date Offsets"
            ],
            "line_start": 183,
            "line_end": 183,
            "text_excerpt": "from pandas.tseries.offsets import hour, minute"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node \"Pandas HourMinuteOffset\" is imported from \"pandas.tseries.offsets\", which is a sub-module of pandas for time series manipulation."
      },
      {
        "id": "e_grouped_mean_relatedTo_grouped_count",
        "source": "grouped_mean",
        "target": "Oven_Placement",
        "relation": "relatedTo",
        "definition": "grouped mean relatedTo grouped count",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_grouped_mean_relatedTo_grouped_count",
        "source": "grouped_mean",
        "target": "Frequency_Conversion_of_Time_Series_Data",
        "relation": "relatedTo",
        "definition": "grouped mean relatedTo grouped count",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_grouped_mean_relatedTo_grouped_count",
        "source": "grouped_mean",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "relatedTo",
        "definition": "grouped mean relatedTo grouped count",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_1",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Index_Expression",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"Arithmetic operations on time series\" directly describes operations on time series, which are fundamentally \"Time Series Data\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_1",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Time_Series_Data_Application",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"Arithmetic operations on time series\" directly describes operations on time series, which are fundamentally \"Time Series Data\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Pandas_time_series_data_manipulation",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of data manipulation on time series, which is a core functionality covered by \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Date_and_Time_Operations",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Arithmetic operations on time series\" is a specific application of general \"Date and Time Operations\" to time series data."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Date_and_Time_Operations",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Current_Date_and_Time_Offset",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Arithmetic operations on time series\" is a specific application of general \"Date and Time Operations\" to time series data."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Timedelta_Calculation",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Timedelta_Calculation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Timedelta Calculation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "Arithmetic operations on time series often result in or involve \"Timedelta Calculation\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Date_and_Datetime_Manipulation",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Arithmetic operations on time series\" is a specialized form of \"Date and Datetime Manipulation\" applied to time series data."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_datetime_arithmetic_operations",
        "source": "Arithmetic_operations_on_time_series",
        "target": "datetime_arithmetic_operations",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses datetime arithmetic operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"datetime arithmetic operations\" applied to time series."
      },
      {
        "id": "e_Quarterly_Resampling_with_Forward_Fill_uses_Pandas_Time_Series_Resampling",
        "source": "Quarterly_Resampling_with_Forward_Fill",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Quarterly Resampling with Forward Fill uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 304,
            "line_end": 304,
            "text_excerpt": "annual_frame.resample('q-mar').ffill()"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific instance of resampling and ffilling, which are core operations described in the Pandas_Time_Series_Resampling node."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_2_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition explicitly mentions `pd.dataframe`, which is a core component of Pandas for data manipulation, and the context of random data creation points towards data preparation for time series."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_2_exampleOf_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "exampleOf",
        "definition": "Pandas DataFrame Creation exampleOf Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The specific example `frame = pd.dataframe(np.random.randn(24, 4),` directly demonstrates a core operation within \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Time_Series_Interval_parameterOf_Pandas_Time_Series_Resampling",
        "source": "Time_Series_Interval",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "parameterOf",
        "definition": "Time Series Interval parameterOf Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 7,
            "line_end": 7,
            "text_excerpt": "rule, such as every 15 seconds, every 5 minutes, or once per month. time series can"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Time Series Interval\" directly corresponds to the frequency parameter used in Pandas' time series resampling operations."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_time_series_data_manipulation",
        "source": "time_series_data_manipulation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node \"Pandas Library Import\" is the standard way to start using the Pandas library, which is explicitly mentioned in the definition of \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node \"Pandas Library Import\" is the standard way to start using the Pandas library, which is explicitly mentioned in the definition of \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_Time_Series_Resampling",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Pandas Time Series Resampling\" includes multiple uses of `pd.` (e.g., `pd.series`, `pd.date_range`, `pd.period`), which indicates it relies on the Pandas library. Importing Pandas is necessary to use these."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_Time_Series_Resampling",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Pandas Time Series Resampling\" includes multiple uses of `pd.` (e.g., `pd.series`, `pd.date_range`, `pd.period`), which indicates it relies on the Pandas library. Importing Pandas is necessary to use these."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_DatetimeIndexGenerationParameters",
        "source": "time_series_data_manipulation",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition refers to \"generating a datetimeindex\", which is a core feature of Pandas. Importing Pandas is a prerequisite for this."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_DatetimeIndexGenerationParameters",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition refers to \"generating a datetimeindex\", which is a core feature of Pandas. Importing Pandas is a prerequisite for this."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(len(rng)), index=rng)` clearly uses Pandas functions (`pd.series`). Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(len(rng)), index=rng)` clearly uses Pandas functions (`pd.series`). Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series with Random Normal Data and Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(6), index=dates)` uses `pd.series`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series with Random Normal Data and Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(6), index=dates)` uses `pd.series`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_DataFrame_Creation",
        "source": "time_series_data_manipulation",
        "target": "Pandas_DataFrame_Creation",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas DataFrame Creation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `frame = pd.dataframe(np.random.randn(24, 4),` explicitly uses `pd.dataframe`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_DataFrame_Creation",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_DataFrame_Creation",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas DataFrame Creation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `frame = pd.dataframe(np.random.randn(24, 4),` explicitly uses `pd.dataframe`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Date_Range_Generation_2",
        "source": "time_series_data_manipulation",
        "target": "Date_Range_Generation_2",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes multiple uses of `pd.date_range`, a core Pandas function for generating date ranges. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Date_Range_Generation_2",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Date_Range_Generation_2",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes multiple uses of `pd.date_range`, a core Pandas function for generating date ranges. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Date_Range",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Date_Range",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `pd.date_range(...)` directly uses a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Date_Range",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Date_Range",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `pd.date_range(...)` directly uses a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_DateRangeGeneration",
        "source": "time_series_data_manipulation",
        "target": "DateRangeGeneration",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy DateRangeGeneration",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `pd.date_range(...)` directly uses a Pandas function for date range generation. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_DateRangeGeneration",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "DateRangeGeneration",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy DateRangeGeneration",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `pd.date_range(...)` directly uses a Pandas function for date range generation. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_pandas_Series_with_random_data_and_date_index",
        "source": "time_series_data_manipulation",
        "target": "pandas_Series_with_random_data_and_date_index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy pandas Series with random data and date index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(6), index=dates)` uses `pd.series`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_pandas_Series_with_random_data_and_date_index",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "pandas_Series_with_random_data_and_date_index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy pandas Series with random data and date index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(6), index=dates)` uses `pd.series`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series Creation with Random Data and Time Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes multiple uses of `pd.series` and `pd.date_range`, which are Pandas functions. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series Creation with Random Data and Time Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes multiple uses of `pd.series` and `pd.date_range`, which are Pandas functions. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Fixed_frequency_date_range_generation",
        "source": "time_series_data_manipulation",
        "target": "Fixed_frequency_date_range_generation",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Fixed-frequency date range generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition mentions \"generating fixed-frequency date ranges\", a primary functionality of `pd.date_range` from Pandas. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Fixed_frequency_date_range_generation",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Fixed_frequency_date_range_generation",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Fixed-frequency date range generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition mentions \"generating fixed-frequency date ranges\", a primary functionality of `pd.date_range` from Pandas. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_annual_frame_resampling",
        "source": "time_series_data_manipulation",
        "target": "annual_frame_resampling",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy annual_frame_resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `annual_frame = frame.resample('a-dec').mean()` uses `resample`, a method common in Pandas for time series data. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_annual_frame_resampling",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "annual_frame_resampling",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy annual_frame_resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `annual_frame = frame.resample('a-dec').mean()` uses `resample`, a method common in Pandas for time series data. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_HourMinuteOffset",
        "source": "time_series_data_manipulation",
        "target": "Pandas_HourMinuteOffset",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas HourMinuteOffset",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `from pandas.tseries.offsets import hour, minute` directly imports components from Pandas. Thus, `import pandas as pd` is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_HourMinuteOffset",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_HourMinuteOffset",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas HourMinuteOffset",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `from pandas.tseries.offsets import hour, minute` directly imports components from Pandas. Thus, `import pandas as pd` is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_uses_resampling_and_grouping_time_series_data",
        "source": "time_series_data_manipulation",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "uses",
        "definition": "Pandas Library Import uses resampling and grouping time series data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes `dup_ts.groupby(level=0)` and `ts.resample('5min', closed='right').sum()`, which are Pandas operations. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_uses_resampling_and_grouping_time_series_data",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "uses",
        "definition": "Pandas Library Import uses resampling and grouping time series data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes `dup_ts.groupby(level=0)` and `ts.resample('5min', closed='right').sum()`, which are Pandas operations. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Quarterly_Resampling_with_Forward_Fill",
        "source": "time_series_data_manipulation",
        "target": "Quarterly_Resampling_with_Forward_Fill",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Quarterly Resampling with Forward Fill",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `annual_frame.resample('q-mar').ffill()` uses Pandas' `resample` and `ffill` methods. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Quarterly_Resampling_with_Forward_Fill",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Quarterly_Resampling_with_Forward_Fill",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Quarterly Resampling with Forward Fill",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `annual_frame.resample('q-mar').ffill()` uses Pandas' `resample` and `ffill` methods. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Frequency_Conversion_of_Time_Series_Data",
        "source": "time_series_data_manipulation",
        "target": "Frequency_Conversion_of_Time_Series_Data",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Frequency Conversion of Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes `p.asfreq('m', how='start')` and `p.asfreq('m', how='end')`, which are Pandas methods for frequency conversion. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Frequency_Conversion_of_Time_Series_Data",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Frequency_Conversion_of_Time_Series_Data",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Frequency Conversion of Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes `p.asfreq('m', how='start')` and `p.asfreq('m', how='end')`, which are Pandas methods for frequency conversion. Importing Pandas is necessary."
      },
      {
        "id": "e_q_dec_uses_Date_Alignment_and_Period_Calculation",
        "source": "q_dec",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "uses",
        "definition": "q-dec uses Date Alignment and Period Calculation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 299,
            "line_end": 299,
            "text_excerpt": "q-dec: quarterly, year ending in december"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"q-dec\" is a specific frequency used in pandas for quarterly resampling with a year-end in December, aligning with the concept of date alignment and period calculation."
      },
      {
        "id": "e_q_dec_uses_Pandas_Time_Series_Resampling",
        "source": "q_dec",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "q-dec uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 299,
            "line_end": 299,
            "text_excerpt": "q-dec: quarterly, year ending in december"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"q-dec\" is a resampling frequency used in pandas for time series data."
      },
      {
        "id": "e_Daily_Resampling_of_Time_Series_partOf_1",
        "source": "Daily_Resampling_of_Time_Series",
        "target": "Index_Expression",
        "relation": "partOf",
        "definition": "Daily Resampling of Time Series partOf Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 146,
            "line_end": 146,
            "text_excerpt": "the sample time series to be fixed daily frequency by calling resample:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Daily Resampling of Time Series\" is a specific type of operation applied to \"Time Series Data\"."
      },
      {
        "id": "e_Daily_Resampling_of_Time_Series_partOf_1",
        "source": "Daily_Resampling_of_Time_Series",
        "target": "Time_Series_Data_Application",
        "relation": "partOf",
        "definition": "Daily Resampling of Time Series partOf Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 146,
            "line_end": 146,
            "text_excerpt": "the sample time series to be fixed daily frequency by calling resample:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Daily Resampling of Time Series\" is a specific type of operation applied to \"Time Series Data\"."
      },
      {
        "id": "e_Wednesday_Frequency_isA_Weekly_Wednesday_Frequency",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Weekly_Wednesday_Frequency",
        "relation": "isA",
        "definition": "Wednesday Frequency isA Weekly Wednesday Frequency",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new node \"Wednesday Frequency\" with definition \"freq='w-wed'),\" is a specific instance or type of \"Weekly Wednesday Frequency\" which has a similar definition."
      },
      {
        "id": "e_datetime_module_isA_3",
        "source": "datetime_module",
        "target": "3",
        "relation": "isA",
        "definition": "datetime module isA Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 26,
            "line_end": 26,
            "text_excerpt": "from datetime import datetime"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"datetime module\" directly refers to the `datetime` class and its functionality, making it a specific instance or module related to the broader concept of \"Datetime\"."
      },
      {
        "id": "e_datetime_module_uses_Timedelta_Calculation",
        "source": "datetime_module",
        "target": "Timedelta_Calculation",
        "relation": "uses",
        "definition": "datetime module uses Timedelta Calculation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 26,
            "line_end": 26,
            "text_excerpt": "from datetime import datetime"
          }
        ],
        "confidence": 0.9,
        "rationale": "The `datetime` module is directly used for performing arithmetic operations that result in timedelta calculations."
      },
      {
        "id": "e_datetime_module_uses_Datetime_String_Parsing",
        "source": "datetime_module",
        "target": "Datetime_String_Parsing",
        "relation": "uses",
        "definition": "datetime module uses Datetime String Parsing",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 26,
            "line_end": 26,
            "text_excerpt": "from datetime import datetime"
          }
        ],
        "confidence": 0.9,
        "rationale": "The `datetime` module's `strptime` function is specifically used for parsing datetime strings."
      },
      {
        "id": "e_datetime_module_uses_Date_and_Datetime_Manipulation",
        "source": "datetime_module",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "uses",
        "definition": "datetime module uses Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 26,
            "line_end": 26,
            "text_excerpt": "from datetime import datetime"
          }
        ],
        "confidence": 0.9,
        "rationale": "The `datetime` module is the fundamental tool for performing various date and datetime manipulations."
      },
      {
        "id": "e_datetime_module_uses_datetime_arithmetic_operations",
        "source": "datetime_module",
        "target": "datetime_arithmetic_operations",
        "relation": "uses",
        "definition": "datetime module uses datetime arithmetic operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 26,
            "line_end": 26,
            "text_excerpt": "from datetime import datetime"
          }
        ],
        "confidence": 0.9,
        "rationale": "The `datetime` module directly supports arithmetic operations on datetime objects."
      },
      {
        "id": "e_Timestamp_relative_to_experiment_or_elapsed_time_relatedTo_Timestamp_object",
        "source": "Timestamp_relative_to_experiment_or_elapsed_time",
        "target": "Timestamped_Interval",
        "relation": "relatedTo",
        "definition": "Timestamp relative to experiment or elapsed time relatedTo Timestamp object",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 14,
            "line_end": 14,
            "text_excerpt": "experiment or elapsed time; each timestamp is a measure of time relative to a"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a type of timestamp object."
      },
      {
        "id": "e_Timestamp_relative_to_experiment_or_elapsed_time_relatedTo_Timestamp_object",
        "source": "Timestamp_relative_to_experiment_or_elapsed_time",
        "target": "Timestamp_selection",
        "relation": "relatedTo",
        "definition": "Timestamp relative to experiment or elapsed time relatedTo Timestamp object",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 14,
            "line_end": 14,
            "text_excerpt": "experiment or elapsed time; each timestamp is a measure of time relative to a"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a type of timestamp object."
      }
    ]
  },
  "10": {
    "meta": {
      "source": "Data Science Programming",
      "extraction_time": "2023-10-01T00:00:00Z",
      "notes_hash": "9d29c95b28d0bb85de79ebd3cb7e51caa37b30856c24f49f797889a749393062",
      "allowed_relations": [
        "isA",
        "partOf",
        "prerequisiteOf",
        "dependsOn",
        "relatedTo",
        "synonymOf",
        "antonymOf",
        "contrastsWith",
        "defines",
        "uses",
        "usedBy",
        "appliesTo",
        "exampleOf",
        "counterexampleOf",
        "illustratedBy",
        "causes",
        "resultsIn",
        "prevents",
        "assumes",
        "implies",
        "equivalentTo",
        "parameterOf",
        "hasParameter",
        "propertyOf",
        "hasProperty",
        "measuredBy",
        "unitOf",
        "representedBy",
        "notationFor",
        "formulaFor",
        "provedBy",
        "theoremOf",
        "algorithmFor",
        "stepOf",
        "produces",
        "consumes",
        "advantageOf",
        "limitationOf",
        "commonErrorIn",
        "misconceptionOf",
        "commonlyConfusedWith",
        "assessedBy"
      ]
    },
    "nodes": [
      {
        "id": "3",
        "label": "Datetime",
        "type": "Concept",
        "definition": "The datetime class in Python provides methods for manipulating dates and times.",
        "aliases": [
          "datetime"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 1.0,
        "rationale": "The description is directly sourced from the lecture notes and defines a key tool in time series analysis."
      },
      {
        "id": "5",
        "label": "Timespan",
        "type": "Concept",
        "definition": "Periods in time series data represent timespans such as days, months, and years.",
        "aliases": [
          "Period"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Periods represent timespans, like days, months, quarters, or years."
          }
        ],
        "confidence": 1.0,
        "rationale": "The explanation of periods and their significance is crucial for understanding time series data."
      },
      {
        "id": "Patient",
        "label": "Patient",
        "type": "Concept",
        "definition": "pts",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timestamp_creation",
        "label": "Timestamp creation",
        "type": "Concept",
        "definition": "stamp = pd.timestamp('2011-03-12 04:00')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_time_series_data_manipulation",
        "label": "Pandas time series data manipulation",
        "type": "Library",
        "definition": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nwith pip or conda), which exposes the olson database, a compilation of world\nimport pytz\npandas is generally oriented toward working with arrays of dates, whether used as an\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for\nfrom pandas.tseries.offsets import hour, minute\ndataframe have a shift method for doing naive shifts forward or backward, leaving\ncolumns=['colorado', 'texas', 'new york', 'ohio'])\ncolumns=['colorado', 'texas', 'new york', 'ohio'])",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Time_Series_Resampling",
        "label": "Pandas Time Series Resampling",
        "type": "Library",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()",
        "aliases": [
          "pandas"
        ],
        "provenance": [
          {
            "section_path": [
              "imports"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "longer_ts = pd.series(np.random.randn(1000),\nindex=pd.date_range('1/1/2023', periods=1000))\ndates = pd.datetimeindex(['1/1/2000', '1/2/2000', '1/2/2000',\ndup_ts = pd.series(np.arange(5), index=dates)\nto do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\nresampler = ts.resample('d')\nts = pd.series(np.random.randn(4),\nindex=pd.date_range('1/1/2000', periods=4, freq='m'))\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\np = pd.period('2007', freq='a-dec')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nts = pd.series(np.random.randn(3), index=rng)\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nts = pd.series(np.random.randn(len(rng)), index=rng)\nrng = pd.date_range('2000-01-01', periods=12, freq='t')\nlabel='right', loffset='-1s').sum()\nframe = pd.dataframe(np.random.randn(2, 4),\nindex=pd.date_range('1/1/2000', periods=2,\nframe.resample('w-thu').ffill()\nframe = pd.dataframe(np.random.randn(24, 4),\nindex=pd.period_range('1-2000', '12-2001',\nannual_frame = frame.resample('a-dec').mean()\nannual_frame.resample('q-dec').ffill()\nannual_frame.resample('q-mar').ffill()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "TimePeriodConversion",
        "label": "TimePeriodConversion",
        "type": "Concept",
        "definition": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "used.\ndelta.days\ndelta.seconds\ndup_ts\nresampler\npts = ts.to_period()\npts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "date_collection",
        "label": "date collection",
        "type": "Concept",
        "definition": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 95,
            "line_end": 95,
            "text_excerpt": "dates = [datetime(2021, 1, 2), datetime(2021, 1, 5),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "UTC_timestamp_localization",
        "label": "UTC timestamp localization",
        "type": "Concept",
        "definition": "stamp_utc = stamp.tz_localize('utc')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 219,
            "line_end": 219,
            "text_excerpt": "stamp_utc = stamp.tz_localize('utc')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Weekly_Wednesday_Frequency",
        "label": "Weekly Wednesday Frequency",
        "type": "Concept",
        "definition": "freq='w-wed'),",
        "aliases": [
          "Wednesday Frequency"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "current_hour",
        "label": "current hour",
        "type": "Concept",
        "definition": "now.hour\nhour = hour()\nhour",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.hour\nhour = hour()\nhour"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "DatetimeIndexGenerationParameters",
        "label": "DatetimeIndexGenerationParameters",
        "type": "Concept",
        "definition": "generating a datetimeindex with an indicated length according to a particular",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Generating Date Ranges"
            ],
            "line_start": 163,
            "line_end": 163,
            "text_excerpt": "generating a datetimeindex with an indicated length according to a particular"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "label": "Pandas Series of Random Normal Data with Datetime Index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(len(rng)), index=rng)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_DataFrame_Creation",
        "label": "Pandas DataFrame Creation",
        "type": "Concept",
        "definition": "frame = pd.dataframe(np.random.randn(24, 4),",
        "aliases": [
          "Pandas DataFrame Creation"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_Range_Generation_2",
        "label": "Date Range Generation",
        "type": "Concept",
        "definition": "pd.date_range('2000-01-01', '2000-12-01', freq='bm')\nrng = pd.date_range('2000-01-01', periods=3, freq='m')\nrng = pd.date_range('2000-01-01', periods=100, freq='d')\nrng = pd.date_range('2000-01-01', periods=12, freq='t')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Date_Range",
        "label": "Pandas Date Range",
        "type": "Concept",
        "definition": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "pd.date_range(start='2012-04-01', periods=20)\npd.date_range(end='2012-06-01', periods=20)"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Local_Timezone_Hour",
        "label": "Local Timezone Hour",
        "type": "Concept",
        "definition": "now = now.astimezone(local_tz)\nnow.hour\nnow.tzinfo\nanother:",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Hour",
        "label": "Hour",
        "type": "Concept",
        "definition": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "hour = hour()\nhour\nfour_hours = hour(4)\nfour_hours"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Non_Unique_Timestamp_Data_Aggregation",
        "label": "Non-Unique Timestamp Data Aggregation",
        "type": "Concept",
        "definition": "suppose you wanted to aggregate the data having non-unique timestamps. one way",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Irregular_Time_Marking",
        "label": "Irregular Time Marking",
        "type": "Concept",
        "definition": "also be irregular without a fixed unit of time or offset between units. how you mark",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timedelta_Calculation",
        "label": "Timedelta Calculation",
        "type": "Concept",
        "definition": "datetime.now() - datetime(2024, 4, 20)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "DateRangeGeneration",
        "label": "DateRangeGeneration",
        "type": "Concept",
        "definition": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "pandas_Series_with_random_data_and_date_index",
        "label": "pandas Series with random data and date index",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(6), index=dates)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Date_and_Datetime_Manipulation",
        "label": "Date and Datetime Manipulation",
        "type": "Concept",
        "definition": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "delta = datetime(2021, 1, 7) - datetime(2008, 6, 24, 8, 15)\nstamp = datetime(2021, 1, 3)\ndatestrs = ['7/6/2021', '8/6/2021']\nkinds of date representations. standard date formats like iso 8601 can be\ndates = [datetime(2021, 1, 2), datetime(2021, 1, 5),\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\n'1/2/2000', '1/3/2000'])\nand generating fixed-frequency date ranges. for , you can convert\ndatetime(2021, 1, 7), datetime(2021, 1, 8),\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "label": "Pandas Series Creation with Random Data and Time Index",
        "type": "Concept",
        "definition": "longer_ts = pd.series(np.random.randn(1000),\nlist(rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.random.randn(3), index=rng)\nts = pd.series(np.random.randn(len(rng)), index=rng)\nts = pd.series(np.arange(12), index=rng)",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "longer_ts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Longer_Time_Series",
        "label": "Longer Time Series",
        "type": "Concept",
        "definition": "longer_ts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 156,
            "line_end": 156,
            "text_excerpt": "longer_ts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Fixed_frequency_date_range_generation",
        "label": "Fixed-frequency date range generation",
        "type": "Concept",
        "definition": "and generating fixed-frequency date ranges. for , you can convert",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "annual_frame_resampling",
        "label": "annual_frame_resampling",
        "type": "Concept",
        "definition": "annual_frame = frame.resample('a-dec').mean()",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 295,
            "line_end": 295,
            "text_excerpt": "annual_frame = frame.resample('a-dec').mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Regular_interval_data_occurrence",
        "label": "Regular interval data occurrence",
        "type": "Concept",
        "definition": "frequency, which is to say that data points occur at regular intervals according to some",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "datetime_arithmetic_operations",
        "label": "datetime arithmetic operations",
        "type": "Concept",
        "definition": "we can apply arithmatic operations on datetime objects:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Datetime_String_Parsing",
        "label": "Datetime String Parsing",
        "type": "Concept",
        "definition": "datetime.strptime(value, '%y-%m-%d')",
        "aliases": [
          "Datetime String Parsing",
          "StringParsingForDateTime"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Exercise:"
            ],
            "line_start": 79,
            "line_end": 79,
            "text_excerpt": "datetime.strptime(value, '%y-%m-%d')"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "ts",
        "label": "ts",
        "type": "Concept",
        "definition": "ts\nts\nts\nts\nts\nts\nts\nts",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts[stamp]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Stamp",
        "label": "Stamp",
        "type": "Concept",
        "definition": "ts[stamp]",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts[stamp]"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_HourMinuteOffset",
        "label": "Pandas HourMinuteOffset",
        "type": "Concept",
        "definition": "from pandas.tseries.offsets import hour, minute",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Frequencies and Date Offsets"
            ],
            "line_start": 183,
            "line_end": 183,
            "text_excerpt": "from pandas.tseries.offsets import hour, minute"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "grouped_mean",
        "label": "grouped mean",
        "type": "Concept",
        "definition": "grouped.mean()",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Arithmetic_operations_on_time_series",
        "label": "Arithmetic operations on time series",
        "type": "Concept",
        "definition": "like other series, arithmetic operations between differently indexed time series automatically",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "LabelBasedData",
        "label": "LabelBasedData",
        "type": "Concept",
        "definition": "data based on label:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Indexing, Selection, Subsetting"
            ],
            "line_start": 110,
            "line_end": 110,
            "text_excerpt": "data based on label:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "resampling_and_grouping_time_series_data",
        "label": "resampling and grouping time series data",
        "type": "Concept",
        "definition": "to do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\ngrouped.count()\nts.resample('5min', closed='right').sum()\nlabel='right', loffset='-1s').sum()",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "to do this is to use groupby and pass level=0:\ngrouped = dup_ts.groupby(level=0)\ngrouped.count()\nts.resample('5min', closed='right').sum()\nlabel='right', loffset='-1s').sum()"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Time_Zone_Handling",
        "label": "Time Zone Handling",
        "type": "Concept",
        "definition": "working with time zones is generally considered one of the most unpleasant parts of\nmean time and is the current international standard. time zones are expressed as\nin python, time zone information comes from the third-party pytz library (installable\ntime zone information. this is especially important for historical data because the\nlocalized from naive to time zone\u2013aware and converted from one time zone to",
        "aliases": [
          "Time Zone Management"
        ],
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "time series in coordinated universal time or utc, which is the successor to greenwich\noffsets from utc; for , new york is four hours behind utc during daylight\nif two time series with different time zones are combined, the result will be utc."
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "UTC_Time_Series_Combination",
        "label": "UTC Time Series Combination",
        "type": "Concept",
        "definition": "time series in coordinated universal time or utc, which is the successor to greenwich\noffsets from utc; for , new york is four hours behind utc during daylight\nif two time series with different time zones are combined, the result will be utc.",
        "aliases": [
          "Time Zone Management"
        ],
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "time series in coordinated universal time or utc, which is the successor to greenwich\noffsets from utc; for , new york is four hours behind utc during daylight\nif two time series with different time zones are combined, the result will be utc."
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Quarterly_Resampling_with_Forward_Fill",
        "label": "Quarterly Resampling with Forward Fill",
        "type": "Concept",
        "definition": "annual_frame.resample('q-mar').ffill()",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 304,
            "line_end": 304,
            "text_excerpt": "annual_frame.resample('q-mar').ffill()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Time_Series_Interval",
        "label": "Time Series Interval",
        "type": "Concept",
        "definition": "rule, such as every 15 seconds, every 5 minutes, or once per month. time series can",
        "aliases": [
          "Time Series Interval Rule"
        ],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 7,
            "line_end": 7,
            "text_excerpt": "rule, such as every 15 seconds, every 5 minutes, or once per month. time series can"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "DeltaSeconds",
        "label": "DeltaSeconds",
        "type": "Concept",
        "definition": "delta.seconds",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 38,
            "line_end": 38,
            "text_excerpt": "delta.seconds"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "CommonTimeZoneList",
        "label": "CommonTimeZoneList",
        "type": "Concept",
        "definition": "for tz in pytz.common_timezones:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Oven_Placement",
        "label": "Oven Placement",
        "type": "Concept",
        "definition": "following:\nbeing placed in the oven)\nimports\np\np\np",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "p.asfreq('m', how='start')\np.asfreq('m', how='end')"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Frequency_Conversion_of_Time_Series_Data",
        "label": "Frequency Conversion of Time Series Data",
        "type": "Concept",
        "definition": "p.asfreq('m', how='start')\np.asfreq('m', how='end')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "p.asfreq('m', how='start')\np.asfreq('m', how='end')"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Date_Alignment_and_Period_Calculation",
        "label": "Date Alignment and Period Calculation",
        "type": "Concept",
        "definition": "value = '2021-01-03'\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\nalign on the dates:\ndatetime(2021, 1, 10), datetime(2021, 1, 12)]\np = pd.period(2007, freq='a-dec')\nlabel='right', loffset='-1s').sum()\nannual_frame\nq-dec: quarterly, year ending in december",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.year, now.month, now.day\nsaving time and five hours behind the rest of the year.\nnow.year"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Current_Date_and_Time_Offset",
        "label": "Current Date and Time Offset",
        "type": "Concept",
        "definition": "now.year, now.month, now.day\nsaving time and five hours behind the rest of the year.\nnow.year",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "now.year, now.month, now.day\nsaving time and five hours behind the rest of the year.\nnow.year"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Date_String_Representation",
        "label": "Date String Representation",
        "type": "Concept",
        "definition": "datestrs = ['2021-07-06 12:00:00', '2021-08-06 00:00:00']",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Exercise:"
            ],
            "line_start": 88,
            "line_end": 88,
            "text_excerpt": "datestrs = ['2021-07-06 12:00:00', '2021-08-06 00:00:00']"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Current_Hour",
        "label": "Current Hour",
        "type": "Concept",
        "definition": "now.hour",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 58,
            "line_end": 58,
            "text_excerpt": "now.hour"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "datetime_string_formatting",
        "label": "datetime string formatting",
        "type": "Concept",
        "definition": "format datetime objects and pandas timestamp objects as strings using str or the strftime method, passing a format specification.",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 66,
            "line_end": 66,
            "text_excerpt": "format datetime objects and pandas timestamp objects as strings using str or the strftime method, passing a format specification."
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "q_dec",
        "label": "q-dec",
        "type": "Concept",
        "definition": "q-dec: quarterly, year ending in december",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 299,
            "line_end": 299,
            "text_excerpt": "q-dec: quarterly, year ending in december"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "time_series_data_manipulation",
        "label": "time series data manipulation",
        "type": "Concept",
        "definition": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pytz\nlonger_ts = pd.series(np.random.randn(1000),\ndup_ts\nts = pd.series(np.random.randn(4),",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nwith pip or conda), which exposes the olson database, a compilation of world\npd.to_datetime(datestrs)\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Datetime_Object_Handling",
        "label": "Pandas Datetime Object Handling",
        "type": "Concept",
        "definition": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nwith pip or conda), which exposes the olson database, a compilation of world\npd.to_datetime(datestrs)\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "as finance, economics, ecology, neuroscience, and physics. anything that is observed\nimport pandas as pd\nwith pip or conda), which exposes the olson database, a compilation of world\npd.to_datetime(datestrs)\nis often represented external to pandas as python strings or datetime objects.\npandas.date_range is responsible for"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Date_Formatting",
        "label": "Date Formatting",
        "type": "Concept",
        "definition": "stamp.strftime('%y-%m-%d')\ns = stamp.strftime('%m/%d/%y')",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "d = datetime.strptime(s, '%m/%d/%y')\ndatetime.strptime(value, '%y-%m-%d')"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Daily_Resampling_of_Time_Series",
        "label": "Daily Resampling of Time Series",
        "type": "Concept",
        "definition": "the sample time series to be fixed daily frequency by calling resample:",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 146,
            "line_end": 146,
            "text_excerpt": "the sample time series to be fixed daily frequency by calling resample:"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "datetime_module",
        "label": "datetime module",
        "type": "Concept",
        "definition": "from datetime import datetime",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 26,
            "line_end": 26,
            "text_excerpt": "from datetime import datetime"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timestamp_relative_to_experiment_or_elapsed_time",
        "label": "Timestamp relative to experiment or elapsed time",
        "type": "Concept",
        "definition": "experiment or elapsed time; each timestamp is a measure of time relative to a",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 14,
            "line_end": 14,
            "text_excerpt": "experiment or elapsed time; each timestamp is a measure of time relative to a"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Period_Range",
        "label": "Pandas Period Range",
        "type": "Concept",
        "definition": "index=pd.period_range('1-2000', '12-2001',",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 291,
            "line_end": 291,
            "text_excerpt": "index=pd.period_range('1-2000', '12-2001',"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Timestamped_Interval",
        "label": "Timestamped Interval",
        "type": "Concept",
        "definition": "intervals of time, indicated by a start and end timestamp. periods can be thought\nexperiment or elapsed time; each timestamp is a measure of time relative to a\nparticular start time (e.g., the diameter of a cookie baking each second since\nsimilar to time series and date ranges, individual timestamp objects similarly can be",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "timestamps, specific instants in time fixed periods, such as the month january 2007 or the full year 2010\nfor longer time series, a year or only a year and month can be passed to easily select\ntimestamp. here is an :\nsince the timestamps are stored under the hood in utc, this is a straightforward"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Timestamp_selection",
        "label": "Timestamp selection",
        "type": "Concept",
        "definition": "timestamps, specific instants in time fixed periods, such as the month january 2007 or the full year 2010\nfor longer time series, a year or only a year and month can be passed to easily select\ntimestamp. here is an :\nsince the timestamps are stored under the hood in utc, this is a straightforward",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "timestamps, specific instants in time fixed periods, such as the month january 2007 or the full year 2010\nfor longer time series, a year or only a year and month can be passed to easily select\ntimestamp. here is an :\nsince the timestamps are stored under the hood in utc, this is a straightforward"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Time_Series_Data_Application",
        "label": "Time Series Data Application",
        "type": "Concept",
        "definition": "apply techiques to time series data\ntime series data is an important form of structured data in many different fields, such\nor measured at many points in time forms a time series. many time series are fixed\nand refer to time series data depends on the application, and you may have one of the\ntime zone information. this is especially important for historical data because the\ndata based on label:\nslices of data:\nin some applications, there may be multiple data observations falling on a particular\n\u201cshifting\u201d refers to moving data backward and forward through time. both series and\ntime series:",
        "aliases": [
          "Time Series"
        ],
        "provenance": [
          {
            "section_path": [
              "Time Series"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "apply techiques to time series data\ntime series data is an important form of structured data in many different fields, such\nor measured at many points in time forms a time series. many time series are fixed\nand refer to time series data depends on the application, and you may have one of the\ntime zone information. this is especially important for historical data because the\ndata based on label:\nslices of data:\nin some applications, there may be multiple data observations falling on a particular\n\u201cshifting\u201d refers to moving data backward and forward through time. both series and\ntime series:"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Oven_placement",
        "label": "Oven placement",
        "type": "Concept",
        "definition": "being placed in the oven)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 16,
            "line_end": 16,
            "text_excerpt": "being placed in the oven)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series",
        "label": "Pandas Series",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(3), index=rng)",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 252,
            "line_end": 252,
            "text_excerpt": "ts = pd.series(np.random.randn(3), index=rng)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Coordinated_Universal_Time",
        "label": "Coordinated Universal Time",
        "type": "Concept",
        "definition": "mean time and is the current international standard. time zones are expressed as",
        "aliases": [],
        "attributes": {},
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 43,
            "line_end": 43,
            "text_excerpt": "mean time and is the current international standard. time zones are expressed as"
          }
        ],
        "confidence": 0.6,
        "rationale": "Added to reduce distortion; under-represented lecture content."
      },
      {
        "id": "Pandas_Series_Indexing_and_Selection",
        "label": "Pandas Series Indexing and Selection",
        "type": "Concept",
        "definition": "time series behaves like any other pandas.series when you are indexing and selecting",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)\nts = pd.series(np.random.randn(4),\nts = pd.series(np.random.randn(3), index=rng)\nframe = pd.dataframe(np.random.randn(2, 4),"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Pandas_Series_and_DataFrame_Creation",
        "label": "Pandas Series and DataFrame Creation",
        "type": "Concept",
        "definition": "ts = pd.series(np.random.randn(6), index=dates)\nts = pd.series(np.random.randn(4),\nts = pd.series(np.random.randn(3), index=rng)\nframe = pd.dataframe(np.random.randn(2, 4),",
        "aliases": [],
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)\nts = pd.series(np.random.randn(4),\nts = pd.series(np.random.randn(3), index=rng)\nframe = pd.dataframe(np.random.randn(2, 4),"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Timestamp_Selection_from_Time_Series_Data",
        "label": "Timestamp Selection from Time Series Data",
        "type": "Concept",
        "definition": "timestamps, specific instants in time fixed periods, such as the month january 2007 or the full year 2010\nfor longer time series, a year or only a year and month can be passed to easily select\ntimestamp. here is an :\n'1/2/2000', '1/3/2000'])\nget dates like the third friday of each month:\nsince the timestamps are stored under the hood in utc, this is a straightforward",
        "aliases": [
          "Time Series"
        ],
        "provenance": [
          {
            "section_path": [
              "Time Series"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "used.\nchanged numerous times depending on the whims of local governments. in the united\npts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      },
      {
        "id": "Local_Government_Policy_Changes",
        "label": "Local Government Policy Changes",
        "type": "Concept",
        "definition": "used.\nchanged numerous times depending on the whims of local governments. in the united\npts",
        "aliases": [
          "Time Series"
        ],
        "provenance": [
          {
            "section_path": [
              "Time Series"
            ],
            "line_start": 1,
            "line_end": 1,
            "text_excerpt": "used.\nchanged numerous times depending on the whims of local governments. in the united\npts"
          }
        ],
        "attributes": {},
        "confidence": 0.55,
        "rationale": "Split concept with diverse coupling."
      }
    ],
    "edges": [
      {
        "id": "edge1",
        "source": "Timestamp_Selection_from_Time_Series_Data",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "Local_Government_Policy_Changes",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "Time_Series_Data_Application",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "Timestamp_Selection_from_Time_Series_Data",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "Local_Government_Policy_Changes",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge1",
        "source": "Time_Series_Data_Application",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "provenance": [
          {
            "section_path": [
              "Time Series Basics"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "A basic kind of time series object in pandas is a Series indexed by timestamps."
          }
        ],
        "confidence": 0.9,
        "rationale": "Time series data is often manipulated using the Pandas library, establishing a strong usage relation.",
        "definition": "Time Series Data uses Pandas"
      },
      {
        "id": "edge2",
        "source": "Pandas_time_series_data_manipulation",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge2",
        "source": "Pandas_Time_Series_Resampling",
        "target": "3",
        "relation": "dependsOn",
        "provenance": [
          {
            "section_path": [
              "Date and Time Data Types and Tools"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The datetime, time, and calendar modules are the main places to start."
          }
        ],
        "confidence": 0.8,
        "rationale": "Pandas operations often rely on datetime for handling date and time data.",
        "definition": "Pandas dependsOn Datetime"
      },
      {
        "id": "edge3",
        "source": "Timestamp_Selection_from_Time_Series_Data",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge3",
        "source": "Local_Government_Policy_Changes",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge3",
        "source": "Time_Series_Data_Application",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge3",
        "source": "Timestamp_Selection_from_Time_Series_Data",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge3",
        "source": "Local_Government_Policy_Changes",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge3",
        "source": "Time_Series_Data_Application",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "provenance": [
          {
            "section_path": [
              "Time Zone Handling"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "Time zones are expressed as offsets from UTC..."
          }
        ],
        "confidence": 0.85,
        "rationale": "Time series analysis often requires adequate handling of time zones to ensure accurate representation of time data.",
        "definition": "Time Series Data relatedTo Time Zone Handling"
      },
      {
        "id": "edge4",
        "source": "Timestamp_Selection_from_Time_Series_Data",
        "target": "5",
        "relation": "hasProperty",
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The Period class represents this data type, requiring a string or integer and a frequency."
          }
        ],
        "confidence": 0.9,
        "rationale": "Understanding periods is essential for effectively working with time series data.",
        "definition": "Time Series Data hasProperty Timespan"
      },
      {
        "id": "edge4",
        "source": "Local_Government_Policy_Changes",
        "target": "5",
        "relation": "hasProperty",
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The Period class represents this data type, requiring a string or integer and a frequency."
          }
        ],
        "confidence": 0.9,
        "rationale": "Understanding periods is essential for effectively working with time series data.",
        "definition": "Time Series Data hasProperty Timespan"
      },
      {
        "id": "edge4",
        "source": "Time_Series_Data_Application",
        "target": "5",
        "relation": "hasProperty",
        "provenance": [
          {
            "section_path": [
              "Periods and Period Arithmetic"
            ],
            "line_start": 0,
            "line_end": 0,
            "text_excerpt": "The Period class represents this data type, requiring a string or integer and a frequency."
          }
        ],
        "confidence": 0.9,
        "rationale": "Understanding periods is essential for effectively working with time series data.",
        "definition": "Time Series Data hasProperty Timespan"
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "Date_Formatting",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "Datetime_String_Parsing",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "Date_Formatting",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_uses_2",
        "source": "Datetime_String_Parsing",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "strftime operation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The example provided for \"strftime operation\" (`strftime('%y-%m-%d')`) is a common operation within the \"Pandas\" library for formatting datetime objects."
      },
      {
        "id": "e_strftime_operation_usedBy_3",
        "source": "Date_Formatting",
        "target": "3",
        "relation": "usedBy",
        "definition": "strftime operation usedBy Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The \"strftime operation\" is a method used with Python's datetime objects to format them into strings."
      },
      {
        "id": "e_strftime_operation_usedBy_3",
        "source": "Datetime_String_Parsing",
        "target": "3",
        "relation": "usedBy",
        "definition": "strftime operation usedBy Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling",
              "Converting Between String and Datetime"
            ],
            "line_start": 70,
            "line_end": 70,
            "text_excerpt": "stamp.strftime('%y-%m-%d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The \"strftime operation\" is a method used with Python's datetime objects to format them into strings."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "ts",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "ts",
        "target": "Local_Government_Policy_Changes",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "ts",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "Stamp",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "Stamp",
        "target": "Local_Government_Policy_Changes",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_1",
        "source": "Stamp",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "A textual statement could be used to describe or annotate time series data, providing context or interpretations."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "ts",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "ts",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "Stamp",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Textual_Statement_relatedTo_4",
        "source": "Stamp",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "Textual Statement relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Downsampling"
            ],
            "line_start": 267,
            "line_end": 267,
            "text_excerpt": "ts"
          }
        ],
        "confidence": 0.7,
        "rationale": "Textual statements can be used to explain or document time zone handling strategies or issues."
      },
      {
        "id": "e_Patient_synonymOf_Textual_Statement",
        "source": "Patient",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "Patient synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Converting Timestamps to Periods (and Back)"
            ],
            "line_start": 255,
            "line_end": 255,
            "text_excerpt": "pts"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"pts\" is explicitly given as an abbreviation for \"Patient\"."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Date_Alignment_and_Period_Calculation",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Current_Date_and_Time_Offset",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Date_Alignment_and_Period_Calculation",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "Current_Date_and_Time_Offset",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "current_hour",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "current_hour",
        "target": "Stamp",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Paragraph_synonymOf_Textual_Statement",
        "source": "TimePeriodConversion",
        "target": "ts",
        "relation": "synonymOf",
        "definition": "'Paragraph' synonymOf Textual Statement",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Periods and Period Arithmetic",
              "Period Frequency Conversion"
            ],
            "line_start": 242,
            "line_end": 242,
            "text_excerpt": "p"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Paragraph\" is a type of \"Textual Statement\" where the definition \"p\" is a shorthand for a paragraph."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_Timestamp_creation_uses_2",
        "source": "Timestamp_creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Timestamp creation uses Pandas",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 218,
            "line_end": 218,
            "text_excerpt": "stamp = pd.timestamp('2011-03-12 04:00')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"Timestamp creation\" explicitly uses `pd.timestamp`, indicating that \"Pandas\" (which is aliased as `pd` in the example) is used."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Local_Timezone_Hour",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Local_Timezone_Hour",
        "target": "Local_Government_Policy_Changes",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Local_Timezone_Hour",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Hour",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Hour",
        "target": "Local_Government_Policy_Changes",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Hour",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Oven_Placement",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Oven_Placement",
        "target": "Local_Government_Policy_Changes",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Oven_Placement",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Local_Government_Policy_Changes",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Local_Government_Policy_Changes",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Local_Government_Policy_Changes",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_relatedTo_1",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The concept \"tzinfo\" is a direct component used within time zone handling, which is crucial for time series data."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Local_Timezone_Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Hour",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Oven_Placement",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "resampling_and_grouping_time_series_data",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_uses_3",
        "source": "Date_and_Datetime_Manipulation",
        "target": "3",
        "relation": "uses",
        "definition": "tzinfo uses Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is a component that provides timezone information for datetime objects."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Local_Timezone_Hour",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Local_Timezone_Hour",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Hour",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Hour",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Oven_Placement",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Oven_Placement",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "resampling_and_grouping_time_series_data",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Time_Zone_Handling",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_relatedTo_4",
        "source": "Date_and_Datetime_Manipulation",
        "target": "UTC_Time_Series_Combination",
        "relation": "relatedTo",
        "definition": "tzinfo relatedTo Time Zone Handling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"tzinfo\" is directly related to \"Time Zone Handling\" as it provides the timezone data."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Oven_Placement",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Oven_Placement",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "resampling_and_grouping_time_series_data",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "Current_Date_and_Time_Offset",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Local_Timezone_Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Hour",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Oven_Placement",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Frequency_Conversion_of_Time_Series_Data",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "resampling_and_grouping_time_series_data",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_tzinfo_hasProperty_Current_Date_and_Time_Information",
        "source": "Date_and_Datetime_Manipulation",
        "target": "current_hour",
        "relation": "hasProperty",
        "definition": "tzinfo hasProperty Current Date and Time Information",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 62,
            "line_end": 62,
            "text_excerpt": "for tz in pytz.common_timezones:"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition for \"Current Date and Time Information\" explicitly shows `now.tzinfo`, indicating that tzinfo is a property of current date and time objects."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Date_Range_Generation_2",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Date_Range_Generation_2",
        "target": "Local_Government_Policy_Changes",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Date_Range_Generation_2",
        "target": "Time_Series_Data_Application",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Pandas_Date_Range",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Pandas_Date_Range",
        "target": "Local_Government_Policy_Changes",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Date_Range_Generation_isA_1",
        "source": "Pandas_Date_Range",
        "target": "Time_Series_Data_Application",
        "relation": "isA",
        "definition": "Date Range Generation isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 258,
            "line_end": 258,
            "text_excerpt": "rng = pd.date_range('2000-01-01', periods=100, freq='d')"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Date Range Generation\" is a specific type of \"Time Series Data\" as it creates a sequence of data points indexed in time order."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a specific frequency parameter used within the Pandas library for time series data manipulation."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Pandas_Time_Series_Resampling",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" (freq='w-wed') is a frequency string that is directly used in Pandas' time series resampling operations, as shown in examples like `frame.resample('w-thu')`."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Date_Range_Generation_2",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_Weekly_Wednesday_Frequency_relatedTo_Date_Range_Generation",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Pandas_Date_Range",
        "relation": "relatedTo",
        "definition": "Weekly Wednesday Frequency relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept \"Weekly Wednesday Frequency\" is a type of frequency parameter that can be used in Pandas' `date_range` function to generate sequences of dates with a specific weekly pattern."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_1",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"Time Series Data\" as it consists of data points indexed by time (a `DatetimeIndex`)."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_1",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "Local_Government_Policy_Changes",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"Time Series Data\" as it consists of data points indexed by time (a `DatetimeIndex`)."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_1",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "Time_Series_Data_Application",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"Time Series Data\" as it consists of data points indexed by time (a `DatetimeIndex`)."
      },
      {
        "id": "e_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index_isA_Pandas_time_series_data_manipulation",
        "source": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "isA",
        "definition": "Pandas Series of Random Normal Data with Datetime Index isA Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion"
            ],
            "line_start": 259,
            "line_end": 259,
            "text_excerpt": "ts = pd.series(np.random.randn(len(rng)), index=rng)"
          }
        ],
        "confidence": 0.9,
        "rationale": "The creation of a Pandas Series with a DatetimeIndex is a core operation within \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_isA_1",
        "source": "Pandas_Series_Indexing_and_Selection",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "isA",
        "definition": "Pandas Series with Random Normal Data and Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is a specific type of Time Series Data, characterized by its structure and data source."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_isA_1",
        "source": "Pandas_Series_Indexing_and_Selection",
        "target": "Local_Government_Policy_Changes",
        "relation": "isA",
        "definition": "Pandas Series with Random Normal Data and Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is a specific type of Time Series Data, characterized by its structure and data source."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_isA_1",
        "source": "Pandas_Series_and_DataFrame_Creation",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "isA",
        "definition": "Pandas Series with Random Normal Data and Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is a specific type of Time Series Data, characterized by its structure and data source."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_isA_1",
        "source": "Pandas_Series_and_DataFrame_Creation",
        "target": "Local_Government_Policy_Changes",
        "relation": "isA",
        "definition": "Pandas Series with Random Normal Data and Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is a specific type of Time Series Data, characterized by its structure and data source."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_isA_1",
        "source": "Pandas_Series_Indexing_and_Selection",
        "target": "Time_Series_Data_Application",
        "relation": "isA",
        "definition": "Pandas Series with Random Normal Data and Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is a specific type of Time Series Data, characterized by its structure and data source."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_isA_1",
        "source": "Pandas_Series_and_DataFrame_Creation",
        "target": "Time_Series_Data_Application",
        "relation": "isA",
        "definition": "Pandas Series with Random Normal Data and Datetime Index isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is a specific type of Time Series Data, characterized by its structure and data source."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_equivalentTo_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "Pandas_Series_Indexing_and_Selection",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "equivalentTo",
        "definition": "Pandas Series with Random Normal Data and Datetime Index equivalentTo Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is essentially the same as this existing concept, differing only in the specific definition of the index generation."
      },
      {
        "id": "e_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index_equivalentTo_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "Pandas_Series_and_DataFrame_Creation",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "equivalentTo",
        "definition": "Pandas Series with Random Normal Data and Datetime Index equivalentTo Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 152,
            "line_end": 152,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new concept is essentially the same as this existing concept, differing only in the specific definition of the index generation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node describes the creation of a Pandas DataFrame, which is a core data structure used extensively in Pandas for time series data manipulation."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_uses_Pandas_Time_Series_Resampling",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of the new node `frame = pd.dataframe(np.random.randn(24, 4),` is directly present within the definition of `Pandas_Time_Series_Resampling`, indicating a strong usage relationship."
      },
      {
        "id": "e_Non_Unique_Timestamp_Data_Aggregation_relatedTo_1",
        "source": "Non_Unique_Timestamp_Data_Aggregation",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "relatedTo",
        "definition": "Non-Unique Timestamp Data Aggregation relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Non_Unique_Timestamp_Data_Aggregation_relatedTo_1",
        "source": "Non_Unique_Timestamp_Data_Aggregation",
        "target": "Local_Government_Policy_Changes",
        "relation": "relatedTo",
        "definition": "Non-Unique Timestamp Data Aggregation relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Non_Unique_Timestamp_Data_Aggregation_relatedTo_1",
        "source": "Non_Unique_Timestamp_Data_Aggregation",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "Non-Unique Timestamp Data Aggregation relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 133,
            "line_end": 133,
            "text_excerpt": "suppose you wanted to aggregate the data having non-unique timestamps. one way"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_1",
        "source": "Irregular_Time_Marking",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" describes a characteristic of how time is represented or handled, which is relevant to \"Time Series Data\" as time is fundamental to its definition."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_1",
        "source": "Irregular_Time_Marking",
        "target": "Local_Government_Policy_Changes",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" describes a characteristic of how time is represented or handled, which is relevant to \"Time Series Data\" as time is fundamental to its definition."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_1",
        "source": "Irregular_Time_Marking",
        "target": "Time_Series_Data_Application",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" describes a characteristic of how time is represented or handled, which is relevant to \"Time Series Data\" as time is fundamental to its definition."
      },
      {
        "id": "e_Irregular_Time_Marking_relatedTo_Pandas_time_series_data_manipulation",
        "source": "Irregular_Time_Marking",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "relatedTo",
        "definition": "Irregular Time Marking relatedTo Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 8,
            "line_end": 8,
            "text_excerpt": "also be irregular without a fixed unit of time or offset between units. how you mark"
          }
        ],
        "confidence": 0.8,
        "rationale": "\"Irregular Time Marking\" is a concept that would be encountered and potentially need to be handled during \"Pandas time series data manipulation.\""
      },
      {
        "id": "e_Timedelta_Calculation_relatedTo_Date_and_Time_Operations",
        "source": "Timedelta_Calculation",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "relatedTo",
        "definition": "Timedelta Calculation relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Timedelta_Calculation_relatedTo_Date_and_Time_Operations",
        "source": "Timedelta_Calculation",
        "target": "Current_Date_and_Time_Offset",
        "relation": "relatedTo",
        "definition": "Timedelta Calculation relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 32,
            "line_end": 32,
            "text_excerpt": "datetime.now() - datetime(2024, 4, 20)"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Oven_Placement",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Frequency_Conversion_of_Time_Series_Data",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_isA_Date_range",
        "source": "DateRangeGeneration",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "isA",
        "definition": "DateRangeGeneration isA Date range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" explicitly uses `pd.date_range`, which is a method for generating a date range. The existing concept \"Date_range\" refers to a collection of dates, which is a direct outcome or representation of generating a date range."
      },
      {
        "id": "e_DateRangeGeneration_uses_Pandas_time_series_data_manipulation",
        "source": "DateRangeGeneration",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "DateRangeGeneration uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is defined using `pd.date_range`, which is a fundamental function within the pandas library for time series manipulation."
      },
      {
        "id": "e_DateRangeGeneration_relatedTo_Pandas_Date_Range",
        "source": "DateRangeGeneration",
        "target": "Pandas_Date_Range",
        "relation": "relatedTo",
        "definition": "DateRangeGeneration relatedTo Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is a specific instance or usage of the more general concept \"Pandas_Date_Range\", as both are related to creating date ranges using pandas."
      },
      {
        "id": "e_DateRangeGeneration_relatedTo_Date_Range_Generation_2",
        "source": "DateRangeGeneration",
        "target": "Date_Range_Generation_2",
        "relation": "relatedTo",
        "definition": "DateRangeGeneration relatedTo Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Time Zone Localization and Conversion"
            ],
            "line_start": 210,
            "line_end": 210,
            "text_excerpt": "rng = pd.date_range('3/9/2012 9:30', periods=6, freq='d')"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"DateRangeGeneration\" is very similar to \"Date_Range_Generation_2\" in that both refer to the process of generating date ranges using pandas functions like `pd.date_range`."
      },
      {
        "id": "e_pandas_Series_with_random_data_and_date_index_synonymOf_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "pandas_Series_with_random_data_and_date_index",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "synonymOf",
        "definition": "pandas Series with random data and date index synonymOf Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 98,
            "line_end": 98,
            "text_excerpt": "ts = pd.series(np.random.randn(6), index=dates)"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new node is an exact synonym of this concept."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_uses_Pandas_time_series_data_manipulation",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Fixed-frequency date range generation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Fixed-frequency date range generation\" closely aligns with the functionalities described for Pandas time series data manipulation, specifically mentioning date range generation."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_parameterOf_DatetimeIndexGenerationParameters",
        "source": "Fixed_frequency_date_range_generation",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "parameterOf",
        "definition": "Fixed-frequency date range generation parameterOf DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" implies the use of parameters to define the frequency and extent of the generated dates."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_Date_Range_Generation_2",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Date_Range_Generation_2",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"Fixed-frequency date range generation\" is a specific type of date range generation."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_Pandas_Date_Range",
        "source": "Fixed_frequency_date_range_generation",
        "target": "Pandas_Date_Range",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" is a specific way to generate date ranges, and `pd.date_range` is a primary tool for this in pandas."
      },
      {
        "id": "e_Fixed_frequency_date_range_generation_isA_DateRangeGeneration",
        "source": "Fixed_frequency_date_range_generation",
        "target": "DateRangeGeneration",
        "relation": "isA",
        "definition": "Fixed-frequency date range generation isA DateRangeGeneration",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 145,
            "line_end": 145,
            "text_excerpt": "and generating fixed-frequency date ranges. for , you can convert"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Fixed-frequency date range generation\" is a type of date range generation."
      },
      {
        "id": "e_annual_frame_resampling_uses_Pandas_Time_Series_Resampling",
        "source": "annual_frame_resampling",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "annual_frame_resampling uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 295,
            "line_end": 295,
            "text_excerpt": "annual_frame = frame.resample('a-dec').mean()"
          }
        ],
        "confidence": 0.95,
        "rationale": "The definition of \"annual_frame_resampling\" directly shows the use of the `.resample('a-dec').mean()` method, which is a core operation of Pandas Time Series Resampling."
      },
      {
        "id": "e_Regular_interval_data_occurrence_isA_1",
        "source": "Regular_interval_data_occurrence",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "isA",
        "definition": "Regular interval data occurrence isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Regular interval data occurrence\" is a specific type of \"Time Series Data\" where the data points appear at consistent time intervals."
      },
      {
        "id": "e_Regular_interval_data_occurrence_isA_1",
        "source": "Regular_interval_data_occurrence",
        "target": "Local_Government_Policy_Changes",
        "relation": "isA",
        "definition": "Regular interval data occurrence isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Regular interval data occurrence\" is a specific type of \"Time Series Data\" where the data points appear at consistent time intervals."
      },
      {
        "id": "e_Regular_interval_data_occurrence_isA_1",
        "source": "Regular_interval_data_occurrence",
        "target": "Time_Series_Data_Application",
        "relation": "isA",
        "definition": "Regular interval data occurrence isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Regular interval data occurrence\" is a specific type of \"Time Series Data\" where the data points appear at consistent time intervals."
      },
      {
        "id": "e_Regular_interval_data_occurrence_relatedTo_Fixed_frequency_date_range_generation",
        "source": "Regular_interval_data_occurrence",
        "target": "Fixed_frequency_date_range_generation",
        "relation": "relatedTo",
        "definition": "Regular interval data occurrence relatedTo Fixed-frequency date range generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 6,
            "line_end": 6,
            "text_excerpt": "frequency, which is to say that data points occur at regular intervals according to some"
          }
        ],
        "confidence": 1.0,
        "rationale": "\"Regular interval data occurrence\" is precisely what \"Fixed-frequency date range generation\" aims to produce."
      },
      {
        "id": "e_datetime_arithmetic_operations_partOf_3",
        "source": "datetime_arithmetic_operations",
        "target": "3",
        "relation": "partOf",
        "definition": "datetime arithmetic operations partOf Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" are operations that can be applied to \"Datetime\" objects."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Time_Operations",
        "source": "datetime_arithmetic_operations",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" is a more specific term or a component of general \"Date and Time Operations\"."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Time_Operations",
        "source": "datetime_arithmetic_operations",
        "target": "Current_Date_and_Time_Offset",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" is a more specific term or a component of general \"Date and Time Operations\"."
      },
      {
        "id": "e_datetime_arithmetic_operations_relatedTo_Date_and_Datetime_Manipulation",
        "source": "datetime_arithmetic_operations",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "relatedTo",
        "definition": "datetime arithmetic operations relatedTo Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 30,
            "line_end": 30,
            "text_excerpt": "we can apply arithmatic operations on datetime objects:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"datetime arithmetic operations\" are a form of \"Date and Datetime Manipulation\"."
      },
      {
        "id": "e_Timestamp_object_isA_1",
        "source": "Timestamped_Interval",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "isA",
        "definition": "Timestamp object isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Time Series Data\"."
      },
      {
        "id": "e_Timestamp_object_isA_1",
        "source": "Timestamped_Interval",
        "target": "Local_Government_Policy_Changes",
        "relation": "isA",
        "definition": "Timestamp object isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Time Series Data\"."
      },
      {
        "id": "e_Timestamp_object_isA_1",
        "source": "Timestamped_Interval",
        "target": "Time_Series_Data_Application",
        "relation": "isA",
        "definition": "Timestamp object isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Time Series Data\"."
      },
      {
        "id": "e_Timestamp_object_isA_1",
        "source": "Timestamp_selection",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "isA",
        "definition": "Timestamp object isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Time Series Data\"."
      },
      {
        "id": "e_Timestamp_object_isA_1",
        "source": "Timestamp_selection",
        "target": "Local_Government_Policy_Changes",
        "relation": "isA",
        "definition": "Timestamp object isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Time Series Data\"."
      },
      {
        "id": "e_Timestamp_object_isA_1",
        "source": "Timestamp_selection",
        "target": "Time_Series_Data_Application",
        "relation": "isA",
        "definition": "Timestamp object isA Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Time Series Data\"."
      },
      {
        "id": "e_Timestamp_object_isA_3",
        "source": "Timestamped_Interval",
        "target": "3",
        "relation": "isA",
        "definition": "Timestamp object isA Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Datetime\" object."
      },
      {
        "id": "e_Timestamp_object_isA_3",
        "source": "Timestamp_selection",
        "target": "3",
        "relation": "isA",
        "definition": "Timestamp object isA Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Datetime\" object."
      },
      {
        "id": "e_Timestamp_object_isA_5",
        "source": "Timestamped_Interval",
        "target": "5",
        "relation": "isA",
        "definition": "Timestamp object isA Timespan",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Timespan\" in the context of time series."
      },
      {
        "id": "e_Timestamp_object_isA_5",
        "source": "Timestamp_selection",
        "target": "5",
        "relation": "isA",
        "definition": "Timestamp object isA Timespan",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is a specific type of \"Timespan\" in the context of time series."
      },
      {
        "id": "e_Timestamp_object_usedBy_Timestamp_creation",
        "source": "Timestamped_Interval",
        "target": "Timestamp_creation",
        "relation": "usedBy",
        "definition": "Timestamp object usedBy Timestamp creation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is the result of a \"Timestamp creation\" process."
      },
      {
        "id": "e_Timestamp_object_usedBy_Timestamp_creation",
        "source": "Timestamp_selection",
        "target": "Timestamp_creation",
        "relation": "usedBy",
        "definition": "Timestamp object usedBy Timestamp creation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "A \"Timestamp object\" is the result of a \"Timestamp creation\" process."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Time_Operations",
        "source": "Timestamped_Interval",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is central to performing \"Date and Time Operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Time_Operations",
        "source": "Timestamp_selection",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is central to performing \"Date and Time Operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Time_Operations",
        "source": "Timestamped_Interval",
        "target": "Current_Date_and_Time_Offset",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is central to performing \"Date and Time Operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Time_Operations",
        "source": "Timestamp_selection",
        "target": "Current_Date_and_Time_Offset",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is central to performing \"Date and Time Operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Non_Unique_Timestamp_Data_Aggregation",
        "source": "Timestamped_Interval",
        "target": "Non_Unique_Timestamp_Data_Aggregation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Non-Unique Timestamp Data Aggregation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is the core concept that can be non-unique and aggregated."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Non_Unique_Timestamp_Data_Aggregation",
        "source": "Timestamp_selection",
        "target": "Non_Unique_Timestamp_Data_Aggregation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Non-Unique Timestamp Data Aggregation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is the core concept that can be non-unique and aggregated."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Datetime_Manipulation",
        "source": "Timestamped_Interval",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is a fundamental type for \"Date and Datetime Manipulation\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_Date_and_Datetime_Manipulation",
        "source": "Timestamp_selection",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\" is a fundamental type for \"Date and Datetime Manipulation\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_datetime_arithmetic_operations",
        "source": "Timestamped_Interval",
        "target": "datetime_arithmetic_operations",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo datetime arithmetic operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\"s are the operands for \"datetime arithmetic operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_datetime_arithmetic_operations",
        "source": "Timestamp_selection",
        "target": "datetime_arithmetic_operations",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo datetime arithmetic operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Timestamp object\"s are the operands for \"datetime arithmetic operations\"."
      },
      {
        "id": "e_Timestamp_object_relatedTo_ts",
        "source": "Timestamped_Interval",
        "target": "ts",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo ts",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"ts\" is a common abbreviation for a time series, which is composed of \"Timestamp object\"s."
      },
      {
        "id": "e_Timestamp_object_relatedTo_ts",
        "source": "Timestamp_selection",
        "target": "ts",
        "relation": "relatedTo",
        "definition": "Timestamp object relatedTo ts",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"ts\" is a common abbreviation for a time series, which is composed of \"Timestamp object\"s."
      },
      {
        "id": "e_Timestamp_object_isA_Stamp",
        "source": "Timestamped_Interval",
        "target": "Stamp",
        "relation": "isA",
        "definition": "Timestamp object isA Stamp",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Stamp\" is a synonym for \"Timestamp object\"."
      },
      {
        "id": "e_Timestamp_object_isA_Stamp",
        "source": "Timestamp_selection",
        "target": "Stamp",
        "relation": "isA",
        "definition": "Timestamp object isA Stamp",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling in Pandas",
              "Operations with Time Zone\u2212Aware Timestamp Objects"
            ],
            "line_start": 214,
            "line_end": 214,
            "text_excerpt": "similar to time series and date ranges, individual timestamp objects similarly can be"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Stamp\" is a synonym for \"Timestamp object\"."
      },
      {
        "id": "e_Pandas_HourMinuteOffset_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_HourMinuteOffset",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas HourMinuteOffset uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting",
              "Frequencies and Date Offsets"
            ],
            "line_start": 183,
            "line_end": 183,
            "text_excerpt": "from pandas.tseries.offsets import hour, minute"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node \"Pandas HourMinuteOffset\" is imported from \"pandas.tseries.offsets\", which is a sub-module of pandas for time series manipulation."
      },
      {
        "id": "e_grouped_mean_relatedTo_grouped_count",
        "source": "grouped_mean",
        "target": "Oven_Placement",
        "relation": "relatedTo",
        "definition": "grouped mean relatedTo grouped count",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_grouped_mean_relatedTo_grouped_count",
        "source": "grouped_mean",
        "target": "Frequency_Conversion_of_Time_Series_Data",
        "relation": "relatedTo",
        "definition": "grouped mean relatedTo grouped count",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_grouped_mean_relatedTo_grouped_count",
        "source": "grouped_mean",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "relatedTo",
        "definition": "grouped mean relatedTo grouped count",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics",
              "Time Series with Duplicate Indices"
            ],
            "line_start": 137,
            "line_end": 137,
            "text_excerpt": "grouped.mean()"
          }
        ],
        "confidence": 0.6,
        "rationale": "Heuristic relation based on semantic proximity."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_1",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"Arithmetic operations on time series\" directly describes operations on time series, which are fundamentally \"Time Series Data\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_1",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Local_Government_Policy_Changes",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"Arithmetic operations on time series\" directly describes operations on time series, which are fundamentally \"Time Series Data\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_1",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Time_Series_Data_Application",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"Arithmetic operations on time series\" directly describes operations on time series, which are fundamentally \"Time Series Data\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Pandas_time_series_data_manipulation",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of data manipulation on time series, which is a core functionality covered by \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Date_and_Time_Operations",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Arithmetic operations on time series\" is a specific application of general \"Date and Time Operations\" to time series data."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Date_and_Time_Operations",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Current_Date_and_Time_Offset",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Date and Time Operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Arithmetic operations on time series\" is a specific application of general \"Date and Time Operations\" to time series data."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Timedelta_Calculation",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Timedelta_Calculation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Timedelta Calculation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "Arithmetic operations on time series often result in or involve \"Timedelta Calculation\"."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_Date_and_Datetime_Manipulation",
        "source": "Arithmetic_operations_on_time_series",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Arithmetic operations on time series\" is a specialized form of \"Date and Datetime Manipulation\" applied to time series data."
      },
      {
        "id": "e_Arithmetic_operations_on_time_series_uses_datetime_arithmetic_operations",
        "source": "Arithmetic_operations_on_time_series",
        "target": "datetime_arithmetic_operations",
        "relation": "uses",
        "definition": "Arithmetic operations on time series uses datetime arithmetic operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Series Basics"
            ],
            "line_start": 104,
            "line_end": 104,
            "text_excerpt": "like other series, arithmetic operations between differently indexed time series automatically"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific type of \"datetime arithmetic operations\" applied to time series."
      },
      {
        "id": "e_Quarterly_Resampling_with_Forward_Fill_uses_Pandas_Time_Series_Resampling",
        "source": "Quarterly_Resampling_with_Forward_Fill",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Quarterly Resampling with Forward Fill uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 304,
            "line_end": 304,
            "text_excerpt": "annual_frame.resample('q-mar').ffill()"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a specific instance of resampling and ffilling, which are core operations described in the Pandas_Time_Series_Resampling node."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_2_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas DataFrame Creation uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition explicitly mentions `pd.dataframe`, which is a core component of Pandas for data manipulation, and the context of random data creation points towards data preparation for time series."
      },
      {
        "id": "e_Pandas_DataFrame_Creation_2_exampleOf_Pandas_time_series_data_manipulation",
        "source": "Pandas_DataFrame_Creation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "exampleOf",
        "definition": "Pandas DataFrame Creation exampleOf Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 290,
            "line_end": 290,
            "text_excerpt": "frame = pd.dataframe(np.random.randn(24, 4),"
          }
        ],
        "confidence": 0.9,
        "rationale": "The specific example `frame = pd.dataframe(np.random.randn(24, 4),` directly demonstrates a core operation within \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Time_Series_Interval_parameterOf_Pandas_Time_Series_Resampling",
        "source": "Time_Series_Interval",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "parameterOf",
        "definition": "Time Series Interval parameterOf Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 7,
            "line_end": 7,
            "text_excerpt": "rule, such as every 15 seconds, every 5 minutes, or once per month. time series can"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Time Series Interval\" directly corresponds to the frequency parameter used in Pandas' time series resampling operations."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_time_series_data_manipulation",
        "source": "time_series_data_manipulation",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node \"Pandas Library Import\" is the standard way to start using the Pandas library, which is explicitly mentioned in the definition of \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_time_series_data_manipulation",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_time_series_data_manipulation",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas time series data manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new node \"Pandas Library Import\" is the standard way to start using the Pandas library, which is explicitly mentioned in the definition of \"Pandas time series data manipulation\"."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_Time_Series_Resampling",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Pandas Time Series Resampling\" includes multiple uses of `pd.` (e.g., `pd.series`, `pd.date_range`, `pd.period`), which indicates it relies on the Pandas library. Importing Pandas is necessary to use these."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_Time_Series_Resampling",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition of \"Pandas Time Series Resampling\" includes multiple uses of `pd.` (e.g., `pd.series`, `pd.date_range`, `pd.period`), which indicates it relies on the Pandas library. Importing Pandas is necessary to use these."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_DatetimeIndexGenerationParameters",
        "source": "time_series_data_manipulation",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition refers to \"generating a datetimeindex\", which is a core feature of Pandas. Importing Pandas is a prerequisite for this."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_DatetimeIndexGenerationParameters",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "DatetimeIndexGenerationParameters",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy DatetimeIndexGenerationParameters",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition refers to \"generating a datetimeindex\", which is a core feature of Pandas. Importing Pandas is a prerequisite for this."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(len(rng)), index=rng)` clearly uses Pandas functions (`pd.series`). Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Series_of_Random_Normal_Data_with_Datetime_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series of Random Normal Data with Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(len(rng)), index=rng)` clearly uses Pandas functions (`pd.series`). Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Series_Indexing_and_Selection",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series with Random Normal Data and Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(6), index=dates)` uses `pd.series`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Series_and_DataFrame_Creation",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series with Random Normal Data and Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(6), index=dates)` uses `pd.series`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Series_Indexing_and_Selection",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series with Random Normal Data and Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(6), index=dates)` uses `pd.series`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_with_Random_Normal_Data_and_Datetime_Index",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Series_and_DataFrame_Creation",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series with Random Normal Data and Datetime Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(6), index=dates)` uses `pd.series`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_DataFrame_Creation",
        "source": "time_series_data_manipulation",
        "target": "Pandas_DataFrame_Creation",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas DataFrame Creation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `frame = pd.dataframe(np.random.randn(24, 4),` explicitly uses `pd.dataframe`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_DataFrame_Creation",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_DataFrame_Creation",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas DataFrame Creation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `frame = pd.dataframe(np.random.randn(24, 4),` explicitly uses `pd.dataframe`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Date_Range_Generation_2",
        "source": "time_series_data_manipulation",
        "target": "Date_Range_Generation_2",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes multiple uses of `pd.date_range`, a core Pandas function for generating date ranges. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Date_Range_Generation_2",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Date_Range_Generation_2",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Date Range Generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes multiple uses of `pd.date_range`, a core Pandas function for generating date ranges. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Date_Range",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Date_Range",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `pd.date_range(...)` directly uses a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Date_Range",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Date_Range",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Date Range",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `pd.date_range(...)` directly uses a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_DateRangeGeneration",
        "source": "time_series_data_manipulation",
        "target": "DateRangeGeneration",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy DateRangeGeneration",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `pd.date_range(...)` directly uses a Pandas function for date range generation. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_DateRangeGeneration",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "DateRangeGeneration",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy DateRangeGeneration",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `pd.date_range(...)` directly uses a Pandas function for date range generation. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_pandas_Series_with_random_data_and_date_index",
        "source": "time_series_data_manipulation",
        "target": "pandas_Series_with_random_data_and_date_index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy pandas Series with random data and date index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(6), index=dates)` uses `pd.series`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_pandas_Series_with_random_data_and_date_index",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "pandas_Series_with_random_data_and_date_index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy pandas Series with random data and date index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `ts = pd.series(np.random.randn(6), index=dates)` uses `pd.series`, a Pandas function. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "source": "time_series_data_manipulation",
        "target": "Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series Creation with Random Data and Time Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes multiple uses of `pd.series` and `pd.date_range`, which are Pandas functions. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_Series_Creation_with_Random_Data_and_Time_Index",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Pandas Series Creation with Random Data and Time Index",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes multiple uses of `pd.series` and `pd.date_range`, which are Pandas functions. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Fixed_frequency_date_range_generation",
        "source": "time_series_data_manipulation",
        "target": "Fixed_frequency_date_range_generation",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Fixed-frequency date range generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition mentions \"generating fixed-frequency date ranges\", a primary functionality of `pd.date_range` from Pandas. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Fixed_frequency_date_range_generation",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Fixed_frequency_date_range_generation",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Fixed-frequency date range generation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition mentions \"generating fixed-frequency date ranges\", a primary functionality of `pd.date_range` from Pandas. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_annual_frame_resampling",
        "source": "time_series_data_manipulation",
        "target": "annual_frame_resampling",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy annual_frame_resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `annual_frame = frame.resample('a-dec').mean()` uses `resample`, a method common in Pandas for time series data. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_annual_frame_resampling",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "annual_frame_resampling",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy annual_frame_resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `annual_frame = frame.resample('a-dec').mean()` uses `resample`, a method common in Pandas for time series data. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_HourMinuteOffset",
        "source": "time_series_data_manipulation",
        "target": "Pandas_HourMinuteOffset",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas HourMinuteOffset",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `from pandas.tseries.offsets import hour, minute` directly imports components from Pandas. Thus, `import pandas as pd` is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_uses_Pandas_HourMinuteOffset",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Pandas_HourMinuteOffset",
        "relation": "uses",
        "definition": "Pandas Library Import uses Pandas HourMinuteOffset",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `from pandas.tseries.offsets import hour, minute` directly imports components from Pandas. Thus, `import pandas as pd` is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_uses_resampling_and_grouping_time_series_data",
        "source": "time_series_data_manipulation",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "uses",
        "definition": "Pandas Library Import uses resampling and grouping time series data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes `dup_ts.groupby(level=0)` and `ts.resample('5min', closed='right').sum()`, which are Pandas operations. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_uses_resampling_and_grouping_time_series_data",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "resampling_and_grouping_time_series_data",
        "relation": "uses",
        "definition": "Pandas Library Import uses resampling and grouping time series data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes `dup_ts.groupby(level=0)` and `ts.resample('5min', closed='right').sum()`, which are Pandas operations. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Quarterly_Resampling_with_Forward_Fill",
        "source": "time_series_data_manipulation",
        "target": "Quarterly_Resampling_with_Forward_Fill",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Quarterly Resampling with Forward Fill",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `annual_frame.resample('q-mar').ffill()` uses Pandas' `resample` and `ffill` methods. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Quarterly_Resampling_with_Forward_Fill",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Quarterly_Resampling_with_Forward_Fill",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Quarterly Resampling with Forward Fill",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition `annual_frame.resample('q-mar').ffill()` uses Pandas' `resample` and `ffill` methods. Importing Pandas is a prerequisite."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Frequency_Conversion_of_Time_Series_Data",
        "source": "time_series_data_manipulation",
        "target": "Frequency_Conversion_of_Time_Series_Data",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Frequency Conversion of Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes `p.asfreq('m', how='start')` and `p.asfreq('m', how='end')`, which are Pandas methods for frequency conversion. Importing Pandas is necessary."
      },
      {
        "id": "e_Pandas_Library_Import_usedBy_Frequency_Conversion_of_Time_Series_Data",
        "source": "Pandas_Datetime_Object_Handling",
        "target": "Frequency_Conversion_of_Time_Series_Data",
        "relation": "usedBy",
        "definition": "Pandas Library Import usedBy Frequency Conversion of Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 18,
            "line_end": 18,
            "text_excerpt": "import pandas as pd"
          }
        ],
        "confidence": 0.9,
        "rationale": "The definition includes `p.asfreq('m', how='start')` and `p.asfreq('m', how='end')`, which are Pandas methods for frequency conversion. Importing Pandas is necessary."
      },
      {
        "id": "e_q_dec_uses_Date_Alignment_and_Period_Calculation",
        "source": "q_dec",
        "target": "Date_Alignment_and_Period_Calculation",
        "relation": "uses",
        "definition": "q-dec uses Date Alignment and Period Calculation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 299,
            "line_end": 299,
            "text_excerpt": "q-dec: quarterly, year ending in december"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"q-dec\" is a specific frequency used in pandas for quarterly resampling with a year-end in December, aligning with the concept of date alignment and period calculation."
      },
      {
        "id": "e_q_dec_uses_Pandas_Time_Series_Resampling",
        "source": "q_dec",
        "target": "Pandas_Time_Series_Resampling",
        "relation": "uses",
        "definition": "q-dec uses Pandas Time Series Resampling",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Resampling with Periods"
            ],
            "line_start": 299,
            "line_end": 299,
            "text_excerpt": "q-dec: quarterly, year ending in december"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"q-dec\" is a resampling frequency used in pandas for time series data."
      },
      {
        "id": "e_Daily_Resampling_of_Time_Series_partOf_1",
        "source": "Daily_Resampling_of_Time_Series",
        "target": "Timestamp_Selection_from_Time_Series_Data",
        "relation": "partOf",
        "definition": "Daily Resampling of Time Series partOf Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 146,
            "line_end": 146,
            "text_excerpt": "the sample time series to be fixed daily frequency by calling resample:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Daily Resampling of Time Series\" is a specific type of operation applied to \"Time Series Data\"."
      },
      {
        "id": "e_Daily_Resampling_of_Time_Series_partOf_1",
        "source": "Daily_Resampling_of_Time_Series",
        "target": "Local_Government_Policy_Changes",
        "relation": "partOf",
        "definition": "Daily Resampling of Time Series partOf Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 146,
            "line_end": 146,
            "text_excerpt": "the sample time series to be fixed daily frequency by calling resample:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Daily Resampling of Time Series\" is a specific type of operation applied to \"Time Series Data\"."
      },
      {
        "id": "e_Daily_Resampling_of_Time_Series_partOf_1",
        "source": "Daily_Resampling_of_Time_Series",
        "target": "Time_Series_Data_Application",
        "relation": "partOf",
        "definition": "Daily Resampling of Time Series partOf Time Series Data",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date Ranges, Frequencies, and Shifting"
            ],
            "line_start": 146,
            "line_end": 146,
            "text_excerpt": "the sample time series to be fixed daily frequency by calling resample:"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Daily Resampling of Time Series\" is a specific type of operation applied to \"Time Series Data\"."
      },
      {
        "id": "e_Wednesday_Frequency_isA_Weekly_Wednesday_Frequency",
        "source": "Weekly_Wednesday_Frequency",
        "target": "Weekly_Wednesday_Frequency",
        "relation": "isA",
        "definition": "Wednesday Frequency isA Weekly Wednesday Frequency",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Resampling and Frequency Conversion",
              "Upsampling and Interpolation"
            ],
            "line_start": 282,
            "line_end": 282,
            "text_excerpt": "freq='w-wed'),"
          }
        ],
        "confidence": 1.0,
        "rationale": "The new node \"Wednesday Frequency\" with definition \"freq='w-wed'),\" is a specific instance or type of \"Weekly Wednesday Frequency\" which has a similar definition."
      },
      {
        "id": "e_datetime_module_isA_3",
        "source": "datetime_module",
        "target": "3",
        "relation": "isA",
        "definition": "datetime module isA Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 26,
            "line_end": 26,
            "text_excerpt": "from datetime import datetime"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept \"datetime module\" directly refers to the `datetime` class and its functionality, making it a specific instance or module related to the broader concept of \"Datetime\"."
      },
      {
        "id": "e_datetime_module_uses_Datetime_String_Parsing",
        "source": "datetime_module",
        "target": "Datetime_String_Parsing",
        "relation": "uses",
        "definition": "datetime module uses Datetime String Parsing",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 26,
            "line_end": 26,
            "text_excerpt": "from datetime import datetime"
          }
        ],
        "confidence": 0.9,
        "rationale": "The `datetime` module's `strptime` function is specifically used for parsing datetime strings."
      },
      {
        "id": "e_datetime_module_uses_Date_and_Datetime_Manipulation",
        "source": "datetime_module",
        "target": "Date_and_Datetime_Manipulation",
        "relation": "uses",
        "definition": "datetime module uses Date and Datetime Manipulation",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 26,
            "line_end": 26,
            "text_excerpt": "from datetime import datetime"
          }
        ],
        "confidence": 0.9,
        "rationale": "The `datetime` module is the fundamental tool for performing various date and datetime manipulations."
      },
      {
        "id": "e_datetime_module_uses_datetime_arithmetic_operations",
        "source": "datetime_module",
        "target": "datetime_arithmetic_operations",
        "relation": "uses",
        "definition": "datetime module uses datetime arithmetic operations",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Date and Time Data Types and Tools"
            ],
            "line_start": 26,
            "line_end": 26,
            "text_excerpt": "from datetime import datetime"
          }
        ],
        "confidence": 0.9,
        "rationale": "The `datetime` module directly supports arithmetic operations on datetime objects."
      },
      {
        "id": "e_Timestamp_relative_to_experiment_or_elapsed_time_relatedTo_Timestamp_object",
        "source": "Timestamp_relative_to_experiment_or_elapsed_time",
        "target": "Timestamped_Interval",
        "relation": "relatedTo",
        "definition": "Timestamp relative to experiment or elapsed time relatedTo Timestamp object",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 14,
            "line_end": 14,
            "text_excerpt": "experiment or elapsed time; each timestamp is a measure of time relative to a"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a type of timestamp object."
      },
      {
        "id": "e_Timestamp_relative_to_experiment_or_elapsed_time_relatedTo_Timestamp_object",
        "source": "Timestamp_relative_to_experiment_or_elapsed_time",
        "target": "Timestamp_selection",
        "relation": "relatedTo",
        "definition": "Timestamp relative to experiment or elapsed time relatedTo Timestamp object",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series"
            ],
            "line_start": 14,
            "line_end": 14,
            "text_excerpt": "experiment or elapsed time; each timestamp is a measure of time relative to a"
          }
        ],
        "confidence": 0.9,
        "rationale": "The new concept is a type of timestamp object."
      },
      {
        "id": "e_Coordinated_Universal_Time_isA_3",
        "source": "Coordinated_Universal_Time",
        "target": "3",
        "relation": "isA",
        "definition": "Coordinated Universal Time isA Datetime",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Time Zone Handling"
            ],
            "line_start": 43,
            "line_end": 43,
            "text_excerpt": "mean time and is the current international standard. time zones are expressed as"
          }
        ],
        "confidence": 0.9,
        "rationale": "\"Coordinated Universal Time\" is a specific type of time standard, which fits the definition of \"isA\" for \"Datetime\"."
      },
      {
        "id": "e_StringParsingForDateTime_isA_Datetime_String_Parsing",
        "source": "Datetime_String_Parsing",
        "target": "Datetime_String_Parsing",
        "relation": "isA",
        "definition": "StringParsingForDateTime isA Datetime String Parsing",
        "provenance": [
          {
            "section_path": [
              "__ROOT__",
              "Time Series",
              "Exercise:"
            ],
            "line_start": 79,
            "line_end": 79,
            "text_excerpt": "datetime.strptime(value, '%y-%m-%d')"
          }
        ],
        "confidence": 0.95,
        "rationale": "The new node \"StringParsingForDateTime\" is a specific instance or implementation of the general concept of \"Datetime String Parsing\"."
      }
    ]
  }
}